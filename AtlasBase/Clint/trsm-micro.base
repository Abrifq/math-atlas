@ROUT ATL_utrsmR_alloc
void* Mjoin(PATL,utrsmR_alloc)
   (ipinfo_t *ip, int N, TYPE **Diag, TYPE **L, TYPE **R, TYPE **w)
{
   const int MU=ip->mu, NU=ip->nu;
   int mb = (N + NU - 1) / NU;
   const int NUNU = NU*NU;
   const int MUNU = MU*NU;
   void *vp;
   vp = malloc( ATL_MulBySize( N + (NUNU*mb*(mb+1)/2) + mb*MUNU + 2*MUNU )
                           + 4*ATL_Cachelen);
   ATL_assert(vp);
   *Diag = ATL_AlignPtr(vp);
   *L = (*Diag) + (N SHIFT);
   *L = ATL_AlignPtr(*L);
   *R = (*L) + ((NUNU*mb*(mb+1)/2) SHIFT);
   *R = ATL_AlignPtr(*R);
   *w = (*R) + ((mb*MUNU) SHIFT);
   *w = ATL_AlignPtr(*w);
   return(vp);
}
   @endextract
@ROUT ATL_utrsmL_alloc
#include "atlas_amm.h"
void* Mjoin(ATL,utrsmL_alloc)
   (ipinfo_t*ip, int N, TYPE **Diag, TYPE **L, TYPE **R, TYPE **w)
{
   const int MU = ip->mu, NU=ip->nu;
   int mb = (N + MU - 1) / MU;
   const int MUMU = MU*MU;
   const int MUNU = MU*NU;
   void *vp;
   vp = malloc( ATL_MulBySize( N + (MUMU*mb*(mb+1)/2) + mb*MUNU + 2*MUNU )
                           + 4*ATL_Cachelen);
   ATL_assert(vp);
   *Diag = ATL_AlignPtr(vp);
   *L = (*Diag) + (N SHIFT);
   *L = ATL_AlignPtr(*L);
   *R = (*L) + ((MUMU*mb*(mb+1)/2) SHIFT);
   *R = ATL_AlignPtr(*R);
   *w = (*R) + ((mb*MUNU) SHIFT);
   *w = ATL_AlignPtr(*w);
   return(vp);
}
   @endextract
@BEGINSKIP
   All TRSM microkernels variants are generated from this file.
   Written by Rakib Hasan, heavily modifed by R. Clint Whaley to work
   with new framework and to be separately compilable.
@ENDSKIP
@ROUT ATL_utrsmL_LT_UN ATL_utrsmL_LN_UT ATL_utrsmR_LT_UN ATL_utrsmR_LN_UT
#include "atlas_misc.h"
#include "atlas_amm.h"
@ROUT ATL_utrsmL_LT_UN ATL_utrsmL_LN_UT `@define SD @L@`
@ROUT ATL_utrsmR_LT_UN ATL_utrsmR_LN_UT `@define SD @R@`
@ROUT !
/*
 * Nanokernels are generated into standard names, but with differing paths
 * based on unroll block size
 */
#ifndef ATL_NONANO
   #include Mstr(Mjoin(ATLAS_PRE,ntrsm@(SD).h))
   #ifdef USE_TRANS
      #include Mstr(Mjoin(ATLAS_PRE,ntrsm_cpCN.h))
   #else
      #include Mstr(Mjoin(ATLAS_PRE,ntrsm_cpCT.h))
   #endif
#endif
@skip #include Mstr(Mjoin(ATLAS_PRE,trsmKL.h))
@skip #include Mstr(Mjoin(Mjoin(Mjoin(Mjoin(Mjoin(ATLAS_PRE,cpFromBlkC_),\
@skip               ATL_MU),x),ATL_NU),_.h))
@skip /* best with fully rolled kernel and no prefetch ins. */
#ifndef ATL_MU
   #error "ATL_MU must be defined!"
#endif
#ifndef ATL_NU
   #error "ATL_NU must be defined!"
#endif
#define ATL_MUNU (ATL_MU*ATL_NU)
@skip int Mjoin(PATL,GetuTRSM@(SD)MU)() { return(ATL_MU); }
@skip int Mjoin(PATL,GetuTRSM@(SD)NU)() { return(ATL_NU); }
#ifdef Conj_
   #define IsConj 1
#else
   #define IsConj 0
#endif

@ROUT ATL_utrsmL_LT_UN
#ifdef Upper_
   #define ATL_ntrcopy ATL_ntrcopyL
   #define ATL_ntrsm ATL_ntrsmUN
   #define ATL_ntrsm_RR ATL_ntrsmUN_RR
   void ATL_utrsmL_UN
#else
   #define ATL_ntrcopy ATL_ntrcopyU
   #define ATL_ntrsm ATL_ntrsmLT
   #define ATL_ntrsm_RR ATL_ntrsmLT_RR
   void ATL_utrsmL_LT
#endif
   (ipinfo_t *ip, const enum ATLAS_DIAG Diag, 
    ATL_CINT N, ATL_CINT R, const SCALAR alpha, const TYPE *A, ATL_CSZT lda, 
    TYPE *X, ATL_CSZT ldx, TYPE *diag, TYPE *L, TYPE *RW, TYPE *w)
{
   cm2am_t r2a = ip->b2blk;
   cm2am_t l2a = ip->a2blk;
   ammkern_t amm_b0 = ip->amm_b0, amm_b1 = ip->amm_b1;
   #ifdef TCPLX
      ammkern_t amm_bn = amm_bn;
      TYPE ONE[3] = {ATL_rone, ATL_rzero, ATL_rzero}, *ZERO=ONE+1;
      TYPE NONE[2] = {ATL_rnone, ATL_rzero};
   #else
      #define ONE ATL_rone
      #define ZERO ATL_rzero
      #define NONE ATL_rnone
   #endif
   const int MU = ATL_MU, MUMU = ATL_MU*ATL_MU;
   const int NU = ATL_NU, MUNU = ATL_MU*ATL_NU;
   const int UnitAlpha = SCALAR_IS_ONE(alpha);
   const int NeedCopyA = (A != NULL);
   #ifdef Trans_
      #define ainc 1
   #else
      #define ainc lda
   #endif
@skip   const int ainc = (TA != AtlasNoTrans) ? 1 : lda;
@skip   const int IsConj = (TA == AtlasConjTrans);
   TYPE *l, *x=X;
   int mb = (N + MU - 1) / MU;
   const int iRWoff = mb*MUNU;
   ATL_SZT r;
   int i, ix=-1, mbi;

@skip   GetInfo(TA, &amm_b0, &amm_b1, &amm_bn, &l2a, &r2a);
   for (r=0; r < R; r += NU, x += (NU SHIFT)*ldx)
   {
      int mu, nu = R - r;
      const int DoCopy = (!r && NeedCopyA);
      TYPE *d, *Ac = ((TYPE*)A), *xc = x;
      nu = Mmin(nu, NU);
      mu = Mmin(MU, N);
      Ac += ((N - mu) SHIFT) * (lda+1);
      xc += ((N - mu) SHIFT);

      /* do the first triangle */
      if (Diag == AtlasUnit) d = NULL;
      else d = diag;
      if (DoCopy)
         ATL_ntrcopy(IsConj, mu, Ac, lda, L, MU, d);
      if (mu == ATL_MU)
      {
         if (!UnitAlpha) { Mjoin(PATL,scalK)(nu, alpha, xc, ldx); }
         ATL_ntrsm(nu, d, L, MU, xc, ldx);
      }
      else
      {
         if (!UnitAlpha) { Mjoin(PATL,scalKRR)(mu, nu, alpha, xc, ldx); }
         ATL_ntrsm_RR(mu, nu, d, L, MU, xc, ldx);
      }

      for (i=N-mu, mbi=1, l=L+(MUMU SHIFT); 
            i > 0; i -= MU, mbi++, l+=(MUMU SHIFT))
      {
         mu = Mmin(i, MU);
         Ac -= (mu SHIFT) * (lda+1);
         xc -= (mu SHIFT);
         #ifdef TCPLX
         {
            TYPE *rL, *iL, *rR, *iR;
            iR = RW + (mb-mbi)*MUNU;
            rR = iR + iRWoff;
            rL = l + mbi*MUMU;
            iL = l;
            r2a(MU, nu, ONE, xc+(mu SHIFT), ldx, rR, iR);
            if (DoCopy) /* do the copy as needed for in-cache comp. */
               l2a(N-i, mu, NONE, Ac+(mu SHIFT)*ainc, lda, rL, iL);
            #ifndef USE_TRANS
               amm_b0(1, 1, N-i, iL, iR, w, rL, iR, w+MUNU);
               amm_b0(1, 1, N-i, rL, iR, w+MUNU, rL, rR, w);
               amm_bn(1, 1, N-i, rL, rR, w, iL, rR, w+MUNU);
               amm_b1(1, 1, N-i, iL, rR, w+MUNU, 
                      l+(mbi SHIFT)*MUMU, RW+(mb-mbi-1)*MUNU, w);
            #else
               amm_b0(1, 1, N-i, iR, iL, w, rR, iL, w+MUNU);
               amm_b0(1, 1, N-i, rR, iL, w+MUNU, rR, rL, w);
               amm_bn(1, 1, N-i, rR, rL, w, iR, rL, w+MUNU);
               amm_b1(1, 1, N-i, iR, rL, w+MUNU, 
                      RW+(mb-mbi-1)*MUNU, l+(mbi SHIFT)*MUMU, w);
            #endif
            ATL_ntrsm_cpC(mu, nu, ONE, w, w+MUNU, alpha, xc, ldx);
         }
         #else
            r2a(MU, nu, ONE, xc+mu, ldx, RW+((mb-mbi)*MUNU));
            if (DoCopy) /* do the copy as needed for in-cache comp. */
               l2a(N-i, mu, NONE, Ac+mu*ainc, lda, l);
            #ifndef USE_TRANS
               amm_b0(1, 1, N-i, l, RW+(mb-mbi)*MUNU, w, 
                     l+mbi*MUMU, RW+(mb-mbi-1)*MUNU, w);
            #else
               amm_b0(1, 1, N-i, RW+(mb-mbi)*MUNU, l, w, 
                     RW+(mb-mbi-1)*MUNU, l+mbi*MUMU, w);
            #endif
            ATL_ntrsm_cpC(mu, nu, ONE, w, alpha, xc, ldx);
         #endif
         /* now do the diagonal trsm */
         l += (mbi SHIFT) * MUMU;
         if (Diag == AtlasUnit) d = NULL;
         else d = diag + ((N-i) SHIFT);
         if (DoCopy)
            ATL_ntrcopy(IsConj, mu, Ac, lda, l, MU, d);
         if (mu == ATL_MU)
            ATL_ntrsm(nu, d, l, MU, xc, ldx);
         else
            ATL_ntrsm_RR(mu, nu, d, l, MU, xc, ldx);
      }
   }
}
#undef ainc
@ROUT ATL_utrsmL_LN_UT
#ifdef Upper_
   #define ATL_ntrcopy ATL_ntrcopyU
   #define ATL_ntrsm ATL_ntrsmUT
   #define ATL_ntrsm_RR ATL_ntrsmUT_RR
   #define ainc 1
   void ATL_utrsmL_UT
#else
   #define ATL_ntrcopy ATL_ntrcopyL
   #define ATL_ntrsm ATL_ntrsmLN
   #define ATL_ntrsm_RR ATL_ntrsmLN_RR
   #define ainc lda
   void ATL_utrsmL_LN
#endif
   (ipinfo_t *ip, const enum ATLAS_DIAG Diag, 
    ATL_CINT N, ATL_CINT R, const SCALAR alpha, const TYPE *A, ATL_CINT lda, 
    TYPE *X, ATL_CINT ldx, TYPE *diag, TYPE *L, TYPE *RW, TYPE *w)
{
   cm2am_t l2a = ip->a2blk;
   cm2am_t r2a = ip->b2blk;
   ammkern_t amm_b0 = ip->amm_b0, amm_b1 = ip->amm_b1;
   #ifdef TCPLX
      ammkern_t amm_bn = ip->amm_bn;
      TYPE ONE[3] = {ATL_rone, ATL_rzero, ATL_rzero}, *ZERO=ONE+1;
      TYPE NONE[2] = {ATL_rnone, ATL_rzero};
   #else
      #define ONE ATL_rone
      #define ZERO ATL_rzero
      #define NONE ATL_rnone
   #endif
   const int MU = ATL_MU, MUMU = ATL_MU*ATL_MU;
   const int NU = ATL_NU, MUNU = ATL_MU*ATL_NU;
   const int UnitAlpha = SCALAR_IS_ONE(alpha);
   const int NeedCopyA = (A != NULL);
   TYPE *l, *x=X;
   int mb = (N + MU - 1) / MU;
   const int iRWoff = mb*MUNU;
   ATL_SZT r;
   int i, ix=-1, mbi;

@skip   GetInfo(TA, &amm_b0, &amm_b1, &amm_bn, &l2a, &r2a);
   for (r=0; r < R; r += NU, x += (NU SHIFT)*ldx)
   {
      int mu, nu = R - r;
      const int DoCopy = (!r && NeedCopyA);
      TYPE *d, *Ac = ((TYPE*)A), *xc = x;
      nu = Mmin(nu,NU);
      mu = Mmin(MU, N);

      /* do the first triangle */
      if (Diag == AtlasUnit) d = NULL;
      else d = diag;
      if (DoCopy)
         ATL_ntrcopy(IsConj, mu, Ac, lda, L, MU, d);
      if (mu == ATL_MU)
      {
         if (!UnitAlpha) { Mjoin(PATL,scalK)(nu, alpha, xc, ldx); }
         ATL_ntrsm(nu, d, L, MU, xc, ldx);
      }
      else
      {
         if (!UnitAlpha) { Mjoin(PATL,scalKRR)(mu, nu, alpha, xc, ldx); }
         ATL_ntrsm_RR(mu, nu, d, L, MU, xc, ldx);
      }

      for (i=mu, mbi=1, l=L+(MUMU SHIFT); 
            i < N; i += MU, mbi++, l+=(MUMU SHIFT))
      {
         mu = Mmin(N-i, MU);
         Ac += (MU SHIFT) * (lda+1);
         xc += (MU SHIFT);
         #ifdef TCPLX
         {
            TYPE *rL, *iL, *rR, *iR;
            iR = RW + (mbi-1)*MUNU;
            rR = iR + iRWoff;
            rL = l + mbi*MUMU;
            iL = l;
            r2a(MU, nu, ONE, xc-(MU SHIFT), ldx, rR, iR);
            if (DoCopy) /* do the copy as needed for in-cache comp. */
               l2a(i, mu, NONE, Ac-(i SHIFT)*ainc, lda, rL, iL);
            iR = RW;
            rR = iR + iRWoff;
            #ifndef USE_TRANS
               amm_b0(1, 1, i, iL, iR, w, rL, iR, w+MUNU);
               amm_b0(1, 1, i, rL, iR, w+MUNU, rL, rR, w);
               amm_bn(1, 1, i, rL, rR, w, iL, rR, w+MUNU);
               amm_b1(1, 1, i, iL, rR, w+MUNU, l+(mbi SHIFT)*MUMU, RW, w);
            #else
               amm_b0(1, 1, i, iR, iL, w, rR, iL, w+MUNU);
               amm_b0(1, 1, i, rR, iL, w+MUNU, rR, rL, w);
               amm_bn(1, 1, i, rR, rL, w, iR, rL, w+MUNU);
               amm_b1(1, 1, i, iR, rL, w+MUNU, RW, l+(mbi SHIFT)*MUMU, w);
            #endif
            ATL_ntrsm_cpC(mu, nu, ONE, w, w+MUNU, alpha, xc, ldx);
         }
         #else
            r2a(MU, nu, ONE, xc-MU, ldx, RW+(mbi-1)*MUNU);
            if (DoCopy) /* do the copy as needed for in-cache comp. */
               l2a(i, mu, NONE, Ac-i*ainc, lda, l);
            #ifndef USE_TRANS
               amm_b0(1, 1, i, l, RW, w, l+mbi*MUMU, RW, w);
            #else
               amm_b0(1, 1, i, RW, l, w, RW, l+mbi*MUMU, w);
            #endif
            ATL_ntrsm_cpC(mu, nu, ONE, w, alpha, xc, ldx);
         #endif
         /* now do the diagonal trsm */
         l += (mbi SHIFT) * MUMU;
         if (Diag == AtlasUnit) d = NULL;
         else d = diag + (i SHIFT);
         if (DoCopy)
            ATL_ntrcopy(IsConj, mu, Ac, lda, l, MU, d);
         if (mu == ATL_MU)
            ATL_ntrsm(nu, d, l, MU, xc, ldx);
         else
            ATL_ntrsm_RR(mu, nu, d, l, MU, xc, ldx);
      }
   }
}
@ROUT
void Mjoin(PATL,utrsmLUN)
      (const enum ATLAS_DIAG Diag, ATL_CINT N, ATL_CINT R, 
       const SCALAR alpha, const TYPE *A, ATL_CINT lda, TYPE *X, ATL_CINT ldx, 
       TYPE *diag, TYPE *L, TYPE *RW, TYPE *w)
{
   Mjoin(PATL,utrsmL_LTUN)(AtlasNoTrans, Diag, N, R, alpha, A, lda, 
         X, ldx, diag, L, RW, w);
}

void Mjoin(PATL,utrsmLUT)
      (const enum ATLAS_DIAG Diag, ATL_CINT N, ATL_CINT R, 
       const SCALAR alpha, const TYPE *A, ATL_CINT lda, TYPE *X, ATL_CINT ldx, 
       TYPE *diag, TYPE *L, TYPE *RW, TYPE *w)
{
   Mjoin(PATL,utrsmL_LNUT)(AtlasTrans, Diag, N, R, alpha, A, lda, 
         X, ldx, diag, L, RW, w);
}

#ifdef TCPLX
void Mjoin(PATL,utrsmLUC)
      (const enum ATLAS_DIAG Diag, ATL_CINT N, ATL_CINT R, 
       const SCALAR alpha, const TYPE *A, ATL_CINT lda, TYPE *X, ATL_CINT ldx, 
       TYPE *diag, TYPE *L, TYPE *RW, TYPE *w)
{
   Mjoin(PATL,utrsmL_LNUT)(AtlasConjTrans, Diag, N, R, alpha, A, lda, 
         X, ldx, diag, L, RW, w);
}
#endif

void Mjoin(PATL,utrsmLLN)
      (const enum ATLAS_DIAG Diag, ATL_CINT N, ATL_CINT R, 
       const SCALAR alpha, const TYPE *A, ATL_CINT lda, TYPE *X, ATL_CINT ldx, 
       TYPE *diag, TYPE *L, TYPE *RW, TYPE *w)
{
   Mjoin(PATL,utrsmL_LNUT)(AtlasNoTrans, Diag, N, R, alpha, A, lda, 
         X, ldx, diag, L, RW, w);
}

void Mjoin(PATL,utrsmLLT)
      (const enum ATLAS_DIAG Diag, ATL_CINT N, ATL_CINT R, 
       const SCALAR alpha, const TYPE *A, ATL_CINT lda, TYPE *X, ATL_CINT ldx, 
       TYPE *diag, TYPE *L, TYPE *RW, TYPE *w)
{
   Mjoin(PATL,utrsmL_LTUN)(AtlasTrans, Diag, N, R, alpha, A, lda, 
         X, ldx, diag, L, RW, w);
}

#ifdef TCPLX
void Mjoin(PATL,utrsmLLC)
      (const enum ATLAS_DIAG Diag, ATL_CINT N, ATL_CINT R, 
       const SCALAR alpha, const TYPE *A, ATL_CINT lda, TYPE *X, ATL_CINT ldx, 
       TYPE *diag, TYPE *L, TYPE *RW, TYPE *w)
{
   Mjoin(PATL,utrsmL_LTUN)(AtlasConjTrans, Diag, N, R, alpha, A, lda, 
         X, ldx, diag, L, RW, w);
}
#endif

#ifdef NO_AMM_NAME
   void Mjoin(PATL,trsm)
      (const enum ATLAS_SIDE Side, const enum ATLAS_UPLO Uplo, 
       const enum ATLAS_TRANS TA, const enum ATLAS_DIAG Diag, 
       ATL_CINT N, ATL_CINT R, const SCALAR alpha, 
       const TYPE *A, ATL_CINT lda, TYPE *X, ATL_CINT ldx)
#else
   int Mjoin(PATL,utrsmKL)
      (const enum ATLAS_UPLO Uplo, 
       const enum ATLAS_TRANS TA, const enum ATLAS_DIAG Diag, 
       ATL_CINT N, ATL_CINT R, const SCALAR alpha, 
       const TYPE *A, ATL_CINT lda, TYPE *X, ATL_CINT ldx)
#endif
{
   const int UPPER = (Uplo == AtlasUpper);
   void *vp;
   TYPE *diag, *L, *RW, *w;
   vp = GetWorkspaceL(N, &diag, &L, &RW, &w);
   #ifndef NO_AMM_NAME
      if (!vp) return(-1);
   #endif
   if (!UPPER)
   {
      if (TA == AtlasNoTrans)
         Mjoin(PATL,utrsmLLN)(Diag, N, R, alpha, A, lda, X, ldx, 
               diag, L, RW, w);
      else if (TA == AtlasTrans)
         Mjoin(PATL,utrsmLLT)(Diag, N, R, alpha, A, lda, X, ldx, 
               diag, L, RW, w);
      #ifdef TCPLX
         else /* (TA == AtlasConjTrans) */
            Mjoin(PATL,utrsmLLC)(Diag, N, R, alpha, A, lda, X, ldx, 
                  diag, L, RW, w);
      #endif
   }
   else
   {
      if (TA == AtlasNoTrans)
         Mjoin(PATL,utrsmLUN)(Diag, N, R, alpha, A, lda, X, ldx, 
               diag, L, RW, w);
      else if (TA == AtlasTrans)
         Mjoin(PATL,utrsmLUT)(Diag, N, R, alpha, A, lda, X, ldx, 
               diag, L, RW, w);
   #ifdef TCPLX
      else /* (TA == AtlasConjTrans) */
         Mjoin(PATL,utrsmLUC)(Diag, N, R, alpha, A, lda, X, ldx, 
               diag, L, RW, w);
   #endif
   }
   free(vp);
   #ifndef NO_AMM_NAME
      return(0);
   #endif
}
@ROUT ATL_utrsmR_LT_UN
#ifndef Upper_
   #define ATL_ntrcopy ATL_ntrcopyL
   #define ATL_ntrsm ATL_ntrsmLT
   #define ATL_ntrsm_RR ATL_ntrsmLT_RR
   #define ainc lda
   void ATL_utrsmR_LT
#else
   #define ATL_ntrcopy ATL_ntrcopyU
   #define ATL_ntrsm ATL_ntrsmUN
   #define ATL_ntrsm_RR ATL_ntrsmUN_RR
   #define ainc 1
   void ATL_utrsmR_UN
#endif
   (ipinfo_t *ip, const enum ATLAS_DIAG Diag,
    ATL_CINT R, ATL_CINT N, const SCALAR alpha, const TYPE *A, ATL_CINT lda,
    TYPE *X, ATL_CINT ldx, TYPE *diag, TYPE *L, TYPE *RW, TYPE *w)
{
   cm2am_t l2a = ip->a2blk, r2a = ip->b2blk;
   ammkern_t amm_b0 = ip->amm_b0, amm_b1 = ip->amm_b1;
   #ifdef TCPLX
      ammkern_t amm_bn = ip->amm_bn;
      TYPE ONE[3] = {ATL_rone, ATL_rzero, ATL_rzero}, *ZERO=ONE+1;
      TYPE NONE[2] = {ATL_rnone, ATL_rzero};
   #else
      #define ONE ATL_rone
      #define ZERO ATL_rzero
      #define NONE ATL_rnone
   #endif
   const int NU = ATL_NU, NUNU = ATL_NU*ATL_NU;
   const int MU = ATL_MU, MUNU = ATL_MU*ATL_NU;
   const int UnitAlpha = SCALAR_IS_ONE(alpha);
   const int NeedCopyA = (A != NULL);
   TYPE *l, *x=X;
   int mb = (N + NU - 1) / NU;
   const int iRWoff = mb*MUNU;
   ATL_SZT r;
   int i, ix=-1, mbi;

@skip   GetInfo(TA, &amm_b0, &amm_b1, &amm_bn, &l2a, &r2a);
   for (r=0; r < R; r += MU, x += (MU SHIFT))
   {
      int nu, mu = R - r;
      const int DoCopy = (!r && NeedCopyA);
      TYPE *d, *Ac = ((TYPE*)A), *xc = x;
      mu = Mmin(mu, MU);
      nu = Mmin(NU, N);
      /* do the first triangle */
      if (Diag == AtlasUnit) d = NULL;
      else d = diag;
      if (DoCopy)
         ATL_ntrcopy(IsConj, nu, Ac, lda, L, NU, d);
      if (nu == ATL_NU)
      {
         if (!UnitAlpha) { Mjoin(PATL,scalK)(mu, alpha, xc, ldx); }
         ATL_ntrsm(mu, d, L, NU, xc, ldx);
      }
      else
      {
         if (!UnitAlpha) { Mjoin(PATL,scalKRR)(mu, nu, alpha, xc, ldx); }
         ATL_ntrsm_RR(mu, nu, d, L, NU, xc, ldx);
      }

      for (i=nu, mbi=1, l=L+(NUNU SHIFT); 
            i < N; i += NU, mbi++, l+=(NUNU SHIFT))
      {
         nu = Mmin(N-i, NU);
         Ac += (NU SHIFT) * (lda+1);
         xc += (NU SHIFT) * ldx;
         #ifdef TCPLX
         {
            TYPE *rL, *iL, *rR, *iR;
            iR = RW + (mbi-1)*MUNU;
            rR = iR + iRWoff;
            rL = l + mbi*NUNU;
            iL = l;
            r2a(NU, mu, ONE, xc-(NU SHIFT)*ldx, ldx, rR, iR);
            if (DoCopy) /* do the copy as needed for in-cache comp. */
               l2a(i, nu, NONE, Ac-(i SHIFT)*ainc, lda, rL, iL);
            iR = RW;
            rR = iR + iRWoff;
            #ifdef USE_TRANS
               amm_b0(1, 1, i, iL, iR, w, rL, iR, w+MUNU);
               amm_b0(1, 1, i, rL, iR, w+MUNU, rL, rR, w);
               amm_bn(1, 1, i, rL, rR, w, iL, rR, w+MUNU);
               amm_b1(1, 1, i, iL, rR, w+MUNU, l+(mbi SHIFT)*NUNU, RW, w);
            #else
               amm_b0(1, 1, i, iR, iL, w, rR, iL, w+MUNU);
               amm_b0(1, 1, i, rR, iL, w+MUNU, rR, rL, w);
               amm_bn(1, 1, i, rR, rL, w, iR, rL, w+MUNU);
               amm_b1(1, 1, i, iR, rL, w+MUNU, RW, l+(mbi SHIFT)*NUNU, w);
            #endif
            ATL_ntrsm_cpC(mu, nu, ONE, w, w+MUNU, alpha, xc, ldx);
         }
         #else
            r2a(NU, mu, ONE, xc-(NU*ldx), ldx, RW+(mbi-1)*MUNU);
            if (DoCopy) /* do the copy as needed for in-cache comp. */
            {
               l2a(i, nu, NONE, Ac-i*ainc, lda, l);
            }
            #ifdef USE_TRANS
               amm_b0(1, 1, i, l, RW, w, l+mbi*NUNU, RW, w);
            #else
               amm_b0(1, 1, i, RW, l, w, RW, l+mbi*NUNU, w);
            #endif
            ATL_ntrsm_cpC(mu, nu, ONE, w, alpha, xc, ldx);
         #endif
         /* now do the diagonal trsm */
         l += (mbi SHIFT) * NUNU;
         if (Diag == AtlasUnit) d = NULL;
         else d = diag + (i SHIFT);
         if (DoCopy)
            ATL_ntrcopy(IsConj, nu, Ac, lda, l, NU, d);
         if (nu == ATL_NU)
            ATL_ntrsm(mu, d, l, NU, xc, ldx);
         else
            ATL_ntrsm_RR(mu, nu, d, l, NU, xc, ldx);
      }
   }
}
@ROUT ATL_utrsmR_LN_UT
#ifdef Upper_
   #define ainc lda
   #define ATL_ntrcopy ATL_ntrcopyU
   #define ATL_ntrsm ATL_ntrsmUT
   #define ATL_ntrsm_RR ATL_ntrsmUT_RR
   void ATL_utrsmR_UT
#else
   #define ainc 1
   #define ATL_ntrcopy ATL_ntrcopyL
   #define ATL_ntrsm ATL_ntrsmLN
   #define ATL_ntrsm_RR ATL_ntrsmLN_RR
   void ATL_utrsmR_LN
#endif
   (ipinfo_t *ip, const enum ATLAS_DIAG Diag,
    ATL_CINT R, ATL_CINT N, const SCALAR alpha, const TYPE *A, ATL_CINT lda,
    TYPE *X, ATL_CINT ldx, TYPE *diag, TYPE *L, TYPE *RW, TYPE *w)
{
   cm2am_t l2a = ip->a2blk, r2a = ip->b2blk;
   ammkern_t amm_b0 = ip->amm_b0, amm_b1 = ip->amm_b1;
   #ifdef TCPLX
      ammkern_t amm_bn = ip->amm_bn;
      TYPE ONE[3] = {ATL_rone, ATL_rzero, ATL_rzero}, *ZERO=ONE+1;
      TYPE NONE[2] = {ATL_rnone, ATL_rzero};
   #else
      #define ONE ATL_rone
      #define ZERO ATL_rzero
      #define NONE ATL_rnone
   #endif
   const int NU = ATL_NU, NUNU = ATL_NU*ATL_NU;
   const int MU = ATL_MU, MUNU = ATL_MU*ATL_NU;
   const int UnitAlpha = SCALAR_IS_ONE(alpha);
   const int NeedCopyA = (A != NULL);
   TYPE *l, *x=X;
   int mb = (N + NU - 1) / NU;
   const int iRWoff = mb*MUNU;
   ATL_SZT r;
   int i, ix=-1, mbi;

@skip   GetInfo(TA, &amm_b0, &amm_b1, &amm_bn, &l2a, &r2a);
   for (r=0; r < R; r += MU, x += (MU SHIFT))
   {
      int nu, mu = R - r;
      const int DoCopy = (!r && NeedCopyA);
      TYPE *d, *Ac = ((TYPE*)A), *xc = x;
      mu = Mmin(mu, MU);
      nu = Mmin(NU, N);
      Ac += ((N - nu) SHIFT) * (lda+1);
      xc += ((N - nu) SHIFT) * ldx;
      /* do the first triangle */
      if (Diag == AtlasUnit) d = NULL;
      else d = diag;
      if (DoCopy)
         ATL_ntrcopy(IsConj, nu, Ac, lda, L, NU, d);
      if (nu == ATL_NU)
      {
         if (!UnitAlpha) { Mjoin(PATL,scalK)(mu, alpha, xc, ldx); }
         ATL_ntrsm(mu, d, L, NU, xc, ldx);
      }
      else
      {
         if (!UnitAlpha) { Mjoin(PATL,scalKRR)(mu, nu, alpha, xc, ldx); }
         ATL_ntrsm_RR(mu, nu, d, L, NU, xc, ldx);
      }

      for (i=N-nu, mbi=1, l=L+(NUNU SHIFT); 
            i > 0; i -= NU, mbi++, l+=(NUNU SHIFT))
      {
         nu = Mmin(i, NU);
         Ac -= (nu SHIFT) * (lda+1);
         xc -= (nu SHIFT) * ldx;
         #ifdef TCPLX
         {
            TYPE *rL, *iL, *rR, *iR;
            iR = RW + (mb-mbi)*MUNU;
            rR = iR + iRWoff;
            rL = l + mbi*NUNU;
            iL = l;
            r2a(NU, mu, ONE, xc+(nu SHIFT)*ldx, ldx, rR, iR);
            if (DoCopy) /* do the copy as needed for in-cache comp. */
               l2a(N-i, nu, NONE, Ac+(nu SHIFT)*ainc, lda, rL, iL);
            #ifdef USE_TRANS
               amm_b0(1, 1, N-i, iL, iR, w, rL, iR, w+MUNU);
               amm_b0(1, 1, N-i, rL, iR, w+MUNU, rL, rR, w);
               amm_bn(1, 1, N-i, rL, rR, w, iL, rR, w+MUNU);
               amm_b1(1, 1, N-i, iL, rR, w+MUNU, 
                      l+(mbi SHIFT)*NUNU, RW+(mb-mbi-1)*MUNU, w);
            #else
               amm_b0(1, 1, N-i, iR, iL, w, rR, iL, w+MUNU);
               amm_b0(1, 1, N-i, rR, iL, w+MUNU, rR, rL, w);
               amm_bn(1, 1, N-i, rR, rL, w, iR, rL, w+MUNU);
               amm_b1(1, 1, N-i, iR, rL, w+MUNU, 
                      RW+(mb-mbi-1)*MUNU, l+(mbi SHIFT)*NUNU, w);
            #endif
            ATL_ntrsm_cpC(mu, nu, ONE, w, w+MUNU, alpha, xc, ldx);
         }
         #else
            r2a(NU, mu, ONE, xc+nu*ldx, ldx, RW+((mb-mbi)*MUNU));
            if (DoCopy) /* do the copy as needed for in-cache comp. */
               l2a(N-i, nu, NONE, Ac+nu*ainc, lda, l);
            #ifdef USE_TRANS
               amm_b0(1, 1, N-i, l, RW+(mb-mbi)*MUNU, w, 
                     l+mbi*NUNU, RW+(mb-mbi-1)*MUNU, w);
            #else
               amm_b0(1, 1, N-i, RW+(mb-mbi)*MUNU, l, w, 
                     RW+(mb-mbi-1)*MUNU, l+mbi*NUNU, w);
            #endif
            ATL_ntrsm_cpC(mu, nu, ONE, w, alpha, xc, ldx);
         #endif
         /* now do the diagonal trsm */
         l += (mbi SHIFT) * NUNU;
         if (Diag == AtlasUnit) d = NULL;
         else d = diag + ((N-i) SHIFT);
         if (DoCopy)
            ATL_ntrcopy(IsConj, nu, Ac, lda, l, NU, d);
         if (nu == ATL_NU)
            ATL_ntrsm(mu, d, l, NU, xc, ldx);
         else
            ATL_ntrsm_RR(mu, nu, d, l, NU, xc, ldx);
      }
   }
}
@ROUT
void Mjoin(PATL,utrsmRUN)
      (const enum ATLAS_DIAG Diag, ATL_CINT N, ATL_CINT R,
       const SCALAR alpha, const TYPE *A, ATL_CINT lda, TYPE *X, ATL_CINT ldx,
       TYPE *diag, TYPE *L, TYPE *RW, TYPE *w)
{
   Mjoin(PATL,utrsmR_LTUN)(AtlasNoTrans, Diag, N, R, alpha, A, lda,
         X, ldx, diag, L, RW, w);
}

void Mjoin(PATL,utrsmRUT)
      (const enum ATLAS_DIAG Diag, ATL_CINT N, ATL_CINT R,
       const SCALAR alpha, const TYPE *A, ATL_CINT lda, TYPE *X, ATL_CINT ldx,
       TYPE *diag, TYPE *L, TYPE *RW, TYPE *w)
{
   Mjoin(PATL,utrsmR_LNUT)(AtlasTrans, Diag, N, R, alpha, A, lda,
         X, ldx, diag, L, RW, w);
}

#ifdef TCPLX
void Mjoin(PATL,utrsmRUC)
      (const enum ATLAS_DIAG Diag, ATL_CINT N, ATL_CINT R,
       const SCALAR alpha, const TYPE *A, ATL_CINT lda, TYPE *X, ATL_CINT ldx,
       TYPE *diag, TYPE *L, TYPE *RW, TYPE *w)
{
   Mjoin(PATL,utrsmR_LNUT)(AtlasConjTrans, Diag, N, R, alpha, A, lda,
         X, ldx, diag, L, RW, w);
}
#endif

void Mjoin(PATL,utrsmRLN)
      (const enum ATLAS_DIAG Diag, ATL_CINT N, ATL_CINT R,
       const SCALAR alpha, const TYPE *A, ATL_CINT lda, TYPE *X, ATL_CINT ldx,
       TYPE *diag, TYPE *L, TYPE *RW, TYPE *w)
{
   Mjoin(PATL,utrsmR_LNUT)(AtlasNoTrans, Diag, N, R, alpha, A, lda,
         X, ldx, diag, L, RW, w);
}

void Mjoin(PATL,utrsmRLT)
      (const enum ATLAS_DIAG Diag, ATL_CINT N, ATL_CINT R,
       const SCALAR alpha, const TYPE *A, ATL_CINT lda, TYPE *X, ATL_CINT ldx,
       TYPE *diag, TYPE *L, TYPE *RW, TYPE *w)
{
   Mjoin(PATL,utrsmR_LTUN)(AtlasTrans, Diag, N, R, alpha, A, lda,
         X, ldx, diag, L, RW, w);
}

#ifdef TCPLX
void Mjoin(PATL,utrsmRLC)
      (const enum ATLAS_DIAG Diag, ATL_CINT N, ATL_CINT R,
       const SCALAR alpha, const TYPE *A, ATL_CINT lda, TYPE *X, ATL_CINT ldx,
       TYPE *diag, TYPE *L, TYPE *RW, TYPE *w)
{
   Mjoin(PATL,utrsmR_LTUN)(AtlasConjTrans, Diag, N, R, alpha, A, lda,
         X, ldx, diag, L, RW, w);
}
#endif

@ROUT ATL_utrsmR_rh
#ifdef NO_AMM_NAME
   void Mjoin(PATL,trsm)
      (const enum ATLAS_SIDE Side, const enum ATLAS_UPLO Uplo,   
       const enum ATLAS_TRANS TA, const enum ATLAS_DIAG Diag,
       ATL_CINT N, ATL_CINT R, const SCALAR alpha,        
       const TYPE *A, ATL_CINT lda, TYPE *X, ATL_CINT ldx)
#else
   int Mjoin(PATL,utrsmKR)
      (const enum ATLAS_UPLO Uplo,   
       const enum ATLAS_TRANS TA, const enum ATLAS_DIAG Diag,
       ATL_CINT N, ATL_CINT R, const SCALAR alpha,        
       const TYPE *A, ATL_CINT lda, TYPE *X, ATL_CINT ldx)
#endif
{
   const int UPPER = (Uplo == AtlasUpper);
   void *vp;
   TYPE *diag, *L, *RW, *w;
   vp = GetWorkspaceR(R, &diag, &L, &RW, &w);
   #ifndef NO_AMM_NAME
      if (!vp) return(-1);
   #endif
   if (!UPPER)                   
   {                                                                
      if (TA == AtlasNoTrans)                                   
         Mjoin(PATL,utrsmRLN)(Diag, N, R, alpha, A, lda, X, ldx,
               diag, L, RW, w);
      else if (TA == AtlasTrans)
         Mjoin(PATL,utrsmRLT)(Diag, N, R, alpha, A, lda, X, ldx,
               diag, L, RW, w);
      #ifdef TCPLX
         else /* (TA == AtlasConjTrans) */
            Mjoin(PATL,utrsmRLC)(Diag, N, R, alpha, A, lda, X, ldx,
                  diag, L, RW, w);
      #endif
   }
   else
   {
      if (TA == AtlasNoTrans)
         Mjoin(PATL,utrsmRUN)(Diag, N, R, alpha, A, lda, X, ldx,
               diag, L, RW, w);
      else if (TA == AtlasTrans)
         Mjoin(PATL,utrsmRUT)(Diag, N, R, alpha, A, lda, X, ldx,
               diag, L, RW, w);
   #ifdef TCPLX
      else /* (TA == AtlasConjTrans) */
         Mjoin(PATL,utrsmRUC)(Diag, N, R, alpha, A, lda, X, ldx,
               diag, L, RW, w);
   #endif
   }
   free(vp);
   #ifndef NO_AMM_NAME
      return(0);
   #endif
}
@ROUT trsmsrch
@extract -b @(topd)/cw.inc lang=C -def cwdate 2017 
#define ATL_WANT ILCM 1
#include "atlas_iopt.h"
#include "atlas_cache.h"
#include "atlas_genparse.h"
#include "atlas_mmtesttime.h"

#define TSM_RIGHT 0
void PrintUsage(char *name, int ierr, char *flag)
{
   if (ierr > 0)
      fprintf(stderr, "Bad argument #%d: '%s'\n", ierr,
              flag?flag:"OUT-OF_ARGUMENTS");
   else if (ierr < 0)
      fprintf(stderr, "ERROR: %s\n", flag);
   fprintf(stderr, "USAGE: %s [flags:\n", name);
   fprintf(stderr, "   -p [s,d,c,z]: set type/precision prefix (d) \n");
   fprintf(stderr, "   -S [L/R] : search Left or Right TRSM\n");
   exit(ierr ? ierr : -1);
}

ATL_mmnode_t *getAllCandKerns(char pre, int flag)
{
   ATL_mmnode_t *mb, *mp;
   mb = ReadMMFileWithPath(pre, "res", "opmek.sum");
   mb = ATL_JoinMMQs(mb, ReadMMFileWithPath(pre, "res", "opnek.sum"));
   mb = ATL_JoinMMQs(mb, ReadMMFileWithPath(pre, "res", "opgen.sum"));
   mb = ATL_JoinMMQs(mb, ReadMMFileWithPath(pre, "res", "ipgen.sum"));
   mb = ATL_JoinMMQs(mb, ReadMMFileWithPath(pre, "res", "ipmen.sum"));
   mp = AddUniqueMMKernsToList(NULL, mb);
   KillAllMMNodes(mb);
   mb = mp;
   while (mp)
   {
      ATL_mmnode_t *nxt = mp->next;
      int KILL;
      KILL = !(mp->flag & (1<<MMF_KRUNTIME));  /* kill compile-time K */
      if (flag&(1<<TSM_RIGHT))      /* Right case requires */
         KILL |= (mp->nu % mp->ku); /* nu a multiple of ku */
      else                          /* Left case requires */
         KILL |= (mp->mu % mp->ku); /* mu a multiple of ku */
      if (KILL)
         mb = KillMMNodeFromQ(mb, mp);
      else
         mp->blask = ATL_KTRSM;
      mp = nxt;
   }
   assert(mb);  /* later create one in this case, for now assert */
   return(mb);
}

char GetFlags(int nargs, char **args, int *FLG)
{
   char pre = 'd';
   int flg=0;
   int i;

   for (i=1; i < nargs; i++)
   {
      int wch, *ip, **ipp, TST=0;
      if (args[i][0] != '-')
         PrintUsage(args[0], i, args[i]);

      switch(args[i][1])
      {
      case 'S':
        if (++i >= nargs)
            PrintUsage(args[0], i-1, NULL);
        wch = args[i][0];
        if (wch == 'R' || wch == 'r')
           flg |= 1<<TSM_RIGHT;
        else
           flg &= ~(1<<TSM_RIGHT);
        break;
      @BEGINSKIP
      case 'F':
        if (++i >= nargs)
            PrintUsage(args[0], i-1, NULL);
         FULLSRCH = atoi(args[i]);
         break;
      @ENDSKIP
      case 'p':
        if (++i >= nargs)
            PrintUsage(args[0], i-1, NULL);
        pre = tolower(args[i][0]);
        assert(pre == 's' || pre == 'd' || pre == 'z' || pre == 'c');
        break;
      default:
         PrintUsage(args[0], i, args[i]);
      }
   }
   *FLG = flg;
   return(pre);
}

double timeTRSM(char pre, int flag, int B, int R, ATL_mmnode_t *mmp)
{
   double mfB = 0.0;
   int it;
   const int RIGHT=(flag&(1<<TSM_RIGHT));
   const int tflag= (RIGHT) ? 4 : 0;
   const char TA[2] = {'N', 'T'};

   for (it=0; it < 2; it++)
   {
      const int tfl = tflag | ((it)?8:0);
      int DOIT, NR;
      const int TR = (RIGHT) ? !it : it;
      if (TR)
      {
         DOIT = (mmp->nu % mmp->ku) == 0;
         NR = (R > mmp->mu) ? (R/mmp->mu)*mmp->mu : R;
      }
      else
      {
         DOIT = (mmp->mu % mmp->ku) == 0;
         NR = (R > mmp->nu) ? (R/mmp->nu)*mmp->nu : R;
      }
      if (DOIT)
      {
         double mf;
         mf = TimeMMKernel(0, tfl, mmp, pre, NR, NR, B, 1, 0, -1);
         printf("      ID=%d : B=%u, NRHS=%u U=(%2u,%2u) TRANS=%c, mf=%.2f\n", 
                mmp->ID, B, R, mmp->mu, mmp->nu, TA[it], mf);
         if (mf > mfB)
         {
            mmp->TA = mmp->TB = it ? AtlasTrans : AtlasNoTrans;
            mfB = mmp->mflop[0] = mf;
         }
      }
   }
   return(mfB);
}

ATL_mmnode_t *timeAllTRSM(char pre, int flag, int B, int R, ATL_mmnode_t *mb)
/*
 * Times all TRSM in mb with kb=B and NRHS roughly R, returns pointer to
 * cloned node of best performing
 */
{
   double mfB=0.0;
   ATL_mmnode_t *mp, *mmB=NULL;
   const int RIGHT=(flag&(1<<TSM_RIGHT));

      printf("   FINDING BEST TRSM KERNEL B=(%u,%u):\n", B, R);
   for (mp=mb; mp; mp = mp->next)
   {
      double mf;
      mf = timeTRSM(pre, flag, B, R, mp);
      if (mf > mfB)
      {
         mfB = mf;
         mmB = mp;
      }
   }
   if (!mmB)
   {
      printf("   NO CASE FOUND FOR B=(%u,%u)\n", B, R);
      return(NULL);
   }
   mmB = CloneMMNode(mmB);
   assert(mmB->mflop[0] == mfB);
   mmB->mbB = mmB->nbB = mmB->kbB = B;
   if (RIGHT)
      mmB->mbB = R;
   else
      mmB->nbB = R;
      
   printf(
      "   BEST CASE FOR B=(%u,%u): ID=%u, U=(%u,%u,%u), TRANS=%c, mf=%.2f\n",
          B, R, mmB->ID, mmB->mu, mmB->nu, mmB->ku,
          (mmB->TA == AtlasTrans)?'T':'N', mfB);
   return(mmB);
}

ATL_mmnode_t *findBestU(char pre, int flag, int B, int R, int U)
/*
 * Finds the best case with ku=1, and either mu OR nu = U
 */
{
   ATL_mmnode_t *mmb, *mmp, *mmB=NULL;
   int mb, nb, transB=0;
   double mfB=0.0;
   const int RIGHT=(flag&(1<<TSM_RIGHT));

   mmp = mmb = GetWorkingUserCases(0, pre);
   while (mmp)
   {
      ATL_mmnode_t *nxt=mmp->next;
      if ((mmp->mu != U && mmp->nu != U) || (U%(mmp->ku)) || 
          !FLAG_IS_SET(mmp->flag, MMF_KRUNTIME))
         mmb = KillMMNodeFromQ(mmb, mmp);
      mmp = nxt;
   }
   printf("\nTIMING U=%u CASES FOR B=%u, NRHS=%u:\n", U, B, R);
   for (mmp=mmb; mmp; mmp = mmp->next)
   {
      double mf;
      int it;
      mmp->blask = ATL_KTRSM;
      mf = timeTRSM(pre, flag, B, R, mmp);
      if (mf > mfB)
      {
         mmB = mmp;
         mfB = mf;
         transB = (mmp->TA == AtlasTrans) ? 1:0;
      }
   }
   if (mmB)
   {
      mmb = RemoveMMNodeFromQ(mmb, mmB);
      mmB->mbB = mmB->kbB = mmB->nbB = B;
      if (RIGHT)
         mmB->mbB = R;
      else
         mmB->nbB = R;
      mmB->mflop[0] = mfB;
      mmB->TA = mmB->TB = transB;
      printf(
      "BEST U=%u CASE FOR B=%u,%u: ID=%u, U=(%u,%u,%u), TRANS=%c, mf=%.2f\n\n",
             U, B, R, mmB->ID, mmB->mu, mmB->nu, mmB->ku, transB?'T':'N', mfB);
   }
   else
      printf("NO USER CASES FOUND FOR U=%u.\n\n", U);
   KillAllMMNodes(mmb);
   return(mmB);
}

void findBestTRSM(char pre, int flag, ATL_mmnode_t *kb)
{
   ATL_mmnode_t *bb;   /* blocking base det by left or right setting */
   ATL_mmnode_t *tb=NULL; /* trsm best case queue, 1 for each entry in opmek */
   ATL_mmnode_t *bp, *mp;
   int R=1, maxB=1, BN, BNN;
   double mf;
   char *fnout=(flag&(1<<TSM_RIGHT)) ? "trsmR.sum" : "trsmL.sum";
/*
 * Get NB that we will tune TRSM for
 */
   if (flag & (1<<TSM_RIGHT))
      bb = ReadMMFileWithPath(pre, "res", "opnek.sum");
   else
      bb = ReadMMFileWithPath(pre, "res", "opmek.sum");
/*
 * Compute RHS (R) to use, and find maxNB we'll see
 */
   for (mp=kb; mp; mp = mp->next)
   {
      R = ATL_iLCM(R, mp->nu);
      R = ATL_iLCM(R, mp->mu);
   }
   for (mp=bb; mp; mp = mp->next)
   {
      maxB = Mmax(maxB, mp->kbB);
      R = ATL_iLCM(R, mp->nu);
      R = ATL_iLCM(R, mp->mu);
   }
   if (maxB > R)
      R = (maxB/R)*R;  /* NRHS to time */
   else
      R = maxB;
   BN = bb->kbB;
/*
 * Find best user U=[1-3] cases, so we have kerns that can do very small
 * block factors w/o huge performance loss
 */
   mp = findBestU(pre, flag, bb->kbB, R, 1);
   if (mp)
   {
      mp->next = kb;
      kb = mp;
      mf = mp->mflop[0];
   }
   else
      mf = 0.0;
   if (bb->next)
   {
      BN = bb->next->kbB;
      if (bb->next->next)
         BNN = bb->next->next->kbB;
      else
         BNN = BN;
   }
   else
      BNN = BN;
   mp = findBestU(pre, flag, BN, R, 2);
   if (mp)
   {
      if (mp->mflop[0] > mf)
      {
         mf = mp->mflop[0];
         mp->next = kb;
         kb = mp;
      }
      else
          KillMMNode(mp);
   }
   mp = findBestU(pre, flag, BNN, R, 3);
   if (mp)
   {
      if (mp->mflop[0] > mf)
      {
         mp->next = kb;
         kb = mp;
      }
      else
          KillMMNode(mp);
   }
/*
 * Now look thru block sizes, and pick best-performing
 */
   printf("FINDING BEST TRSM KERNEL FOR %u BLOCK FACTORS:\n", 
          ATL_CountNumberOfMMNodes(bb));
   for (bp=bb; bp; bp = bp->next)
   {
      BN = bp->kbB;
      double mfB = 0.0;
      ATL_mmnode_t *mmB=NULL;
      @BEGINSKIP
      printf("   FINDING BEST TRSM KERNEL B=(%u,%u):\n", BN, R);
      for (mp=kb; mp; mp = mp->next)
      {
         mf = timeTRSM(pre, flag, BN, R, mp);
         if (mf > mfB)
         {
            mfB = mf;
            mmB = mp;
         }
      }
      printf(
      "   BEST CASE FOR B=(%u,%u): ID=%u, U=(%u,%u,%u), TRANS=%c, mf=%.2f\n",
             BN, R, mmB->ID, mmB->mu, mmB->nu, mmB->ku,
             (mmB->TA == AtlasTrans)?'T':'N', mfB);
      @ENDSKIP
      mmB = timeAllTRSM(pre, flag, BN, R, kb);
      assert(mmB);
      mmB->next = tb;
      tb = mmB;
   }
   tb = ReverseMMQ(tb);
   printf("\nBEST CASES:\n");
   PrintMMNodes(stdout, tb);
   WriteMMFileWithPath(pre, "res", fnout, tb);
   KillAllMMNodes(tb);
   KillAllMMNodes(bb);
   KillAllMMNodes(kb);
}

int main(int nargs, char **args)
{
   char pre;
   int flag;
   ATL_mmnode_t *mb;

   pre = GetFlags(nargs, args, &flag);
   mb = getAllCandKerns(pre, flag);
   PrintMMNodes(stdout, mb);
   findBestTRSM(pre, flag, mb);
   return(0);
}
@ROUT !
