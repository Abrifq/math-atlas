@define incd2 @@(topd)@
@extract -b @(incd2)/gen.inc what=crsetup
@ROUT ! fatlas_axpby fatlas_set
@extract -b @(incd2)/gen.inc what=cw @(cw99)
@ifdef ! incd
   @define incd @/home/rwhaley/Base/CInt@
@endifdef
@extract -b @(incd)/cblas.inc inc=type type=@(@type)

#define @up@(@type)
#include "atlas_misc.h"
#ifdef @(usept)
   #include "atlas_ptalias1.h"
#endif
#include "atlas_level1.h"
#include "cblas.h"

@ROUT rotg
void cblas_@(pre)rotg(@(type) *a, @(type) *b, @(type) *c, @(type) *s)
{
   Mjoin(PATL,rotg)(a, b, c, s);
}
@ROUT rotmg
void cblas_@(pre)rotmg(@(type) *d1, @(type) *d2, @(type) *b1, const @(type) b2,
                  @(type) *P)
{
   Mjoin(PATL,rotmg)(d1, d2, b1, b2, P);
}

@ROUT rot
@TYPE SREAL DREAL
void cblas_@(pre)rot(const int N, @(type) *X, const int incX, 
                @(type) *Y, const int incY, const @(type) c, const @(type) s)
@define ppp @@(pre)@
@define shift @@
@TYPE SCPLX DCPLX
void cblas_@(pre)@(upr)rot(const int N, @(type) *X, const int incX, 
                 @(type) *Y, const int incY, const @(utyp) c, const @(utyp) s)
@define ppp @@(pre)@(upr)@
@define shift @<<1@
@TYPE !
{
   @(utyp) *x = X, *y = Y;
   int incx = incX, incy = incY;

   if (N > 0)
   {
      if (incX < 0)
      {
         if (incY < 0) { incx = -incx; incy = -incy; }
         else x += -incX * ((N-1)@(shift));
      }
      else if (incY < 0)
      {
         incy = -incy;
         incx = -incx;
         x += (N-1)*(incX@(shift));
      }
      ATL_@(ppp)rot(N, x, incx, y, incy, c, s);
   }
}
@undef ppp
@ROUT rotm
@TYPE SREAL DREAL
   @define ppp @ATL_@(pre)@
@TYPE SCPLX DCPLX
   @define ppp @ATL_@(pre)@(upr)@
@TYPE !
void cblas_@(pre)rotm(const int N, @(type) *X, const int incX, 
                 @(type) *Y, const int incY, const @(type) *P)
{
   if (N > 0)
   {
      if (incX < 0)
      {
         if (incY < 0) @(ppp)rotm(N, X, -incX, Y, -incY, P);
         else @(ppp)rotm(N, X+(1-N)*incX, incX, Y, incY, P);
      }
      else if (incY < 0) @(ppp)rotm(N, X+(N-1)*incX, -incX, Y, -incY, P);
      else @(ppp)rotm(N, X, incX, Y, incY, P);
   }
}
@undef ppp
@ROUT swap
void cblas_@(pre)swap(const int N, @(type) *X, const int incX,
                 @(type) *Y, const int incY)
{
@TYPE SREAL DREAL
   if (N > 0)
   {
      if (incX < 0)
      {
         if (incY < 0) ATL_@(pre)swap(N, X, -incX, Y, -incY);
         else ATL_@(pre)swap(N, X+(1-N)*incX, incX, Y, incY);
      }
      else if (incY < 0) ATL_@(pre)swap(N, X+(N-1)*incX, -incX, Y, -incY);
      else ATL_@(pre)swap(N, X, incX, Y, incY);
   }
@TYPE SCPLX DCPLX
   @(utyp) *x = X, *y = Y;
   int incx = incX, incy = incY;

   if (N > 0)
   {
      if (incX < 0)
      {
         if (incY < 0) { incx = -incx; incy = -incY; }
         else x += -incX * ((N-1)<<1);
      }
      else if (incY < 0)
      {
         incy = -incy;
         incx = -incx;
         x += (N-1)*(incX<<1);
      }
      ATL_@(pre)swap(N, x, incx, y, incy);
   }
@TYPE !
}
@ROUT CRSCAL
void cblas_@(pre)@(upr)scal(const int N, const @(utyp) alpha, @(type) *X, const int incX)
{
   @(utyp) al[2];
   if (N > 0 && incX > 0)
   {
      al[0] = alpha;
      al[1] = ATL_rzero;
      if (incX < 0) ATL_@(pre)scal(N, al, X, -incX);
      else ATL_@(pre)scal(N, al, X, incX);
   }
}
@ROUT SCAL
void cblas_@(pre)scal(const int N, const @(styp)alpha, @(type) *X, const int incX)
{
   if (N > 0 && incX > 0)
      ATL_@(pre)scal(N, alpha, X, incX);
@beginskip
   {
      if (incX < 0) ATL_@(pre)scal(N, alpha, X, -incX);
      else ATL_@(pre)scal(N, alpha, X, incX);
   }
@endskip
}
@ROUT COPY
void cblas_@(pre)copy(const int N, const @(type) *X, const int incX,
                      @(type) *Y, const int incY)
{
@TYPE SREAL DREAL
   if (N > 0)
   {
      if (incX < 0)
      {
         if (incY < 0) ATL_@(pre)copy(N, X, -incX, Y, -incY);
         else ATL_@(pre)copy(N, X+(1-N)*incX, incX, Y, incY);
      }
      else if (incY < 0) ATL_@(pre)copy(N, X+(N-1)*incX, -incX, Y, -incY);
      else ATL_@(pre)copy(N, X, incX, Y, incY);
   }
@TYPE SCPLX DCPLX
   const @(utyp) *x = X;
   @(utyp) *y = Y;
   int incx = incX, incy = incY;

   if (N > 0)
   {
      if (incX < 0)
      {
         if (incY < 0) { incx = -incx; incy = -incY; }
         else x += -incX * ((N-1)<<1);
      }
      else if (incY < 0)
      {
         incy = -incy;
         incx = -incx;
         x += (N-1)*(incX<<1);
      }
      ATL_@(pre)copy(N, x, incx, y, incy);
   }
@TYPE !
}
@rout fatlas_set
@extract -b @(incd2)/gen.inc what=cw @(cw01)
#include "atlas_misc.h"
#include "atlas_f77blas.h"
#include "atlas_f77wrap.h"
void F77set(const F77_INTEGER *N, const TYPE *alpha, TYPE *X, 
            const F77_INTEGER *incX)
{
   int incx=(*incX);
   if (incx < 0) incx = -incx;
   #ifdef TREAL
      Mjoin(PATL,set)(*N, *alpha, X, incx);
   #else
      Mjoin(PATL,set)(*N, alpha, X, incx);
   #endif
}
@ROUT fatlas_axpby
@extract -b @(incd2)/gen.inc what=cw @(cw01)
#include "atlas_misc.h"
#include "atlas_f77blas.h"
#include "atlas_f77wrap.h"
void F77axpby(const F77_INTEGER *N, const TYPE *alpha, const TYPE *X,
              const F77_INTEGER *incX, const TYPE *beta,
              TYPE *Y, const F77_INTEGER *incY)
{
   int incx=(*incX), incy=(*incY);

   if (*N > 0)
   {
      if (incx >= 0 && incy >= 0) goto L1;
      else if (incy < 0)
      {
         if (incx < 0) { incx = -incx; incy = -incy; }
         else Y -= ((*N-1)SHIFT)*incy;
      }
      else if (incx < 0) X -= ((*N-1)SHIFT)*incx;
L1:
      #ifdef TREAL
         Mjoin(PATL,axpby)(*N, *alpha, X, incx, *beta, Y, incy);
      #else
         Mjoin(PATL,axpby)(*N, alpha, X, incx, beta, Y, incy);
      #endif
   }
}
@ROUT axpby
@TYPE SCPLX DCPLX
void catlas_@(pre)axpby(const int N, const @(styp)alpha, const @(type) *x,
                    const int incX, const @(styp)beta, @(type) *y, const int incY)
{
   const @(utyp) *X=x; 
   @(utyp) *Y=y;
@TYPE SREAL DREAL
void catlas_@(pre)axpby(const int N, const @(styp)alpha, const @(type) *X,
                   const int incX, const @(styp)beta, @(type) *Y, const int incY)
{
@TYPE SCPLX DCPLX SREAL DREAL
   int incx=incX, incy=incY;

   if (N > 0)
   {
      if (incX >= 0 && incY >= 0) goto L1;
      else if (incY < 0)
      {
         if (incX < 0) { incx = -incX; incy = -incY; }
         else Y -= ((N-1)@(shift))*incY;
      }
      else if (incX < 0) X -= ((N-1)@(shift))*incX;
L1:
      ATL_@(pre)axpby(N, alpha, X, incx, beta, Y, incy);
   }
}
@ROUT set
void catlas_@(pre)set(const int N, const @(styp)alpha, @(type) *X, const int incX)
{
   ATL_@(pre)set( N, alpha, X, (incX >= 0 ? incX : -incX) );
}
@ROUT axpy
void cblas_@(pre)axpy(const int N, const @(styp)alpha, const @(type) *X,
                 const int incX, @(type) *Y, const int incY)
{
@TYPE SREAL DREAL
   if (N > 0)
   {
      if (incX < 0)
      {
         if (incY < 0) ATL_@(pre)axpy(N, alpha, X, -incX, Y, -incY);
         else ATL_@(pre)axpy(N, alpha, X+(1-N)*incX, incX, Y, incY);
      }
      else if (incY < 0) ATL_@(pre)axpy(N, alpha, X+(N-1)*incX, -incX, Y, -incY);
      else ATL_@(pre)axpy(N, alpha, X, incX, Y, incY);
   }
@TYPE SCPLX DCPLX
   const @(utyp) *x = X;
   @(utyp) *y = Y;
   int incx = incX, incy = incY;

   if (N > 0)
   {
      if (incX < 0)
      {
         if (incY < 0) { incx = -incx; incy = -incY; }
         else x += -incX * ((N-1)<<1);
      }
      else if (incY < 0)
      {
         incy = -incy;
         incx = -incx;
         x += (N-1)*(incX<<1);
      }
      ATL_@(pre)axpy(N, alpha, x, incx, y, incy);
   }
@TYPE !
}
@ROUT sdsdot
float cblas_sdsdot(const int N, const float alpha, const float *X,
                   const int incX, const float *Y, const int incY)
{
   if (N > 0)
   {
      if (incX < 0)
      {
         if (incY < 0) return(ATL_sdsdot(N, alpha, X, -incX, Y, -incY));
         else return(ATL_sdsdot(N, alpha, X+(1-N)*incX, incX, Y, incY));
      }
      else if (incY < 0) 
         return(ATL_sdsdot(N, alpha, X+(N-1)*incX, -incX, Y, -incY));
      else return(ATL_sdsdot(N, alpha, X, incX, Y, incY));
   }
   else return(0.0f);
}
@ROUT dsdot
double cblas_dsdot(const int N, const float *X, const int incX, 
                   const float *Y, const int incY)
{
   if (N > 0)
   {
      if (incX < 0)
      {
         if (incY < 0) return(ATL_dsdot(N, X, -incX, Y, -incY));
         else return(ATL_dsdot(N, X+(1-N)*incX, incX, Y, incY));
      }
      else if (incY < 0) return(ATL_dsdot(N, X+(N-1)*incX, -incX, Y, -incY));
      else return(ATL_dsdot(N, X, incX, Y, incY));
   }
   else return(0.0);
}
@ROUT dot
@(type) cblas_@(pre)dot(const int N, const @(type) *X, const int incX, 
                     const @(type) *Y, const int incY)
{
   if (N > 0)
   {
      if (incX < 0)
      {
         if (incY < 0) return(ATL_@(pre)dot(N, X, -incX, Y, -incY));
         else return(ATL_@(pre)dot(N, X+(1-N)*incX, incX, Y, incY));
      }
      else if (incY < 0) return(ATL_@(pre)dot(N, X+(N-1)*incX, -incX, Y, -incY));
      else return(ATL_@(pre)dot(N, X, incX, Y, incY));
   }
   else return(@(rzero));
}
@ROUT dotc
   @define pp @c@
@ROUT dotu
   @define pp @u@
@ROUT dotc dotu
void cblas_@(pre)dot@(pp)_sub(const int N, const @(type) *X, const int incX, 
                      const @(type) *Y, const int incY, @(styp) dot)
{
   const @(utyp) *x = X, *y = Y;
   @(utyp) *tdot=dot;
   int incx = incX, incy = incY;

   if (N > 0)
   {
      if (incX < 0)
      {
         if (incY < 0) { incx = -incx; incy = -incY; }
         else x += -incX * ((N-1)<<1);
      }
      else if (incY < 0)
      {
         incy = -incy;
         incx = -incx;
         x += (N-1)*(incX<<1);
      }
      ATL_@(pre)dot@(pp)_sub(N, x, incx, y, incy, dot);
   }
   else *tdot = tdot[1] = @(rzero);
}
@ROUT nrm2
  @TYPE SREAL DREAL
     @define pp @@(pre)@
  @TYPE SCPLX DCPLX
     @define pp @@(upr)@(pre)@
  @TYPE !
@(utyp) cblas_@(pp)nrm2(const int N, const @(type) *X, const int incX)
{
   if (N > 0 && incX > 0)
      return(ATL_@(pp)nrm2(N, X, incX));
@beginskip
   {
      if (incX < 0) return(ATL_@(pp)nrm2(N, X, -incX));
      else return(ATL_@(pp)nrm2(N, X, incX));
   }
@endskip
   return(@(rzero));
}
@ROUT asum
  @TYPE SREAL DREAL
     @define pp @@(pre)@
  @TYPE SCPLX DCPLX
     @define pp @@(upr)@(pre)@
  @TYPE !
@(utyp) cblas_@(pp)asum(const int N, const @(type) *X, const int incX)
{
   if (N > 0 && incX > 0)
      return(ATL_@(pp)asum(N, X, incX));
@beginskip
   {
      if (incX < 0) return(ATL_@(pp)asum(N, X, -incX));
      else return(ATL_@(pp)asum(N, X, incX));
   }
@endskip
   return(@(rzero));
}
@rout iamax
int cblas_i@(pre)amax(const int N, const @(type) *X, const int incX)
{
   if (N > 0 && incX > 0)
     return(ATL_i@(pre)amax(N, X, incX));
@beginskip
   {
      if (incX < 0) return(ATL_i@(pre)amax(N, X, -incX));
      else return(ATL_i@(pre)amax(N, X, incX));
   }
@endskip
   return(0);
}
