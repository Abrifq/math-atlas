@ifdef ! incd
   @define incd @/home/rwhaley/Base/ATLAS@
@endifdef
@ROUT ! Make.ext
@extract -b @(topd)/gen.inc what=crsetup
@extract -b @(topd)/gen.inc what=cw @(cp99)

@ROUT ATL_F77WRAP_GETNB
#include "f77wrap_lapack.h"
#include "atlas_lapack.h"

void F77WRAP_GETNB(F77_INTEGER *NB)
{
   int Mjoin(PATL,GetNB)(void);
   *NB = Mjoin(PATL,GetNB)();
}
@ROUT ATL_F77WRAP_GELS
#include "f77wrap_lapack.h"
#include "atlas_lapack.h"

void F77WRAP_GELS(const F77_INTEGER *itrans, const F77_INTEGER *M,
                  const F77_INTEGER *N, const F77_INTEGER *NRHS, 
                  TYPE *A, const F77_INTEGER *lda, TYPE *B, 
                  const F77_INTEGER *ldb, TYPE *work, const F77_INTEGER *lwork,
                  F77_INTEGER *info)
{
   *info = ATL_gels(*itrans, *M, *N, *NRHS, A, *lda, B, *ldb, work, *lwork);
}
@ROUT ATL_F77WRAP_GEQRF
   @define qr @qr@
@ROUT ATL_F77WRAP_GERQF
   @define qr @rq@
@ROUT ATL_F77WRAP_GEQLF
   @define qr @ql@
@ROUT ATL_F77WRAP_GELQF
   @define qr @lq@
@ROUT ATL_F77WRAP_GEQRF ATL_F77WRAP_GERQF ATL_F77WRAP_GEQLF ATL_F77WRAP_GELQF
#include "f77wrap_lapack.h"
#include "atlas_lapack.h"

void F77WRAP_GE@up@(qr)F(const F77_INTEGER *M, const F77_INTEGER *N, 
                   TYPE *A, const F77_INTEGER *lda, TYPE *TAU, TYPE *work,
                   const F77_INTEGER *ldw, F77_INTEGER *info)
{
   *info = ATL_ge@(qr)f(*M, *N, A, *lda, TAU, work, *ldw);
}
@ROUT ATL_F77WRAP_POSV
#include "f77wrap_lapack.h"
#include "atlas_lapack.h"

void F77WRAP_POSV(const F77_INTEGER *iuplo, const F77_INTEGER *N, 
                  const F77_INTEGER *NRHS, TYPE *A, const F77_INTEGER *lda,
                  TYPE *B, const F77_INTEGER *ldb, F77_INTEGER *info
                  ATL_STRLEN_1)
{
@skip   *info = ATL_posv(AtlasColMajor, *iuplo, *N, *NRHS, A, *lda, B, *ldb);
   *info = ATL_potrf(AtlasColMajor, *iuplo, *N, A, *lda);
   if (*info == 0)
      ATL_potrs(AtlasColMajor, *iuplo, *N, *NRHS, A, *lda, B, *ldb);
}
@ROUT ATL_F77WRAP_POTRS
#include "f77wrap_lapack.h"
#include "atlas_lapack.h"
void F77WRAP_POTRS(const F77_INTEGER *iuplo, const F77_INTEGER *N, 
                   const F77_INTEGER *NRHS, const TYPE *A, 
                   const F77_INTEGER *lda, TYPE *B, const F77_INTEGER *ldb
                   ATL_STRLEN_1)
{
   ATL_potrs(AtlasColMajor, *iuplo, *N, *NRHS, A, *lda, B, *ldb);
}
@ROUT ATL_F77WRAP_LAUUM
#include "f77wrap_lapack.h"
#include "atlas_lapack.h"
void F77WRAP_LAUUM(const F77_INTEGER *iuplo, const F77_INTEGER *N, 
                   TYPE *A, const F77_INTEGER *lda, F77_INTEGER *info
                   ATL_STRLEN_1)
{
   *info = 0;
   ATL_lauum(AtlasColMajor, *iuplo, *N, A, *lda);
}
@ROUT ATL_F77WRAP_POTRF
#include "f77wrap_lapack.h"
#include "atlas_lapack.h"
void F77WRAP_POTRF(const F77_INTEGER *iuplo, const F77_INTEGER *N, 
                   TYPE *A, const F77_INTEGER *lda, F77_INTEGER *info
                   ATL_STRLEN_1)
{
   *info = ATL_potrf(AtlasColMajor, *iuplo, *N, A, *lda);
}
@ROUT ATL_F77WRAP_GESV
#include "f77wrap_lapack.h"
#include "atlas_lapack.h"
void F77WRAP_GESV(const F77_INTEGER *N, const F77_INTEGER *NRHS,
                  TYPE *A, const F77_INTEGER *lda, F77_INTEGER *ipiv0,
                  TYPE *B, const F77_INTEGER *ldb, F77_INTEGER *info)
{
   const int n = *N;
   int i;
   #ifdef ATL_FunkyInts
      int *ipiv;
      ipiv = malloc(n*sizeof(int));
      ATL_assert(ipiv);
   #else
      #define ipiv ipiv0
   #endif
@SKIP   *info = ATL_gesv(AtlasColMajor, *N, *NRHS, A, *lda, ipiv, B, *ldb);

   *info = ATL_getrf(AtlasColMajor, *N, *N, A, *lda, ipiv);
   if (*info == 0)
      ATL_getrs(AtlasColMajor, AtlasNoTrans, *N, *NRHS, A, *lda, ipiv, B, *ldb);
   #ifdef ATL_FunkyInts
      for (i=0; i != n; i++) ipiv0[i] = ipiv[i] + 1;
      free(ipiv);
   #else
      for (i=0; i != n; i++) ipiv[i]++;
   #endif
}
@ROUT ATL_F77WRAP_GETRS
#include "f77wrap_lapack.h"
#include "atlas_lapack.h"
void F77WRAP_GETRS(const F77_INTEGER *ITRAN, const F77_INTEGER *N, 
                   const F77_INTEGER *NRHS, const TYPE *A, 
                   const F77_INTEGER *lda, const F77_INTEGER *ipiv0,
                   TYPE *B, const F77_INTEGER *ldb ATL_STRLEN_1)
{
   const int n = *N;
   int i, *ipiv;
   ipiv = malloc(n*sizeof(int));
   ATL_assert(ipiv);
   for (i=0; i != n; i++) ipiv[i] = ipiv0[i] - 1;

   ATL_getrs(AtlasColMajor, *ITRAN, *N, *NRHS, A, *lda, ipiv, B, *ldb);

   free(ipiv);
}
@ROUT ATL_F77WRAP_GETRI
#include "f77wrap_lapack.h"
#include "atlas_lapack.h"
void F77WRAP_GETRI(const F77_INTEGER *N, TYPE *A, const F77_INTEGER *lda, 
                   const F77_INTEGER *ipiv0, TYPE *work, F77_INTEGER *lwork,
                   F77_INTEGER *info)
{
   const int n = *N;
   int *ipiv=NULL; 
   int i, lwrk = *lwork;

   if (lwrk != -1)
   {
      ipiv = malloc(n*sizeof(int));
      ATL_assert(ipiv);
      for (i=0; i != n; i++) ipiv[i] = ipiv0[i] - 1;
   }
   *info = ATL_getri(AtlasColMajor, *N, A, *lda, ipiv, work, &lwrk);
   if (work) *work = lwrk;
   else if (*lwork == -1)
      ATL_xerbla(5, __FILE__, 
                 "For workspace query, workspace cannot be NULL\n");
   if (ipiv) free(ipiv);
}
@ROUT ATL_F77WRAP_GETRF
#include "f77wrap_lapack.h"
#include "atlas_lapack.h"
void F77WRAP_GETRF(const F77_INTEGER *M, const F77_INTEGER *N,
                   TYPE *A, const F77_INTEGER *lda, F77_INTEGER *ipiv0,
                   F77_INTEGER *info)
{
   const int MN = Mmin(*M,*N);
   int i;
   #ifdef ATL_FunkyInts
      int *ipiv;
      ipiv = malloc(MN*sizeof(int));
      ATL_assert(ipiv);
   #else
      #define ipiv ipiv0
   #endif
   *info = ATL_getrf(AtlasColMajor, *M, *N, A, *lda, ipiv);
   #ifdef ATL_FunkyInts
      for (i=0; i != MN; i++) ipiv0[i] = ipiv[i] + 1;
      free(ipiv);
   #else
      for (i=0; i != MN; i++) ipiv[i]++;
   #endif
}
@ROUT ATL_F77WRAP_TRTRI
#include "f77wrap_lapack.h"
#include "atlas_lapack.h"
void F77WRAP_TRTRI(const F77_INTEGER *iuplo, const F77_INTEGER *idiag,
                   const F77_INTEGER *N, TYPE *A, 
                   const F77_INTEGER *lda, F77_INTEGER *info
                   ATL_STRLEN_1)
{
   *info = ATL_trtri(AtlasColMajor, *iuplo, *idiag, *N, A, *lda);
}
@ROUT ATL_F77WRAP_LARFT
#include "f77wrap_lapack.h"
#include "atlas_lapack.h"
void F77WRAP_LARFT
   (const F77_INTEGER *idirect, const F77_INTEGER *istore,
    const F77_INTEGER *N, const F77_INTEGER *K,
    TYPE *V, const F77_INTEGER *ldv, const TYPE *TAU, 
    TYPE *T, const F77_INTEGER *ldt)
{
   ATL_larft(*idirect, *istore, *N, *K, V, *ldv, TAU, T, *ldt);
}
@ROUT ATL_F77WRAP_LARFB
#include "f77wrap_lapack.h"
#include "atlas_lapack.h"
void F77WRAP_LARFB
   (const F77_INTEGER *iside, const F77_INTEGER *itrans,
    const F77_INTEGER *idirect, const F77_INTEGER *istore,
    const F77_INTEGER *M, const F77_INTEGER *N, const F77_INTEGER *K,
    TYPE *V, const F77_INTEGER *ldv, TYPE *T, const F77_INTEGER *ldt,
    TYPE *C, const F77_INTEGER *ldc, TYPE *work, const F77_INTEGER *ldwork)
{
   ATL_larfb(*iside, *itrans, *idirect, *istore, *M, *N, *K, V, *ldv, T, *ldt,
             C, *ldc, work, *ldwork);
}
@ROUT ATL_F77WRAP_ILAENV
#include "f77wrap_lapack.h"
#include "atlas_lapack.h"
void F77WRAP_ILAENV(const F77_INTEGER *ispec, const F77_INTEGER *irout, 
                    const F77_INTEGER *iopts, 
                    const F77_INTEGER *N1, const F77_INTEGER *N2,
                    const F77_INTEGER *N3, const F77_INTEGER *N4,
                    F77_INTEGER *iret) 
{
   #ifdef ATL_USEPTHREADS
      *iret = ATL_itlaenv(*ispec, *irout, *iopts, *N1, *N2, *N3, *N4);
   #else
      *iret = ATL_ilaenv(*ispec, *irout, *iopts, *N1, *N2, *N3, *N4);
   #endif
}
@ROUT f77wrap_lapack.h
#ifndef F77WRAP_LAPACK_H
#define F77WRAP_LAPACK_H

#include "atlas_misc.h"
#include "atlas_f77.h"

#ifdef UpCase
   #define FW ATL_F77WRAP_
   #define PFW Mjoin(ATL_F77WRAP_,PREU)
#else
   #define FW atl_f77wrap_
   #define PFW Mjoin(atl_f77wrap_,PRE)
#endif

#ifdef Add_
   @whiledef rt ilaenv
   #define F77WRAP_@up@(rt) Mjoin(FW,@(rt)_)
   @endwhile
   @multidef rt geqrf geqlf gerqf gelqf larfb larft gels
   @whiledef rt posv potrf potrs gesv getrf getrs getnb trtri lauum getri
   #define F77WRAP_@up@(rt) Mjoin(PFW,@(rt)_)
   @endwhile
#elif defined(Add__)
   @whiledef rt ilaenv
   #define F77WRAP_@up@(rt) Mjoin(FW,@(rt)__)
   @endwhile
   @multidef rt geqrf geqlf gerqf gelqf larfb larft gels
   @whiledef rt posv potrf potrs gesv getrf getrs getnb trtri lauum getri
   #define F77WRAP_@up@(rt) Mjoin(PFW,@(rt)__)
   @endwhile
#elif defined(NoChange)
   @whiledef rt ilaenv
   #define F77WRAP_@up@(rt) Mjoin(FW,@(rt))
   @endwhile
   @multidef rt geqrf geqlf gerqf gelqf larfb larft gels
   @whiledef rt posv potrf potrs gesv getrf getrs getnb trtri lauum getri
   #define F77WRAP_@up@(rt) Mjoin(PFW,@(rt))
   @endwhile
#elif defined(UpCase)
   @whiledef rt ilaenv
   #define F77WRAP_@up@(rt) Mjoin(PF,@up@(rt))
   @endwhile
   @multidef rt geqrf geqlf gerqf gelqf larfb larft gels
   @whiledef rt posv potrf potrs gesv getrf getrs getnb trtri lauum getri ilaenv
   #define F77WRAP_@up@(rt) Mjoin(PFW,@up@(rt))
   @endwhile
#endif

#endif
@ROUT Make.ext
basd = /home/rwhaley/Base/ATLAS
basf = $(basd)/atlas-ilp.base
ext = extract3.0 -b $(basf) -langC -lnlen79 -llwarn2

@declare "fil = " y y
   @whiledef rt posv potrf potrs gesv getrf getrs getnb trtri lauum ilaenv
      ATL_f77wrap_@(rt).c
   @endwhile
@enddeclare

all : $(fil)

@whiledef rt posv potrf potrs gesv getrf getrs getnb trtri lauum ilaenv
ATL_f77wrap_@(rt).c : $(basf)
	$(ext) -o $@ rout=$*
@endwhile

Make.ext : $(basd)/atlas-ilp.base
	$(ext) -lapack0 -langM -lnlen80 -o Make.ext rout=Make.ext
