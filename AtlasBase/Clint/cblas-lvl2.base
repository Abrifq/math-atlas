@ifdef ! incd
   @define incd @/home/rwhaley/Base/CInt@
@endifdef
@extract -b @(incd)/cblas.inc inc=type type=@(@type)
@define incd2 @@(topd)@
@extract -b @(incd2)/gen.inc what=crsetup
@ROUT ! ger2 ger2u ger2c
@extract -b @(incd2)/gen.inc what=cw @(cw99)
@ROUT ger2 ger2u ger2c
@extract -b @(topd)/cw.inc lang=c -define cwdate 2010
@ROUT !

#define @up@(@type)
#include "atlas_misc.h"
#include "cblas.h"
#ifdef @(usept)
   #include "atlas_ptalias2.h"
#endif
#include "atlas_level2.h"

@ROUT gemv
void cblas_@(pre)gemv(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TA, 
                 const int M, const int N, const @(styp)alpha, const @(type) *A,
                 const int lda, const @(type) *X, const int incX, 
                 const @(styp)beta, @(type) *Y, const int incY)
{
   int info = 2000;
@TYPE DCPLX SCPLX
   const @(utyp) *x = X;
   @(utyp) *y = Y;
@TYPE SREAL DREAL
   #define x X
   #define y Y
@TYPE SREAL DREAL DCPLX SCPLX

#ifndef NoCblasErrorChecks
   if (TA != CblasNoTrans && TA != CblasTrans && TA != CblasConjTrans)
      info = cblas_errprn(2, info, 
                          "TransA must be %d, %d or %d, but is set to %d",
                          CblasNoTrans, CblasTrans, CblasConjTrans, TA);

   if (M < 0) info = cblas_errprn(3, info, 
                        "M cannot be less than zero; is set to %d.", M);
   if (N < 0) info = cblas_errprn(4, info, 
                        "N cannot be less than zero; is set to %d.", N);
   if (!incX) info = cblas_errprn(9, info,
                                  "incX cannot be zero; is set to %d.", incX);
   if (!incY) info = cblas_errprn(12, info,
                                  "incY cannot be zero; is set to %d.", incY);
   if (Order == CblasColMajor)
   {
      if (lda < M || lda < 1)
         info = cblas_errprn(7, info, "lda must be >= MAX(M,1): lda=%d M=%d",
                             lda, M);
   }
   else if (Order == CblasRowMajor)
   {
      if (lda < N || lda < 1)
         info = cblas_errprn(7, info, "lda must be >= MAX(N,1): lda=%d N=%d",
                             lda, N);
   }
   else
      info = cblas_errprn(1, info, "Order must be %d or %d, but is set to %d",
                          CblasRowMajor, CblasColMajor, Order);
   if (info != 2000)
   {
      cblas_xerbla(info, "cblas_@(pre)gemv", "");
      return;
   }
#endif
   if (TA == AtlasNoTrans)
   {
      if (incX < 0) x += (1-N)*incX@(shift);
      if (incY < 0) y += (1-M)*incY@(shift);
   }
   else
   {
      if (incX < 0) x += (1-M)*incX@(shift);
      if (incY < 0) y += (1-N)*incY@(shift);
   }
   if (Order == CblasColMajor)
      ATL_@(pre)gemv(TA, M, N, alpha, A, lda, x, incX, beta, y, incY);
   else
   {
      if (TA == CblasNoTrans)
         ATL_@(pre)gemv(CblasTrans, N, M, alpha, A, lda, x, incX, beta, y, incY);
@TYPE DCPLX SCPLX
      else if (TA == CblasConjTrans)
         ATL_@(pre)gemv(AtlasConj, N, M, alpha, A, lda, x, incX, beta, y, incY);
@TYPE DREAL SREAL DCPLX SCPLX
      else 
         ATL_@(pre)gemv(CblasNoTrans, N, M, alpha, A, lda, x, incX, beta, y, incY);
   }
}
@ROUT GBMV
void cblas_@(pre)gbmv(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TA, 
                 const int M, const int N, const int KL, const int KU,
                 const @(styp)alpha, const @(type) *A, const int lda, 
                 const @(type) *X, const int incX, 
                 const @(styp)beta, @(type) *Y, const int incY)
{
   int info = 2000;
@TYPE DCPLX SCPLX
   const @(utyp) *x = X;
   @(utyp) *y = Y;
@TYPE DREAL SREAL
   #define x X
   #define y Y
@TYPE DREAL SREAL DCPLX SCPLX

#ifndef NoCblasErrorChecks
   if (Order != CblasRowMajor && Order != CblasColMajor)
      info = cblas_errprn(1, info, "Order must be %d or %d, but is set to %d",
                          CblasRowMajor, CblasColMajor, Order);
   if (TA != CblasNoTrans && TA != CblasTrans && TA != CblasConjTrans)
      info = cblas_errprn(2, info, 
                          "TransA must be %d, %d or %d, but is set to %d",
                          CblasNoTrans, CblasTrans, CblasConjTrans, TA);
   if (M < 0) info = cblas_errprn(3, info, 
                        "M cannot be less than zero; is set to %d.", M);
   if (N < 0) info = cblas_errprn(4, info, 
                        "N cannot be less than zero; is set to %d.", N);
   if (KL < 0) info = cblas_errprn(5, info, 
                         "KL cannot be less than zero; is set to %d.", KL);
   if (KU < 0) info = cblas_errprn(6, info, 
                         "KU cannot be less than zero; is set to %d.", KU);
   if (lda < (KL+KU+1))
      info = cblas_errprn(9, info, "lda must be >= KU+KL+1: lda=%d KU+KL+1=%d",
                          lda, KU+KL+1);
   if (!incX) info = cblas_errprn(11, info,
                                  "incX cannot be zero; is set to %d.", incX);
   if (!incY) info = cblas_errprn(14, info,
                                  "incY cannot be zero; is set to %d.", incY);
   if (info != 2000)
   {
      cblas_xerbla(info, "cblas_@(pre)gbmv", "");
      return;
   }
#endif

   if (TA == AtlasNoTrans)
   {
      if (incX < 0) x += (1-N)*incX@(shift);
      if (incY < 0) y += (1-M)*incY@(shift);
   }
   else
   {
      if (incX < 0) x += (1-M)*incX@(shift);
      if (incY < 0) y += (1-N)*incY@(shift);
   }
   if (Order == CblasColMajor)
      ATL_@(pre)gbmv(TA, M, N, KL, KU, alpha, A, lda, x, incX, beta, y, incY);
   else
   {
      if (TA == CblasNoTrans)
         ATL_@(pre)gbmv(CblasTrans, N, M, KU, KL, alpha, A, lda, x, incX, 
                   beta, y, incY);
@TYPE DCPLX SCPLX
      else if (TA == CblasConjTrans)
         ATL_@(pre)gbmv(AtlasConj, M, N, KU, KL, alpha, A, lda, x, incX, 
                   beta, y, incY);
@TYPE DREAL SREAL DCPLX SCPLX
      else ATL_@(pre)gbmv(CblasNoTrans, N, M, KU, KL, alpha, A, lda, x, incX,
                     beta, y, incY);
   }
}
@ROUT HEMV HBMV HPMV SYMV SBMV SPMV
void cblas_@(pre)@(@rout)(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo, 
@ROUT HBMV SBMV
                 const int N, const int K, const @(styp)alpha, const @(type) *A,
                 const int lda, const @(type) *X, const int incX, 
@ROUT HPMV SPMV
                 const int N, const @(styp)alpha, const @(type) *A,
                 const @(type) *X, const int incX, 
@ROUT HEMV SYMV
                 const int N, const @(styp)alpha, const @(type) *A,
                 const int lda, const @(type) *X, const int incX, 
@ROUT HEMV HBMV HPMV SYMV SBMV SPMV
                 const @(styp)beta, @(type) *Y, const int incY)
{
   int info = 2000;
   const enum CBLAS_UPLO ruplo = (Uplo == CblasUpper) ? CblasLower : CblasUpper;
@ROUT HEMV HBMV HPMV
   void *vx;
   @(utyp) *X0, *x = (@(utyp)*) X;
   @(utyp) *y = Y;
   const @(utyp) *alp=alpha;
   const @(utyp) *bet=beta;
   @(utyp) calpha[2], cbeta[2];
   const @(utyp) one[2] = {ATL_rone, ATL_rzero};
   calpha[0] = *alp;
   calpha[1] = -alp[1];
   cbeta[0] = *bet;
   cbeta[1] = -bet[1];
@ROUT SYMV SBMV SPMV
   #define x X
   #define y Y
@ROUT HEMV HBMV HPMV SYMV SBMV SPMV

#ifndef NoCblasErrorChecks
   if (Order != CblasColMajor && Order != CblasRowMajor)
      info = cblas_errprn(1, info, "Order must be %d or %d, but is set to %d",
                          CblasRowMajor, CblasColMajor, Order);
   if (Uplo != CblasUpper && Uplo != CblasLower)
      info = cblas_errprn(2, info, 
                          "Uplo must be %d or %d, but is set to %d",
                          CblasUpper, CblasLower, Uplo);

   if (N < 0) info = cblas_errprn(3, info, 
                        "N cannot be less than zero; is set to %d.", N);
@ROUT HBMV SBMV
   @define KK @, K@
   @define lda @, lda@
   if (K < 0)
      info = cblas_errprn(4, info, "Valid K: 0 < K < N; K=%d, N=%d.", K, N);
   if (lda < K+1) info = cblas_errprn(7, info, 
      "lda cannot be less than K+1;  K=%d, lda=%d\n", K, lda);
   if (!incX) info = cblas_errprn(9, info,
                                  "incX cannot be zero; is set to %d.", incX);
   if (!incY) info = cblas_errprn(12, info,
                                  "incY cannot be zero; is set to %d.", incY);
@skip   if (K > N-1 && info == 2000)
@skip      info = cblas_errprn(4, info, "Valid K: 0 < K < N; K=%d, N=%d.", K, N);
@ROUT HEMV SYMV
   @define KK @@
   @define lda @, lda@
   if (lda < Mmax(N,1)) info = cblas_errprn(6, info, 
      "lda cannot be less than MAX(N,1);  N=%d, lda=%d\n", N, lda);
   if (!incX) info = cblas_errprn(8, info,
                                  "incX cannot be zero; is set to %d.", incX);
   if (!incY) info = cblas_errprn(11, info,
                                  "incY cannot be zero; is set to %d.", incY);
@ROUT HPMV SPMV
   @define KK @@
   @define lda @@
   if (!incX) info = cblas_errprn(7, info,
                                  "incX cannot be zero; is set to %d.", incX);
   if (!incY) info = cblas_errprn(10, info,
                                  "incY cannot be zero; is set to %d.", incY);
@ROUT HEMV HBMV HPMV SYMV SBMV SPMV
   if (info != 2000)
   {
      cblas_xerbla(info, "cblas_@(pre)@(@rout)", "");
      return;
   }
#endif

   if (incX < 0) x += (1-N)*incX@(shift);
   if (incY < 0) y += (1-N)*incY@(shift);
   if (Order == CblasColMajor)
      ATL_@(pre)@(@rout)(Uplo, N@(KK), alpha, A@(lda), x, incX, beta, y, incY);
   else
@ROUT SYMV SBMV SPMV
      ATL_@(pre)@(@rout)(ruplo, N@(KK), alpha, A@(lda), x, incX, beta, y, incY);
@ROUT HEMV HBMV HPMV
   {
      vx = malloc(ATL_Cachelen + 2*N*sizeof(@(utyp)));
      ATL_assert(vx);
      X0 = x;
      x = ATL_AlignPtr(vx);
      ATL_@(pre)moveConj(N, calpha, X0, incX, x, 1);
      if (*bet != ATL_rzero || bet[1] != ATL_rzero)
      {
         ATL_@(pre)scalConj(N, cbeta, y, incY); 
         ATL_@(pre)@(@rout)(ruplo, N@(KK), one, A@(lda), x, 1, one, y, incY);
      }
      else ATL_@(pre)@(@rout)(ruplo, N@(KK), one, A@(lda), x, 1, beta, y, incY);
      free(vx);
      ATL_@(pre)scalConj(N, one, y, incY); 
   }
@ROUT HEMV HBMV HPMV SYMV SBMV SPMV
}
@ROUT      TRSV TBMV TBSV TPMV TPSV
@ROUT TRMV TRSV TBMV TBSV TPMV TPSV
   @define rt @@(@rout)@
void cblas_@(pre)@(rt)(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TA, const enum CBLAS_DIAG Diag,
@ROUT TPMV TPSV
                 const int N, const @(type) *A, @(type) *X, const int incX)
@ROUT TBMV TBSV
                 const int N, const int K, const @(type) *A, const int lda,
                 @(type) *X, const int incX)
@ROUT TRMV TRSV
                 const int N, const @(type) *A, const int lda,
                 @(type) *X, const int incX)
@ROUT TRMV TRSV TBMV TBSV TPMV TPSV
{
   int info = 2000;
   enum CBLAS_UPLO uplo;
   enum CBLAS_TRANSPOSE ta;
@TYPE DCPLX SCPLX
   @(utyp) *x = X;
@TYPE DREAL SREAL
   #define x X
@TYPE DREAL SREAL DCPLX SCPLX

#ifndef NoCblasErrorChecks
   if (Order != CblasColMajor && Order != CblasRowMajor)
      info = cblas_errprn(1, info, "Order must be %d or %d, but is set to %d",
                          CblasRowMajor, CblasColMajor, Order);
   if (Uplo != CblasUpper && Uplo != CblasLower)
      info = cblas_errprn(2, info, "UPLO must be %d or %d, but is set to %d",
                          CblasUpper, CblasLower, Uplo);
   if (TA != CblasNoTrans && TA != CblasTrans && TA != CblasConjTrans)
      info = cblas_errprn(3, info, 
                          "TransA must be %d, %d or %d, but is set to %d",
                          CblasNoTrans, CblasTrans, CblasConjTrans, TA);
   if (Diag != CblasUnit && Diag != CblasNonUnit)
      info = cblas_errprn(4, info, "DIAG must be %d or %d, but is set to %d",
                          CblasUnit, CblasNonUnit, Diag);

   if (N < 0) info = cblas_errprn(5, info, 
                        "N cannot be less than zero; is set to %d.", N);
@ROUT TPMV TPSV
   @define lda @@
   @define KK  @@
   if (!incX) info = cblas_errprn(8, info,
                                  "incX cannot be zero; is set to %d.", incX);
@ROUT TBMV TBSV
   @define lda @, lda@
   @define KK  @, K@
   if (K < 0)
      info = cblas_errprn(6, info, "Valid K: 0 < K < N; K=%d, N=%d.", K, N);
   if (lda < K+1)
      info = cblas_errprn(8, info, "lda must be >= K+1: lda=%d K=%d", lda, K);
   if (!incX) 
      info = cblas_errprn(10, info, "incX cannot be zero; is set to %d.", incX);
@skip   if (K > N-1 && info == 2000)
@skip      info = cblas_errprn(6, info, "Valid K: 0 < K < N; K=%d, N=%d.", K, N);
@ROUT TRMV TRSV
   @define lda @, lda@
   @define KK  @@
   if (lda < N || lda < 1)
      info = cblas_errprn(7, info, "lda must be >= MAX(N,1): lda=%d N=%d",
                          lda, N);
   if (!incX) info = cblas_errprn(9, info,
                                  "incX cannot be zero; is set to %d.", incX);
@ROUT TRMV TRSV TBMV TBSV TPMV TPSV
   if (info != 2000)
   {
      cblas_xerbla(info, "cblas_@(pre)@(rt)", "");
      return;
   }
#endif
   if (incX < 0) x += (1-N)*incX@(shift);
   if (Order == CblasColMajor)
      ATL_@(pre)@(rt)(Uplo, TA, Diag, N@(KK), A@(lda), x, incX);
   else
   {
      uplo = ( (Uplo == CblasUpper) ? CblasLower : CblasUpper );
      if (TA == CblasNoTrans) ta = CblasTrans;
@TYPE DCPLX SCPLX
      else if (TA == CblasConjTrans) ta = AtlasConj;
@TYPE DREAL SREAL DCPLX SCPLX
      else ta = CblasNoTrans;
      ATL_@(pre)@(rt)(uplo, ta, Diag, N@(KK), A@(lda), x, incX);
   }
}
@ROUT ger2 ger2c ger2u
void cblas_@(pre)@(@rout)(const enum CBLAS_ORDER Order, ATL_CINT M, ATL_CINT N,
                 const @(styp)alpha, const @(type) *X, ATL_CINT incX,
                 const @(type) *Y, ATL_CINT incY, const @(styp)beta,
                 const @(type) *W, ATL_CINT incW, 
                 const @(type) *Z, ATL_CINT incZ, @(type) *A, ATL_CINT lda)
{
   int info = 2000;
@ROUT ger2u ger2c
   const @(utyp) *x = X, *y = Y, *w = W, *z = Z;
@ROUT ger2c
   void *vy;
   @(utyp) *y0, *z0;
   @(utyp) one[2] = {ATL_rone, ATL_rzero};
@ROUT GER2
   #define x X
   #define y Y
   #define w W
   #define z Z
@ROUT GER2 ger2u ger2c

#ifndef NoCblasErrorChecks
   if (M < 0) info = cblas_errprn(2, info,
                        "M cannot be less than zero; is set to %d.", M);
   if (N < 0) info = cblas_errprn(3, info, 
                        "N cannot be less than zero; is set to %d.", N);
   if (!incX) info = cblas_errprn(6, info,
                                  "incX cannot be zero; is set to %d.", incX);
   if (!incY) info = cblas_errprn(8, info,
                                  "incY cannot be zero; is set to %d.", incY);
   if (!incW) info = cblas_errprn(11, info,
                                  "incW cannot be zero; is set to %d.", incW);
   if (!incZ) info = cblas_errprn(13, info,
                                  "incZ cannot be zero; is set to %d.", incZ);
   if (Order == CblasColMajor)
   {
      if (lda < M || lda < 1)
         info = cblas_errprn(15, info, "lda must be >= MAX(M,1): lda=%d M=%d",
                             lda, M);
   }
   else if (Order == CblasRowMajor)
   {
      if (lda < N || lda < 1)
         info = cblas_errprn(15, info, "lda must be >= MAX(N,1): lda=%d M=%d",
                             lda, N);
   }
   else
      info = cblas_errprn(1, info, "Order must be %d or %d, but is set to %d",
                          CblasRowMajor, CblasColMajor, Order);
   if (info != 2000)
   {
      cblas_xerbla(info, "cblas_@(pre)@(@rout)", "");
      return;
   }
#endif

   if (incX < 0) x += (1-M)*incX@(shift);
   if (incY < 0) y += (1-N)*incY@(shift);
   if (incW < 0) w += (1-M)*incW@(shift);
   if (incZ < 0) z += (1-N)*incZ@(shift);

   if (Order == CblasColMajor)
      ATL_@(pre)@(@rout)(M, N, alpha, x, incX, y, incY, beta, w, incW, z, incZ, A, lda);
   else
@ROUT ger2 ger2u
      ATL_@(pre)@(@rout)(N, M, alpha, y, incY, x, incX, beta, w, incW, z, incZ, A, lda);
@ROUT ger2c
   {
      vy = malloc(ATL_Cachelen+ATL_Cachelen + ATL_MulBySize(N+N));
      ATL_assert(vy);
      y0 = ATL_AlignPtr(vy);
      z0 = y0 + N;
      z0 = ATL_AlignPtr(z0);
      ATL_@(pre)moveConj(N, alpha, y, incY, y0, 1);
      ATL_@(pre)moveConj(N, alpha, z, incZ, z0, 1);
      ATL_@(pre)ger2u(N, M, one, y0, 1, x, incX, beta, w, incW, z, incZ, A, lda);
      free(vy);
   }
@ROUT ger2 ger2c ger2u
}
@ROUT ger gerc geru
void cblas_@(pre)@4l@(@rout)(const enum CBLAS_ORDER Order, const int M, const int N,
                 const @(styp)alpha, const @(type) *X, const int incX,
                 const @(type) *Y, const int incY, @(type) *A, const int lda)
{
   int info = 2000;
@ROUT GERU GERC
   const @(utyp) *x = X, *y = Y;
@ROUT GERC
   void *vy;
   @(utyp) *y0;
   @(utyp) one[2] = {ATL_rone, ATL_rzero};
@ROUT GER
   #define x X
   #define y Y
@ROUT GER GERU GERC

#ifndef NoCblasErrorChecks
   if (M < 0) info = cblas_errprn(2, info,
                        "M cannot be less than zero; is set to %d.", M);
   if (N < 0) info = cblas_errprn(3, info, 
                        "N cannot be less than zero; is set to %d.", N);
   if (!incX) info = cblas_errprn(6, info,
                                  "incX cannot be zero; is set to %d.", incX);
   if (!incY) info = cblas_errprn(8, info,
                                  "incY cannot be zero; is set to %d.", incY);
   if (Order == CblasColMajor)
   {
      if (lda < M || lda < 1)
         info = cblas_errprn(10, info, "lda must be >= MAX(M,1): lda=%d M=%d",
                             lda, M);
   }
   else if (Order == CblasRowMajor)
   {
      if (lda < N || lda < 1)
         info = cblas_errprn(10, info, "lda must be >= MAX(N,1): lda=%d M=%d",
                             lda, N);
   }
   else
      info = cblas_errprn(1, info, "Order must be %d or %d, but is set to %d",
                          CblasRowMajor, CblasColMajor, Order);
   if (info != 2000)
   {
      cblas_xerbla(info, "cblas_@(pre)@(@rout)", "");
      return;
   }
#endif

   if (incX < 0) x += (1-M)*incX@(shift);
   if (incY < 0) y += (1-N)*incY@(shift);

   if (Order == CblasColMajor)
      ATL_@(pre)@(@rout)(M, N, alpha, x, incX, y, incY, A, lda);
   else
@ROUT ger geru
      ATL_@(pre)@(@rout)(N, M, alpha, y, incY, x, incX, A, lda);
@ROUT gerc
   {
      vy = malloc(ATL_Cachelen + ATL_MulBySize(N));
      ATL_assert(vy);
      y0 = ATL_AlignPtr(vy);
      ATL_@(pre)moveConj(N, alpha, y, incY, y0, 1);
      ATL_@(pre)geru(N, M, one, y0, 1, x, incX, A, lda);
      free(vy);
   }
@ROUT ger gerc geru
}
@ROUT HER HPR SYR SPR
void cblas_@(pre)@(@rout)(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                const int N, const @(typa) alpha, 
@ROUT HPR SPR
                const @(type) *X, const int incX, @(type) *A)
   @define lda @@
@ROUT HER SYR
                const @(type) *X, const int incX, @(type) *A, const int lda)
   @define lda @, lda@
@ROUT HER HPR SYR SPR
{
   int info = 2000;
@ROUT HER HPR
   void *vx;
   @(utyp) one[2] = {ATL_rone, ATL_rzero};
   @(utyp) *x0;
   const @(utyp) *x=X;
@ROUT SYR SPR
   #define x X
@ROUT HER SYR HPR SPR

#ifndef NoCblasErrorChecks
   if (Order != CblasColMajor && Order != CblasRowMajor)
      info = cblas_errprn(1, info, "Order must be %d or %d, but is set to %d",
                          CblasRowMajor, CblasColMajor, Order);
   if (Uplo != CblasUpper && Uplo != CblasLower)
      info = cblas_errprn(2, info, "UPLO must be %d or %d, but is set to %d",
                          CblasUpper, CblasLower, Uplo);
   if (N < 0) info = cblas_errprn(3, info, 
                        "N cannot be less than zero; is set to %d.", N);
   if (!incX) info = cblas_errprn(6, info,
                                  "incX cannot be zero; is set to %d.", incX);
@ROUT HER SYR
   if (lda < N || lda < 1)
      info = cblas_errprn(8, info, "lda must be >= MAX(N,1): lda=%d N=%d",
                          lda, N);
@ROUT HER SYR HPR SPR
   if (info != 2000)
   {
      cblas_xerbla(info, "cblas_@(pre)@(@rout)", "");
      return;
   }
#endif

   if (incX < 0) x += (1-N)*incX@(shift);

   if (Order == CblasColMajor)
      ATL_@(pre)@(@rout)(Uplo, N, alpha, x, incX, A@(lda));
@ROUT SYR SPR
   else
      ATL_@(pre)@(@rout)(( (Uplo == CblasUpper) ? CblasLower : CblasUpper ), 
                    N, alpha, x, incX, A@(lda));
@ROUT HER HPR
   else if (alpha != ATL_rzero)
   {
      vx = malloc(ATL_Cachelen + ATL_MulBySize(N));
      ATL_assert(vx);
      x0 = ATL_AlignPtr(vx);
      ATL_@(pre)moveConj(N, one, x, incX, x0, 1);
      ATL_@(pre)@(@rout)(( (Uplo == CblasUpper) ? CblasLower : CblasUpper ), 
               N, alpha, x0, 1, A@(lda));
      free(vx);
   }
   else
      ATL_@(pre)@(@rout)(( (Uplo == CblasUpper) ? CblasLower : CblasUpper ), 
               N, ATL_rzero, x, incX, A@(lda));
@ROUT HER SYR HPR SPR
}
@ROUT HER2 SYR2 HPR2 SPR2
void cblas_@(pre)@(@rout)(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                 const int N, const @(styp)alpha, 
                 const @(type) *X, const int incX, 
@ROUT HPR2 SPR2
                 const @(type) *Y, const int incY, @(type) *A)
   @define lda @@
@ROUT HER2 SYR2
   @define lda @, lda@
                 const @(type) *Y, const int incY, @(type) *A, const int lda)
@ROUT HER2 SYR2 HPR2 SPR2
{
   int info = 2000;
@ROUT HER2 HPR2
   void *vx, *vy;
   @(utyp) *x0, *y0;
   const @(utyp) *x=X, *y=Y, *alp=alpha;
   const @(utyp) one[2]={ATL_rone, ATL_rzero};
@ROUT SYR2 SPR2
   #define x X
   #define y Y
@ROUT HER2 SYR2 HPR2 SPR2

#ifndef NoCblasErrorChecks
   if (Order != CblasColMajor && Order != CblasRowMajor)
      info = cblas_errprn(1, info, "Order must be %d or %d, but is set to %d",
                          CblasRowMajor, CblasColMajor, Order);
   if (Uplo != CblasUpper && Uplo != CblasLower)
      info = cblas_errprn(2, info, "UPLO must be %d or %d, but is set to %d",
                          CblasUpper, CblasLower, Uplo);
   if (N < 0) info = cblas_errprn(3, info, 
                        "N cannot be less than zero; is set to %d.", N);
   if (!incX) info = cblas_errprn(6, info,
                                  "incX cannot be zero; is set to %d.", incX);
   if (!incY) info = cblas_errprn(8, info,
                                  "incY cannot be zero; is set to %d.", incY);
@ROUT HER2 SYR2
   if (lda < N || lda < 1)
      info = cblas_errprn(10, info, "lda must be >= MAX(N,1): lda=%d N=%d",
                          lda, N);
@ROUT HER2 SYR2 HPR2 SPR2
   if (info != 2000)
   {
      cblas_xerbla(info, "cblas_@(pre)@(@rout)", "");
      return;
   }
#endif

   if (incX < 0) x += (1-N)*incX@(shift);
   if (incY < 0) y += (1-N)*incY@(shift);

   if (Order == CblasColMajor)
      ATL_@(pre)@(@rout)(Uplo, N, alpha, x, incX, y, incY, A@(lda));
@ROUT SYR2 SPR2
   else
      ATL_@(pre)@(@rout)(( (Uplo == CblasUpper) ? CblasLower : CblasUpper ), 
                     N, alpha, y, incY, x, incX, A@(lda));
@ROUT HER2 HPR2
   else if (alp[0] != ATL_rzero || alp[1] != ATL_rzero)
   {
      vx = malloc(ATL_Cachelen + ATL_MulBySize(N));
      vy = malloc(ATL_Cachelen + ATL_MulBySize(N));
      ATL_assert(vx != NULL && vy != NULL);
      x0 = ATL_AlignPtr(vx);
      y0 = ATL_AlignPtr(vy);
      ATL_@(pre)moveConj(N, alpha, y, incY, y0, 1);
      ATL_@(pre)copyConj(N, x, incX, x0, 1);
      ATL_@(pre)@(@rout)(( (Uplo == CblasUpper) ? CblasLower : CblasUpper ), 
                N, one, y0, 1, x0, 1, A@(lda));
      free(vx);
      free(vy);
   }
   else ATL_@(pre)@(@rout)(( (Uplo == CblasUpper) ? CblasLower : CblasUpper ), 
                  N, alpha, y, incY, x, incX, A@(lda));
@ROUT HER2 SYR2 HPR2 SPR2
}
