@ROUT ATL_cam2amb ATL_ram2amb ATL_muxnu2mat
#include "atlas_misc.h"
@beginskip
#define TYPE double
#define SCALAR TYPE
#define ATL_INT int
#define ATL_rzero 0.0
#define ATL_CINT const int
@endskip
@ROUT ATL_cm2am ATL_rm2am ATL_ablk2cmat ATL_cmat2ablk
#include "atlas_misc.h"
   @ifdef ! alpha
      @define alpha @1@
   @endifdef
   @iif alpha = 1
      @define malp @@
   @endiif
   @iif alpha = -1
      @define malp @-@
      @define nalp @n@
   @endiif
   @iif alpha ! -1
      @define nalp @@(alpha)@
      @iif alpha ! 1
         @define malp @alpha*@
         @define nalp @X@
      @endiif
   @endiif
@ROUT ATL_ablk2cmat ATL_cmat2ablk
   @iif beta = -1
      @define nbet @n@
   @endiif
   @iif beta ! -1
      @iif beta = 0
         @define nbet @@(beta)@
      @endiif
      @iif beta = 1
         @define nbet @1@
      @endiif
      @ifdef ! nbet
         @define nbet @X@
      @endifdef
   @endiif
@ROUT ammmtst
#include "atlas_misc.h"
   @define alpha @1@
   @define malp @@
   @define nalp @@(alpha)@
@ROUT ATL_cm2am ammmtst
/*
 * This routine copies the KxN submatrix A into the KxCEIL(N/@(nu)) block b.
 * b is stored in access-major storage, where the @(nu) unrolled accesses
 * are assumed to come from the columns of A.
 * More specifically, each Kx@(nu) column panel of A is copied into a
 * @(nu)xK region of b, and if the last such column panel is partial, it
 * is zero padded.
 * For GEMM, this routine handles Notrans B matrices, and Trans A matrices.
 */
void Mjoin(PATL,cm2am_a@(nalp)_@(nu)) /* col-access matx to access-major blk */
(
   ATL_CSZT K,          /* number of rows in A */
   ATL_CSZT N,          /* number of columns in A */
   const SCALAR alpha,  /* scalar for A */
   const TYPE *A,       /* matrix to be copied to access-major format */
   ATL_CSZT lda,        /* stride between row elements */
   TYPE *b              /* OUTPUT: access-major block holding A */
)
{
   ATL_CSZT n = (N/@(nu))*@(nu), incA = lda*@(nu);
   ATL_SZT i, j;
   @declare "   const TYPE " n n ";"
      *A0=A
      @define j @1@
      @iwhile j < @(nu)
         @iexp i @(j) -1 +
         *A@(j)=A@(i)+lda
         @iexp j @(j) 1 +
      @endiwhile
   @enddeclare

   for (j=0; j < n; j += @(nu))
   {
      for (i=0; i < K; i++, b += @(nu))
      {
      @iexp j 0 0 +
      @iwhile j < @(nu)
         b[@(j)] = @(malp)A@(j)[i];
      @iexp j @(j) 1 +
      @endiwhile
      }
      @iexp j 0 0 +
      @iwhile j < @(nu)
      A@(j) += incA;
      @iexp j @(j) 1 +
      @endiwhile
   }
   @mif nu ! "1
   switch(N-n)
   {
   @iexp n 1 0 +
   @iwhile n < @(nu)
      @iexp j @(n) -1 + 
   case @(n):
      for (i=0; i < K; i++, b += @(nu))
      {
      @iexp j 0 0 +
      @iwhile j < @(n)
         b[@(j)] = @(malp)A@(j)[i];
      @iexp j @(j) 1 +
      @endiwhile
      @iwhile j < @(nu)
         b[@(j)] = ATL_rzero;
      @iexp j @(j) 1 +
      @endiwhile
      }
      break;
   @iexp n @(n) 1 +
   @endiwhile
   default:;
   }
   @endmif
}
@ROUT ATL_rm2am ammmtst
/*
 * This routine copies the MxK submatrix A into the KxCEIL(M/@(mu) block b.
 * b is stored in access-major storage, where the @(mu) unrolled accesses
 * are assumed to come from the rows of A.
 * More specifically, the @(mu)xK row panel of A becomes a @(mu)xK region
 * in b, and if the last such row panel is partial, it is zero padded.
 * For GEMM, this routine handles Notrans A matrices, and Trans B matrices.
 */
void Mjoin(PATL,rm2am_a@(nalp)_@(mu)) /* row-access matrix to access-major block */
(
   ATL_CSZT K,          /* number of columns in A */
   ATL_CSZT M,          /* number of rows in A */
   const SCALAR alpha,  /* scalar for A */
   const TYPE *A,       /* matrix to be copied to access-major format */
   ATL_CSZT lda,        /* stride between row elements */
   TYPE *b              /* OUTPUT: access-major block holding condensed A */
)
{
   ATL_CSZT pansz = @(mu)*K, m = M/@(mu)*@(mu), mr = M-m, incA = lda - m;
   ATL_SZT i, j;

   for (j=0; j < K; j++, b += @(mu), A += incA)
   {
      TYPE *pp = b;  /* panel ptr */
      for (i=0; i < m; i += @(mu), pp += pansz, A += @(mu))
      {
      @iexp i 0 0 +
      @iwhile i < @(mu)
         pp[@(i)] = @(malp)A[@(i)];
      @iexp i @(i) 1 +
      @endiwhile
      }
      @mif mu ! "1
      switch(mr)
      {
      @iexp n 1 0 +
      @iwhile n < @(mu)
      case @(n):
         @iexp i 0 0 +
         @iwhile i < @(n)
         pp[@(i)] = @(malp)A[@(i)];
         @iexp i @(i) 1 +
         @endiwhile
         @iwhile i < @(mu)
         pp[@(i)] = ATL_rzero;
         @iexp i @(i) 1 +
         @endiwhile
         break;
      @iexp n @(n) 1 +
      @endiwhile
      default:;
      }
      @endmif
   }
}
@ROUT ammmtst
  @define beta @0@
  @define nbet @0@
@ROUT ATL_ablk2cmat ammmtst
/*
 *  C <- beta*C + alpha*b,
 *  C is an MxN matrix in column-major storage
 *  b is a CEIL(M/@(mu))*@(mu) x CEIL(N/@(nu))*@(nu) matrix stored in
 *    @(mu)x@(nu)-major storage
 */
void Mjoin(PATL,ablk2cmat_@(mu)x@(nu)_a@(nalp)_b@(nbet))
(
   ATL_CSZT M,          /* number of rows in A */
   ATL_CSZT N,          /* number of columns in A */
   const SCALAR alpha,  /* scalar for b */
   const TYPE *b,       /* matrix stored in @(mu)x@(nu)-major order */
   const SCALAR beta,   /* scalar for C */
   TYPE *C,             /* matrix to be copied to access-major format */
   ATL_CSZT ldc         /* stride between row elements */
)
{
   ATL_CINT m = (M/@(mu))*@(mu), n = (N/@(nu))*@(nu), mr = M-m, nr = N-n;
   ATL_CINT pansz = (nr) ? (n+@(nu))*@(mu) : n*@(mu);
   ATL_CINT incC = ldc*@(nu), incb = @(mu)*@(nu);
   ATL_INT i, j;
   @declare "   TYPE " n n ";"
      *C0=C
      @define j @1@
      @iwhile j < @(nu)
         @iexp i @(j) -1 +
         *C@(j)=C@(i)+ldc
         @iexp j @(j) 1 +
      @endiwhile
   @enddeclare

   for (j=0; j < n; j += @(nu), b += incb)
   {
      const TYPE *p = b;
      for (i=0; i < m; i += @(mu), p += pansz)
      {
   @iexp k 0 0 +
   @iexp j 0 0 +
   @iwhile j < @(nu)
      @iexp i 0 0 +
      @iwhile i < @(mu)
         @mif nalp = "n
            @mif nbet = "X
         C@(j)[i+@(i)] = beta*C@(j)[i+@(i)] - p[@(k)];
            @endmif
         @mif nbet = "1
         C@(j)[i+@(i)] -= p[@(k)];
            @endmif
            @mif nbet = "0
         C@(j)[i+@(i)] = @(malp)p[@(k)];
            @endmif
            @mif nbet = "n
         C@(j)[i+@(i)] = -(p[@(k)] + C@(j)[i+@(i)]);
            @endmif
         @endmif
         @mif nalp ! "n
            @mif nbet = "X
         C@(j)[i+@(i)] = beta*C@(j)[i+@(i)] + @(malp)p[@(k)];
            @endmif
         @mif nbet = "1
         C@(j)[i+@(i)] += @(malp)p[@(k)];
            @endmif
            @mif nbet = "0
         C@(j)[i+@(i)] = @(malp)p[@(k)];
            @endmif
            @mif nbet = "n
         C@(j)[i+@(i)] = @(malp)p[@(k)] - C@(j)[i+@(i)];
            @endmif
         @endmif
         @iexp k @(k) 1 +
      @iexp i @(i) 1 +
      @endiwhile
   @iexp j @(j) 1 +
   @endiwhile
      }
      @mif mu ! "1
      switch(mr)
      {
      @iexp m 1 0 +
      @iwhile m < @(mu)
      case @(m):
         @iexp j 0 0 +
         @iwhile j < @(nu)
            @iexp k @(mu) @(j) *
            @iexp i 0 0 +
            @iwhile i < @(m)
         @mif nalp = "n
            @mif nbet = "X
         C@(j)[i+@(i)] = beta*C@(j)[i+@(i)] - p[@(k)];
            @endmif
         @mif nbet = "1
         C@(j)[i+@(i)] -= p[@(k)];
            @endmif
            @mif nbet = "0
         C@(j)[i+@(i)] = @(malp)p[@(k)];
            @endmif
            @mif nbet = "n
         C@(j)[i+@(i)] = -(p[@(k)] + C@(j)[i+@(i)]);
            @endmif
         @endmif
         @mif nalp ! "n
            @mif nbet = "X
         C@(j)[i+@(i)] = beta*C@(j)[i+@(i)] + @(malp)p[@(k)];
            @endmif
         @mif nbet = "1
         C@(j)[i+@(i)] += @(malp)p[@(k)];
            @endmif
            @mif nbet = "0
         C@(j)[i+@(i)] = @(malp)p[@(k)];
            @endmif
            @mif nbet = "n
         C@(j)[i+@(i)] = @(malp)p[@(k)] - C@(j)[i+@(i)];
            @endmif
         @endmif
               @iexp k @(k) 1 + 
            @iexp i @(i) 1 +
            @endiwhile
         @iexp j @(j) 1 +
         @endiwhile
         break;
      @iexp m @(m) 1 +
      @endiwhile
      default:;
      }
      @endmif
   @iexp j 0 0 +
   @iwhile j < @(nu)
      C@(j) += incC;
      @iexp j @(j) 1 +
   @endiwhile
   }
   @mif nu ! "1
   switch(nr)
   {
   @iexp n 1 0 +
   @iwhile n < @(nu)
   case @(n):
      for (i=0; i < m; i += @(mu), b += pansz)
      {
      @iexp k 0 0 +
      @iexp j 0 0 +
      @iwhile j < @(n)
         @iexp i 0 0 +
         @iwhile i < @(mu)
            @mif nbet = "X
         C@(j)[i+@(i)] = beta*C@(j)[i+@(i)] + @(malp)b[@(k)];
            @endmif
            @mif nbet = "1
         C@(j)[i+@(i)] += @(malp)b[@(k)];
            @endmif
            @mif nbet = "n
         C@(j)[i+@(i)] = @(malp)b[@(k)] - C@(j)[i+@(i)];
            @endmif
            @mif nbet = "0
         C@(j)[i+@(i)] = @(malp)b[@(k)];
            @endmif
            @iexp k @(k) 1 +
         @iexp i @(i) 1 +
         @endiwhile
      @iexp j @(j) 1 +
      @endiwhile
      }
      @mif mu ! "1
      switch(mr)
      {
      @iexp m 1 0 +
      @iwhile m < @(mu)
      case @(m):
         @iexp j 0 0 +
         @iwhile j < @(n)
            @iexp k @(mu) @(j) *
            @iexp i 0 0 +
            @iwhile i < @(m)
               @mif nbet = "n
         C@(j)[i+@(i)] = @(malp)b[@(k)] - C@(j)[i+@(i)];
               @endmif
               @mif nbet = "X
         C@(j)[i+@(i)] = beta*C@(j)[i+@(i)] + @(malp)b[@(k)];
               @endmif
               @mif nbet = "1
         C@(j)[i+@(i)] += @(malp)b[@(k)];
               @endmif
               @mif nbet = "0
         C@(j)[i+@(i)] = @(malp)b[@(k)];
               @endmif
               @iexp k @(k) 1 + 
            @iexp i @(i) 1 +
            @endiwhile
         @iexp j @(j) 1 +
         @endiwhile
         b += incb;
         break;
      @iexp m @(m) 1 +
      @endiwhile
      default:;
      }
      @endmif
      break;
   @iexp n @(n) 1 +
   @endiwhile
   default:;
   }
   @endmif
}
@ROUT ATL_mm@(mu)x@(nu)_1_avx ATL_mm@(mu)x@(nu)_1_sse
#include <immintrin.h>
#include "atlas_misc.h"
#include "atlas_prefetch.h"
#ifndef ATL_CSZT
   #define ATL_CSZT const size_t
#endif
#ifndef ATL_MM_KB 
   #ifdef KB
      #if KB == 0
         #define ATL_MM_KB K
         #define ATL_KBCONST 0
      #else
         #define ATL_MM_KB KB
         #define ATL_KBCONST 1
      #endif
   #else
      #define ATL_MM_KB K
      #define ATL_KBCONST 0
   #endif
#else
   #define ATL_KBCONST 1
#endif
@ROUT ATL_mm@(mu)x@(nu)_1_sse
@ifdef ! vlen
   @define vlen @2$
@endifdef
@iif vlen = 2
   @define vtyp @__m128d@
   @define bcast @_mm_movdup_pd@
   @define mul @_mm_mul_pd@
   @define add @_mm_add_pd@
   @define sub @_mm_sub_pd@
   @define ld  @_mm_load_pd@
   @define store @_mm_store_pd@
   @define CL @8@
#ifdef ATL_SSE3
   #define ATL_bcast(p_, r_) \
      r_ = _mm_loaddup_pd(p_)
#else
   #define ATL_bcast(p_, r_) \
      r_ = _mm_load1_pd(p_)
#endif
@endiif
@iif vlen = 4
   @define vtyp @__m128@
   @define bcast @_mm_load1_ps@
   @define mul @_mm_mul_ps@
   @define add @_mm_add_ps@
   @define sub @_mm_sub_ps@
   @define ld  @_mm_load_ps@
   @define store @_mm_store_ps@
   @define CL @16@
#define ATL_bcast(p_, r_) \
   r_ = _mm_load1_ps(p_)
@endiif
@iexp vmu @(vlen) @(mu) /
@iexp i @(vmu) @(vlen) *
@iif i ! @(mu)
   @error "@(mu) must be a multiple of @(vlen)!"
@endiif
@ROUT ATL_mm@(mu)x@(nu)_1_avx
@ifdef ! vlen
   @define vlen @4$
@endifdef
@iif vlen = 4
   @define vtyp @__m256d@
   @define bcast @_mm256_broadcast_sd@
   @define mul @_mm256_mul_pd@
   @define add @_mm256_add_pd@
   @define sub @_mm256_sub_pd@
   @define ld  @_mm256_load_pd@
   @define store @_mm256_store_pd@
   @define CL @8@
@endiif
@iif vlen = 8
   @define vtyp @__m256@
   @define bcast @_mm256_broadcast_ss@
   @define mul @_mm256_mul_ps@
   @define add @_mm256_add_ps@
   @define sub @_mm256_sub_ps@
   @define ld  @_mm256_load_ps@
   @define store @_mm256_store_ps@
   @define CL @16@
@endiif
@iexp vmu @(vlen) @(mu) /
@iexp i @(vmu) @(vlen) *
@iif i ! @(mu)
   @error "@(mu) must be a multiple of @(vlen)!"
@endiif
@ROUT ATL_mm@(mu)x@(nu)_1_avx ATL_mm@(mu)x@(nu)_1_sse
void ATL_USERMM
(
   ATL_CSZT nmus,
   ATL_CSZT nnus,
   ATL_CSZT K,
   const TYPE *pA,    /* @(mu)*KB*nmus-length access-major array of A */
   const TYPE *pB,    /* @(nu)*KB*nnus-length access-major array of B */
   TYPE *pC,          /* @(mu)*@(nu)*nnus*nmus-length access-major array of C */
   const TYPE *pAn,   /* next block of A */
   const TYPE *pBn,   /* next block of B */
   const TYPE *pCn    /* next block of C */
)
/*
 * Performs a GEMM operation on a @(mu)x@(nu) jammed GEMM with a compile-time
 * constant K-length of ATL_MM_KB.
 */
{
   @declare "   register @(vtyp) " y y ";"
      m0
      @iexp j 0 0 +
      @iwhile j < @(nu)
         rB@(j)
         @iexp i 0 0 +
         @iwhile i < @(vmu)
            rC@(i)@(j)
            @iexp i @(i) 1 +
         @endiwhile
         @iexp j @(j) 1 +
      @endiwhile
      @iexp i 0 0 +
      @iwhile i < @(vmu)
         rA@(i)
         @iexp i @(i) 1 +
      @endiwhile
   @enddeclare
   const TYPE *pB0 = pB;
   const TYPE *pfA, *pfB;
   size_t incPF;
   size_t i, j, k;
   #if ATL_KBCONST == 0
      size_t incAm = @(mu)*ATL_MM_KB;
   #else
      #define incAm @(mu)*ATL_MM_KB
   #endif

   if (pAn != pA)
   {
      pfA = pAn;
      incPF = (nmus*@(mu)*K) / (nmus * nnus);
      pfB = (pBn != pB) ? pBn : pCn;
      
   }
   else if (pCn != pC)
   {
      pfA = pCn;
      incPF = (nmus*@(mu)*nnus*@(nu)) / (nmus * nnus);
      pfB = pBn;
   }
   else if (pBn != pB)
   {
      pfA = pBn;
      pfB = pBn +((nmus*@(mu)*nnus*@(nu))>>1);
      incPF = (K*nnus*@(nu)*sizeof(TYPE)) / ((nmus * nnus)<<1);
   }
   else
   {
      pfA = pA + nmus*@(mu)*(K>>1);
      incPF = (nmus*@(mu)*K) / (nmus * nnus);
   }
@ROUT ATL_mm@(mu)x@(nu)_1_avx
   for (i=0; i < nmus; i++)
   {
      for (j=0; j < nnus; j++)
      {
/*
 *       Peel K=1 iteration to avoid zero of rCxx and extra add 
 */
         rA0 = @(ld)(pA);
         rB0 = @(bcast)(pB);
         @iexp k 0 @(vlen) +
         @iexp i 0 1 +
         @iwhile i < @(vmu)
         rA@(i) = @(ld)(pA+@(k));
            @iexp k @(k) @(vlen) +
            @iexp i @(i) 1 +
         @endiwhile
         @iexp j 0 1 +
         @iwhile j < @(nu)
         rB@(j) = @(bcast)(pB+@(j));
            @iexp j @(j) 1 +
         @endiwhile
         @iexp k 0 0 +
         @iexp j 0 0 +
         @iwhile j < @(nu)
            @iexp i 0 0 +
            @iwhile i < @(vmu)
         rC@(i)@(j) = @(mul)(rA@(i), rB@(j));
            @iif k = 0
               ATL_pfl1W(pC);
            @endiif
            @iif k = 1
               ATL_pfl1W(pC+@(CL));
            @endiif
            @iif k = 2
               ATL_pfl1R(pfA);
            @endiif
            @iif k = 3
               ATL_pfl1R(pfA+@(CL));
            @endiif
            @iif k = 4
               pfA += incPF;
            @endiif
            @iif k = 5
               pA += @(mu);
            @endiif
            @iif k = 6
               pB += @(nu);
            @endiif
               @iexp k @(k) 1 +
               @iexp i @(i) 1 +
            @endiwhile
            @iexp j @(j) 1 +
         @endiwhile
         @iif k < 1
               ATL_pfl1W(pC+@(CL));
         @endiif
         @iif k < 2
               ATL_pfl1R(pfA);
         @endiif
         @iif k < 3
               ATL_pfl1R(pfA+@(CL));
         @endiif
         @iif k < 4
               pfA += incPF;
         @endiif
         @iif k < 5
               pA += @(mu);
         @endiif
         @iif k < 6
               pB += @(nu);
         @endiif
/*
 *       Handle remaining K its with rolled loop (compiler can unroll easily)
 */
         for (k=1; k < ATL_MM_KB; k++)
         {
            rA0 = @(ld)(pA);
            rB0 = @(bcast)(pB);
            @iexp k 0 @(vlen) +
            @iexp i 0 1 +
            @iwhile i < @(vmu)
            rA@(i) = @(ld)(pA+@(k));
               @iexp k @(k) @(vlen) +
               @iexp i @(i) 1 +
            @endiwhile
            @iexp j 0 1 +
            @iwhile j < @(nu)
            rB@(j) = @(bcast)(pB+@(j));
               @iexp j @(j) 1 +
            @endiwhile
            @iexp j 0 0 +
            @iwhile j < @(nu)
               @iexp i 0 0 +
               @iwhile i < @(vmu)
            m0 = @(mul)(rA@(i), rB@(j));
            rC@(i)@(j) = @(add)(m0, rC@(i)@(j));
                  @iexp i @(i) 1 +
               @endiwhile
               @iexp j @(j) 1 +
            @endiwhile
            pA += @(mu);
            pB += @(nu);
         }
         pA -= incAm;
         #ifdef BETA0
         @iexp k 0 0 +
         @iexp j 0 0 +
         @iwhile j < @(nu)
            @iexp i 0 0 +
            @iwhile i < @(vmu)
            @(store)(pC+@(k), rC@(i)@(j));
               @iexp k @(k) @(vlen) +
               @iexp i @(i) 1 +
            @endiwhile
            @iexp j @(j) 1 +
         @endiwhile
         #elif defined(BETAN1)
         @iexp k 0 0 +
         @iexp j 0 0 +
         @iwhile j < @(nu)
            @iexp i 0 0 +
            @iwhile i < @(vmu)
            m0 = @(ld)(pC+@(k));
            rC@(i)@(j) = @(sub)(rC@(i)@(j), m0);
            @(store)(pC+@(k), rC@(i)@(j));
               @iexp k @(k) @(vlen) +
               @iexp i @(i) 1 +
            @endiwhile
            @iexp j @(j) 1 +
         @endiwhile
         #else  /* BETA = 1 */
         @iexp k 0 0 +
         @iexp j 0 0 +
         @iwhile j < @(nu)
            @iexp i 0 0 +
            @iwhile i < @(vmu)
            m0 = @(ld)(pC+@(k));
            rC@(i)@(j) = @(add)(rC@(i)@(j), m0);
            @(store)(pC+@(k), rC@(i)@(j));
               @iexp k @(k) @(vlen) +
               @iexp i @(i) 1 +
            @endiwhile
            @iexp j @(j) 1 +
         @endiwhile
         #endif
         pC += @(mu)*@(nu);
      }
      pA += incAm;
      pB = pB0;
   }
}
@ROUT ATL_mm@(mu)x@(nu)_1_sse
   for (i=0; i < nmus; i++)
   {
      for (j=0; j < nnus; j++)
      {
/*
 *       Peel K=1 iteration to avoid zero of rCxx and extra add 
 */
         rA0 = @(ld)(pA);
         ATL_bcast(pB, rB0);
         @iexp k 0 @(vlen) +
         @iexp i 0 1 +
         @iwhile i < @(vmu)
         rA@(i) = @(ld)(pA+@(k));
            @iexp k @(k) @(vlen) +
            @iexp i @(i) 1 +
         @endiwhile
         @iexp j 0 1 +
         @iwhile j < @(nu)
         ATL_bcast(pB+@(j), rB@(j));
            @iexp j @(j) 1 +
         @endiwhile
         @iexp k 0 0 +
         @iexp j 0 0 +
         @iwhile j < @(nu)
            @iexp i 0 0 +
            @iwhile i < @(vmu)
         rC@(i)@(j) = @(mul)(rA@(i), rB@(j));
            @iif k = 0
               ATL_pfl1W(pC);
            @endiif
            @iif k = 1
               ATL_pfl1W(pC+@(CL));
            @endiif
            @iif k = 2
               ATL_pfl1R(pfA);
            @endiif
            @iif k = 3
               ATL_pfl1R(pfA+@(CL));
            @endiif
            @iif k = 4
               pfA += incPF;
            @endiif
            @iif k = 5
               pA += @(mu);
            @endiif
            @iif k = 6
               pB += @(nu);
            @endiif
               @iexp k @(k) 1 +
               @iexp i @(i) 1 +
            @endiwhile
            @iexp j @(j) 1 +
         @endiwhile
         @iif k < 2
            ATL_pfl1W(pC+@(CL));
         @endiif
         @iif k < 3
            ATL_pfl1R(pfA);
         @endiif
         @iif k < 4
            ATL_pfl1R(pfA+@(CL));
         @endiif
         @iif k < 5
            pfA += incPF;
         @endiif
         @iif k < 6
            pA += @(mu);
         @endiif
         @iif k < 7
            pB += @(nu);
         @endiif
/*
 *       Handle remaining K its with rolled loop (compiler can unroll easily)
 */
         for (k=1; k < ATL_MM_KB; k++)
         {
            rA0 = @(ld)(pA);
            ATL_bcast(pB, rB0);
            @iexp k 0 @(vlen) +
            @iexp i 0 1 +
            @iwhile i < @(vmu)
            rA@(i) = @(ld)(pA+@(k));
               @iexp k @(k) @(vlen) +
               @iexp i @(i) 1 +
            @endiwhile
            @iexp j 0 1 +
            @iwhile j < @(nu)
            ATL_bcast(pB+@(j), rB@(j));
               @iexp j @(j) 1 +
            @endiwhile
            @iexp j 0 0 +
            @iwhile j < @(nu)
               @iexp i 0 0 +
               @iwhile i < @(vmu)
            m0 = @(mul)(rA@(i), rB@(j));
            rC@(i)@(j) = @(add)(m0, rC@(i)@(j));
                  @iexp i @(i) 1 +
               @endiwhile
               @iexp j @(j) 1 +
            @endiwhile
            pA += @(mu);
            pB += @(nu);
         }
         pA -= incAm;
         #ifdef BETA0
         @iexp k 0 0 +
         @iexp j 0 0 +
         @iwhile j < @(nu)
            @iexp i 0 0 +
            @iwhile i < @(vmu)
            @(store)(pC+@(k), rC@(i)@(j));
               @iexp k @(k) @(vlen) +
               @iexp i @(i) 1 +
            @endiwhile
            @iexp j @(j) 1 +
         @endiwhile
         #elif defined(BETAN1)
         @iexp k 0 0 +
         @iexp j 0 0 +
         @iwhile j < @(nu)
            @iexp i 0 0 +
            @iwhile i < @(vmu)
            m0 = @(ld)(pC+@(k));
            rC@(i)@(j) = @(sub)(rC@(i)@(j), m0);
            @(store)(pC+@(k), rC@(i)@(j));
               @iexp k @(k) @(vlen) +
               @iexp i @(i) 1 +
            @endiwhile
            @iexp j @(j) 1 +
         @endiwhile
         #else  /* BETA = 1 */
         @iexp k 0 0 +
         @iexp j 0 0 +
         @iwhile j < @(nu)
            @iexp i 0 0 +
            @iwhile i < @(vmu)
            m0 = @(ld)(pC+@(k));
            rC@(i)@(j) = @(add)(rC@(i)@(j), m0);
            @(store)(pC+@(k), rC@(i)@(j));
               @iexp k @(k) @(vlen) +
               @iexp i @(i) 1 +
            @endiwhile
            @iexp j @(j) 1 +
         @endiwhile
         #endif
         pC += @(mu)*@(nu);
      }
      pA += incAm;
      pB = pB0;
   }
}
@ROUT ATL_mm@(mu)x@(nu)_1_sse ATL_mm@(mu)x@(nu)_1_avx
#if ATL_KBCONST != 0
   #undef incAm
#endif
#undef ATL_KBCONST
@ROUT ATL_mm@(mu)x@(nu)_gvec
#include "atlas_misc.h"
#include "atlas_prefetch.h"
#include "atlas_gnuvec.h"
#ifndef ATL_CSZT
   #define ATL_CSZT const size_t
#endif
#ifndef ATL_MM_KB 
   #ifdef KB
      #if KB == 0
         #define ATL_KBCONST 0
         #define ATL_MM_KB K
      #else
         #define ATL_KBCONST 1
         #define ATL_MM_KB KB
      #endif
   #else
      #define ATL_KBCONST 0
      #define ATL_MM_KB K
   #endif
#endif
typedef TYPE ATL_vec_t __attribute__ ((vector_size (@(vlen))));
void ATL_USERMM
(
   ATL_CSZT nmus,
   ATL_CSZT nnus,
   ATL_CSZT K,
   const TYPE *pAv,   /* @(mu)*KB*nmus-length access-major array of A */
   const TYPE *pB,    /* @(nu)*KB*nnus-length access-major array of B */
   TYPE *pCv,         /* @(mu)*@(nu)*nnus*nmus-length access-major array of C */
   const TYPE *pAn,   /* next block of A */
   const TYPE *pBn,   /* next block of B */
   const TYPE *pCn    /* next block of C */
)
/*
 * Performs a GEMM operation on a @(mu)x@(nu) jammed GEMM with a compile-time
 * constant K-length of ATL_MM_KB.
 */
{
   const ATL_vec_t *pA = (const ATL_vec_t*)pAv;
   ATL_vec_t *pC = (ATL_vec_t*)pCv;
   @declare "   register ATL_vec_t " y n ";"
      @iexp j 0 0 +
      @iwhile j < @(nu)
         rB@(j)
         @iexp i 0 0 +
         @iwhile i < @(mu)
            rC@(i)@(j)
            @iexp i @(i) 1 +
         @endiwhile
         @iexp j @(j) 1 +
      @endiwhile
      @iexp i 0 0 +
      @iwhile i < @(mu)
         rA@(i)
         @iexp i @(i) 1 +
      @endiwhile
   @enddeclare
   const TYPE *pB0 = pB;
   const TYPE *pfA;
   size_t incPF;
   size_t i, j, k;
   #if ATL_KBCONST == 0
      size_t incAm = @(mu)*K;
   #else
      #define incAm (@(mu)*ATL_MM_KB)
   #endif

   if (pAn != pAv)
   {
      pfA = pAn;
      incPF = (nmus*@(mu)*K*sizeof(TYPE)) / (nmus * nnus);
   }
   else if (pCn != pCv)
   {
      pfA = pCn;
      incPF = (nmus*@(mu)*nnus*@(nu)*sizeof(TYPE)) / (nmus * nnus);
   }
   else if (pBn != pB)
   {
      pfA = pBn;
      incPF = (K*nnus*@(nu)*sizeof(TYPE)) / (nmus * nnus);
   }
   else
   {
      pfA = pAv + nmus*@(mu)*(K>>1);
      incPF = (nmus*@(mu)*K*sizeof(TYPE)) / (nmus * nnus);
   }
   for (i=0; i < nmus; i++)
   {
      for (j=0; j < nnus; j++)
      {
/*
 *       Peel K=1 iteration to avoid zero of rCxx and extra add 
 */
         rA0 = *pA;
         ATL_gvbcast(pB, rB0);
         @iexp i 0 1 +
         @iwhile i < @(mu)
         rA@(i) = pA[@(i)];
            @iexp i @(i) 1 +
         @endiwhile
         @iexp j 0 1 +
         @iwhile j < @(nu)
         ATL_gvbcast(pB+@(j), rB@(j));
            @iexp j @(j) 1 +
         @endiwhile
         @iexp k 0 0 +
         @iexp j 0 0 +
         @iwhile j < @(nu)
            @iexp i 0 0 +
            @iwhile i < @(mu)
         rC@(i)@(j) = rA@(i) * rB@(j);
            @iif k = 0
               ATL_pfl1W(pC);
            @endiif
            @iif k = 1
               ATL_pfl1R(pfA);
            @endiif
            @iif k = 2
               pfA += incPF;
            @endiif
            @iif k = 3
               pA += @(mu);
            @endiif
            @iif k = 4
               pB += @(nu);
            @endiif
               @iexp k @(k) 1 +
               @iexp i @(i) 1 +
            @endiwhile
            @iexp j @(j) 1 +
         @endiwhile
         @iif k < 2
               ATL_pfl1R(pfA);
         @endiif
         @iif k < 3
               pfA += incPF;
         @endiif
         @iif k < 4
               pA += @(mu);
         @endiif
         @iif k < 5
               pB += @(nu);
         @endiif
/*
 *       Handle remaining K its with rolled loop (compiler can unroll easily)
 */
         for (k=1; k < ATL_MM_KB; k++)
         {
            rA0 = *pA;
            ATL_gvbcast(pB, rB0);
            @iexp i 0 1 +
            @iwhile i < @(mu)
            rA@(i) = pA[@(i)];
               @iexp i @(i) 1 +
            @endiwhile
            @iexp j 0 1 +
            @iwhile j < @(nu)
            ATL_gvbcast(pB+@(j), rB@(j));
               @iexp j @(j) 1 +
            @endiwhile
            @iexp j 0 0 +
            @iwhile j < @(nu)
               @iexp i 0 0 +
               @iwhile i < @(mu)
            rC@(i)@(j) += rA@(i) * rB@(j);
                  @iexp i @(i) 1 +
               @endiwhile
               @iexp j @(j) 1 +
            @endiwhile
            pA += @(mu);
            pB += @(nu);
         }
         pA -= incAm;
         #ifdef BETA0
         @iexp k 0 0 +
         @iexp j 0 0 +
         @iwhile j < @(nu)
            @iexp i 0 0 +
            @iwhile i < @(mu)
            pC[@(k)] = rC@(i)@(j);
               @iexp k @(k) 1 +
               @iexp i @(i) 1 +
            @endiwhile
            @iexp j @(j) 1 +
         @endiwhile
         #elif defined(BETAN1)
         @iexp k 0 0 +
         @iexp j 0 0 +
         @iwhile j < @(nu)
            @iexp i 0 0 +
            @iwhile i < @(mu)
            pC[@(k)] = rC@(i)@(j) - pC[@(k)];
               @iexp k @(k) 1 +
               @iexp i @(i) 1 +
            @endiwhile
            @iexp j @(j) 1 +
         @endiwhile
         #else  /* BETA = 1 */
         @iexp k 0 0 +
         @iexp j 0 0 +
         @iwhile j < @(nu)
            @iexp i 0 0 +
            @iwhile i < @(mu)
            pC[@(k)] += rC@(i)@(j);
               @iexp k @(k) 1 +
               @iexp i @(i) 1 +
            @endiwhile
            @iexp j @(j) 1 +
         @endiwhile
         #endif
         pC += @(mu)*@(nu);
      }
      pA += incAm;
      pB = pB0;
   }
}
#if ATL_KBCONST != 0
   #undef incAm
#endif
#undef ATL_KBCONST
@ROUT ATL_mm@(mu)x@(nu)_1
#include "atlas_misc.h"
#include "atlas_prefetch.h"
#ifndef ATL_CSZT
   #define ATL_CSZT const size_t
#endif
#ifndef ATL_MM_KB 
   #ifdef KB
      #if KB == 0
         #define ATL_KBCONST 0
         #define ATL_MM_KB K
      #else
         #define ATL_KBCONST 1
         #define ATL_MM_KB KB
      #endif
   #else
      #define ATL_KBCONST 0
      #define ATL_MM_KB K
   #endif
#endif
void ATL_USERMM
(
   ATL_CSZT nmus,
   ATL_CSZT nnus,
   ATL_CSZT K,
   const TYPE *pA,    /* @(mu)*KB*nmus-length access-major array of A */
   const TYPE *pB,    /* @(nu)*KB*nnus-length access-major array of B */
   TYPE *pC,          /* @(mu)*@(nu)*nnus*nmus-length access-major array of C */
   const TYPE *pAn,   /* next block of A */
   const TYPE *pBn,   /* next block of B */
   const TYPE *pCn    /* next block of C */
)
/*
 * Performs a GEMM operation on a @(mu)x@(nu) jammed GEMM with a compile-time
 * constant K-length of ATL_MM_KB.
 */
{
   @declare "   register TYPE " y n ";"
      @iexp j 0 0 +
      @iwhile j < @(nu)
         rB@(j)
         @iexp i 0 0 +
         @iwhile i < @(mu)
            rC@(i)@(j)
            @iexp i @(i) 1 +
         @endiwhile
         @iexp j @(j) 1 +
      @endiwhile
      @iexp i 0 0 +
      @iwhile i < @(mu)
         rA@(i)
         @iexp i @(i) 1 +
      @endiwhile
   @enddeclare
   const TYPE *pB0 = pB;
   const TYPE *pfA;
   size_t incPF;
   size_t i, j, k;
   #if ATL_KBCONST == 0
      size_t incAm = @(mu)*K;
   #else
      #define incAm (@(mu)*ATL_MM_KB)
   #endif

   if (pAn != pA)
   {
      pfA = pAn;
      incPF = (nmus*@(mu)*K*sizeof(TYPE)) / (nmus * nnus);
   }
   else if (pCn != pA)
   {
      pfA = pCn;
      incPF = (nmus*@(mu)*nnus*@(nu)*sizeof(TYPE)) / (nmus * nnus);
   }
   else if (pBn != pB)
   {
      pfA = pBn;
      incPF = (K*nnus*@(nu)*sizeof(TYPE)) / (nmus * nnus);
   }
   else
   {
      pfA = pA + nmus*@(mu)*(K>>1);
      incPF = (nmus*@(mu)*K*sizeof(TYPE)) / (nmus * nnus);
   }
   for (i=0; i < nmus; i++)
   {
      for (j=0; j < nnus; j++)
      {
/*
 *       Peel K=1 iteration to avoid zero of rCxx and extra add 
 */
         rA0 = *pA;
         rB0 = *pB;
         @iexp i 0 1 +
         @iwhile i < @(mu)
         rA@(i) = pA[@(i)];
            @iexp i @(i) 1 +
         @endiwhile
         @iexp j 0 1 +
         @iwhile j < @(nu)
         rB@(j) = pB[@(j)];
            @iexp j @(j) 1 +
         @endiwhile
         @iexp k 0 0 +
         @iexp j 0 0 +
         @iwhile j < @(nu)
            @iexp i 0 0 +
            @iwhile i < @(mu)
         rC@(i)@(j) = rA@(i) * rB@(j);
            @iif k = 0
               ATL_pfl1W(pC);
            @endiif
            @iif k = 1
               ATL_pfl1R(pfA);
            @endiif
            @iif k = 2
               pfA += incPF;
            @endiif
            @iif k = 3
               pA += @(mu);
            @endiif
            @iif k = 4
               pB += @(nu);
            @endiif
               @iexp k @(k) 1 +
               @iexp i @(i) 1 +
            @endiwhile
            @iexp j @(j) 1 +
         @endiwhile
         @iif k < 2
               ATL_pfl1R(pfA);
         @endiif
         @iif k < 3
               pfA += incPF;
         @endiif
         @iif k < 4
               pA += @(mu);
         @endiif
         @iif k < 5
               pB += @(nu);
         @endiif
/*
 *       Handle remaining K its with rolled loop (compiler can unroll easily)
 */
         for (k=1; k < ATL_MM_KB; k++)
         {
            rA0 = *pA;
            rB0 = *pB;
            @iexp i 0 1 +
            @iwhile i < @(mu)
            rA@(i) = pA[@(i)];
               @iexp i @(i) 1 +
            @endiwhile
            @iexp j 0 1 +
            @iwhile j < @(nu)
            rB@(j) = pB[@(j)];
               @iexp j @(j) 1 +
            @endiwhile
            @iexp j 0 0 +
            @iwhile j < @(nu)
               @iexp i 0 0 +
               @iwhile i < @(mu)
            rC@(i)@(j) += rA@(i) * rB@(j);
                  @iexp i @(i) 1 +
               @endiwhile
               @iexp j @(j) 1 +
            @endiwhile
            pA += @(mu);
            pB += @(nu);
         }
         pA -= incAm;
         #ifdef BETA0
         @iexp k 0 0 +
         @iexp j 0 0 +
         @iwhile j < @(nu)
            @iexp i 0 0 +
            @iwhile i < @(mu)
            pC[@(k)] = rC@(i)@(j);
               @iexp k @(k) 1 +
               @iexp i @(i) 1 +
            @endiwhile
            @iexp j @(j) 1 +
         @endiwhile
         #elif defined(BETAN1)
         @iexp k 0 0 +
         @iexp j 0 0 +
         @iwhile j < @(nu)
            @iexp i 0 0 +
            @iwhile i < @(mu)
            pC[@(k)] = rC@(i)@(j) - pC[@(k)];
               @iexp k @(k) 1 +
               @iexp i @(i) 1 +
            @endiwhile
            @iexp j @(j) 1 +
         @endiwhile
         #else  /* BETA = 1 */
         @iexp k 0 0 +
         @iexp j 0 0 +
         @iwhile j < @(nu)
            @iexp i 0 0 +
            @iwhile i < @(mu)
            pC[@(k)] += rC@(i)@(j);
               @iexp k @(k) 1 +
               @iexp i @(i) 1 +
            @endiwhile
            @iexp j @(j) 1 +
         @endiwhile
         #endif
         pC += @(mu)*@(nu);
      }
      pA += incAm;
      pB = pB0;
   }
}
#if ATL_KBCONST != 0
   #undef incAm
#endif
#undef ATL_KBCONST
@ROUT ATL_mm4x2
void ATL_UGEMM
(
   size_t nmus,
   size_t nnus,
   TYPE *pA,    /* mu*KB*nmus-length access-major array of A */
   TYPE *pB,    /* nu*KB*nnus-length access-major array of B */
   TYPE *pC,    /* mu*nu*nnus*nmus-length acces-major array of C */
   TYPE *pf     /* will prefetch next KB*KB elts from this area into L2cache */
)
/*
 * Performs a GEMM operation on a 4x2 jammed GEMM with a compile-time
 * constant K-length of ATL_MM_KB.
 */
{
   register TYPE rA0, rA1, rA2, rA3, rB0, rB1;
   register TYPE rC00, rC10, rC20, rC30,
                 rC01, rC11, rC21, rC31,
                 rC02, rC12, rC22, rC32,
                 rC03, rC13, rC23, rC33;
   TYPE pB0 = pB;
   ATL_CINT incPF = ((size_t)KB*KB)/(nmus*nnus);
   for (i=0; i < nmus; i++)
   {
      for (j=0; j < nnus; j++)
      {
         rA0 = *pA;
         rA1 = pA[1];
         rA2 = pA[2];
         rA3 = pA[3];
         rB0 = *pB;
         rB1 = pB[1];
         rC00 = rA0 * rB0;
         ATL_pfl1W(pC);
         rC10 = rA1 * rB0;
         pA += 4;
         rC20 = rA2 * rB0;
         pB += 2;
         rC30 = rA3 * rB0;
         rC01 = rA0 * rB1;
         rC11 = rA1 * rB1;
         ATL_pfl1R(pf);
         rC21 = rA2 * rB1;
         pf += incPF;
         rC31 = rA3 * rB1;
         for (k=1; k < ATL_MM_KB; k++)
         {
            rA0 = *pA; rA1 = pA[1]; rA2 = pA[2]; rA3 = pA[3];
            rB0 = *pB; rB1 = pB[1];
            rC00 += rA0 * rB0;
            rC10 += rA1 * rB0;
            rC20 += rA2 * rB0;
            rC30 += rA3 * rB0;
            rC01 += rA0 * rB1;
            rC11 += rA1 * rB1;
            rC21 += rA2 * rB1;
            rC31 += rA3 * rB1;
            pA += 4;
            pB += 2;
         }
         pA -= 4*ATL_MM_KB;
         #ifdef BETA0
            pC[0] = rC00;
            pC[1] = rC10;
            pC[2] = rC20;
            pC[3] = rC30;
            pC[4] = rC01;
            pC[5] = rC11;
            pC[6] = rC21;
            pC[7] = rC31;
         #elif defined(BETAN1)
            pC[0] = rC00 - pC[0];
            pC[1] = rC10 - pC[1];
            pC[2] = rC20 - pC[2];
            pC[3] = rC30 - pC[3];
            pC[4] = rC01 - pC[4];
            pC[5] = rC11 - pC[5];
            pC[6] = rC21 - pC[6];
            pC[7] = rC31 - pC[7];
         #else /* BETA=1 */
            pC[0] += rC00;
            pC[1] += rC10;
            pC[2] += rC20;
            pC[3] += rC30;
            pC[4] += rC01;
            pC[5] += rC11;
            pC[6] += rC21;
            pC[7] += rC31;
         #endif
         pC += 8;
      }
      pA += 4*ATL_MM_KB;
      pB = pB0;
   }
}
@ROUT ammmtst
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <string.h>
#include "atlas_misc.h"

#define dumb_seed(iseed_) srand(iseed_)
#ifndef RAND_MAX  /* rather dangerous non-ansi workaround */
   #define RAND_MAX ((unsigned long)(1<<30))
#endif
#define dumb_rand() ( 0.5 - ((double)rand())/((double)RAND_MAX) )

@beginskip
#define Mjoin(pre, nam) my_join(pre, nam)
#define my_join(pre, nam) pre ## nam
#define Mjoin(pre, nam) my_join(pre, nam)
#define my_join(pre, nam) pre ## nam
#define Mstr2(m) # m
#define Mstr(m) Mstr2(m)
#define Mmin(x, y) ( (x) > (y) ? (y) : (x) )

#if defined(sREAL)
   #include "atlas_ssysinfo.h"
   #define PRE 's'
   #define pre s
   #define TYPE float
   #define SCALAR float
   #define ATL_sizeof sizeof(TYPE)
   #define TREAL
   #define SHIFT
   #define EPS 1.0e-7
#elif defined(dREAL)
   #include "atlas_dsysinfo.h"
   #define PRE 'd'
   #define pre d
   #define TYPE double
   #define SCALAR double
   #define ATL_sizeof sizeof(TYPE)
   #define TREAL
   #define SHIFT
   #define EPS 1.0e-16
#elif defined (qREAL)
   #include "atlas_qsysinfo.h"
   #define PRE 'q'
   #define pre q
   #define TYPE long double
   #define SCALAR long double
   #define ATL_sizeof sizeof(TYPE)
   #define TREAL
   #define SHIFT
#elif defined(sCPLX) || defined(cCPLX)
   #include "atlas_csysinfo.h"
   #define PRE 'c'
   #define pre c
   #define TYPE float
   #define ATL_sizeof (sizeof(TYPE)<<1)
   #define SCALAR float *
   #define TCPLX
   #define SHIFT <<1
   #define EPS 1.0e-7
#else
   #include "atlas_zsysinfo.h"
   #define PRE 'z'
   #define pre z
   #define TYPE double
   #define ATL_sizeof (sizeof(TYPE)<<1)
   #define SCALAR double*
   #define TCPLX
   #define SHIFT <<1
   #define EPS 1.0e-16
#endif
@endskip

#define NoTransA 1
#define NoTransB 1

void ATL_USERMM(const size_t nmu, const size_t nnu, const size_t K, 
                const TYPE *A, const TYPE *B, TYPE *C, 
                const TYPE *pAn, const TYPE *pBn, const TYPE *pCn);

void tst_mm(const int M, const int N, const int K, const SCALAR alpha,
            const TYPE *A, const int lda0, const TYPE *B, const int ldb0,
            const SCALAR beta, TYPE *C, const int ldc0)
{
   int i, j, k;
   int lda = lda0 SHIFT, ldb = ldb0 SHIFT, ldc = ldc0 SHIFT;
   register TYPE c0;
   #ifdef TREAL
      for (j=0; j < N; j++)
      {
         for (i=0; i < M; i++)
         {
            c0 = 0.0;
            for (k=0; k < K; k++)
            {
               #if defined(NoTransA) && defined(NoTransB)
                  c0 += A[i+k*lda] * B[j*ldb+k];
               #elif defined(NoTransA) && defined(TransB)
                  c0 += A[i+k*lda] * B[j+k*ldb];
               #elif defined(TransA) && defined(NoTransB)
                  c0 += A[i*lda+k] * B[j*ldb+k];
               #elif defined(TransA) && defined(TransB)
                  c0 += A[i*lda+k] * B[j+k*ldb];
               #endif
            }
            C[i+j*ldc] = beta*C[i+j*ldc] + alpha*c0;
         }
      }
   #else
      register TYPE cr, ci, ar, ai, br, bi;

      for (j=0; j < N; j++)
      {
         for (i=0; i < M; i++)
         {
            cr = ci = 0.0;
            for (k=0; k < K; k++)
            {
               #if defined(NoTransA) && defined(NoTransB)
                  ar = A[2*i+k*lda];
                  ai = A[2*i+k*lda+1];
                  br = B[j*ldb+2*k];
                  bi = B[j*ldb+2*k+1];
               #elif defined(NoTransA) && !defined(NoTransB)
                  ar = A[2*i+k*lda] ;
                  ai = A[2*i+k*lda+1];
                  br = B[2*j+k*ldb];
                  bi = B[2*j+k*ldb+1];
               #elif !defined(NoTransA) && defined(NoTransB)
                  ar = A[i*lda+k*2];
                  ai = A[i*lda+k*2+1];
                  br = B[j*ldb+k*2];
                  bi = B[j*ldb+k*2+1];
               #elif !defined(NoTransA) && !defined(NoTransB)
                  ar = A[i*lda+k*2];
                  ai = A[i*lda+k*2+1];
                  br = B[2*j+k*ldb];
                  bi = B[2*j+k*ldb+1];
               #endif
               #ifdef ConjTransA
                  ai = -ai;
               #endif
               #ifdef ConjTransB
                  bi = -bi;
               #endif
               cr += ar * br - ai * bi;
               ci += ar * bi + ai * br;
            }
/*
 *          Scale by alpha
 */
            ar = *alpha;
            ai = alpha[1];
            br = cr;
            bi = ci;
            cr =  br * ar;
            ci =  bi * ar;
            cr -= bi * ai;
            ci += br * ai;
/*
 *          Scale C by beta
 */
            br = *beta;
            bi = beta[1];
            ar = C[2*i+j*ldc];
            ai = C[2*i+j*ldc+1];
            C[2*i+j*ldc]   = ar*br - ai * bi;
            C[2*i+j*ldc+1] = ai*br + ar * bi;
/*
 *          Store answer back to C
 */
            C[2*i+j*ldc]   += cr;
            C[2*i+j*ldc+1] += ci;

         }
      }
      #if csA == 1 && csB == 1
         free(aa);
         free(bb);
      #endif
   #endif
}
@ifdef ! M
   @define M @40@
@endifdef
@ifdef ! N
   @define N @60@
@endifdef
@ifdef ! K
   @define K @80@
@endifdef

static void ATL_CM2BK
(
   ATL_CINT M,   /* # of rows in A */
   ATL_CINT N,   /* # of cols in A */
   ATL_CINT mu,  /* M unrolling */
   ATL_CINT nu,  /* N unrolling */
   TYPE *A,      /* column-major ldaxN matrix A */
   ATL_CINT lda, /* stride between row elements of A */
   TYPE *b       /* OUTPUT: muxnu blk storage of A */
)
{
   ATL_CINT MMU = ((M+mu-1)/mu)*mu, NNU = ((N+nu-1)/nu)*nu;
   ATL_INT i, j;

   for (i=0; i != MMU; i += mu)
   {
      for (j=0; j != NNU; j += nu)
      {
         ATL_INT iu, ju;
         for (ju=0; ju < nu; ju++)
         {
            for (iu=0; iu < mu; iu++)
            {
               if (i+iu < M && j+ju < N)
                  *b++ = A[(j+ju)*lda+i+iu];
               else
                  *b++ = 0.0;
            }
         }
      }
   }
}

int mmtst(void)
{
   #ifdef TCPLX
      int inca, incb, incc;
      const TYPE one=1.0, none=(-1.0);
      TYPE alpha[2] = {1.0, 0.0};
      TYPE beta[2] = {@(be).0, 0.0};
   #else
      TYPE alpha=1.0;
      TYPE beta=@(be).0;
   #endif
   const TYPE rone=1.0, rnone=(-1.0);
   void *va=NULL, *vb=NULL, *vc=NULL;
   TYPE *C, *D, *A, *B, *a, *b, *c;
   TYPE diff, tmp;
   int i, j, k, n, nerr;
   ATL_CINT M=@(M), N=@(N), K=@(K), lda=M, ldb=K, ldc=M+3;
   ATL_CINT MMU = ((@(M)+@(mu)-1)/@(mu))*@(mu);
   ATL_CINT NNU = ((@(N)+@(nu)-1)/@(nu))*@(nu);
   TYPE ErrBound;

   #ifdef TREAL
      ErrBound = 2.0 * (2.0*K*EPS + Mabs(beta) * EPS) + EPS;
   #else
      tmp = Mabs(*beta) + Mabs(beta[1]);
      ErrBound =  2.0 * (8.0*K*EPS + tmp*EPS) + EPS;
   #endif
/*
 * Allocate normal & access-major storage arrays; access-major arrays are
 * always aligned to ATL_Cachelen
 */
   
   A = malloc(sizeof(TYPE)*lda*K);
   B = malloc(sizeof(TYPE)*ldb*N);
   C = malloc(sizeof(TYPE)*ldc*N);
   D = malloc(sizeof(TYPE)*ldc*N);
   va = malloc(2*sizeof(TYPE)*MMU*K + ATL_Cachelen);
   vb = malloc(2*sizeof(TYPE)*NNU*K + ATL_Cachelen);
   vc = malloc(2*sizeof(TYPE)*MMU*NNU + ATL_Cachelen);
   a = ATL_AlignPtr(va);
   b = ATL_AlignPtr(vb);
   c = ATL_AlignPtr(vc);
/*
 * Fill in column-major arrays and translate to access-major
 */
   assert(A && B && C && a && b && c);
   for (n=lda*K SHIFT, i=0; i < n; i++) A[i] = dumb_rand();
   for (n=ldb*N SHIFT, i=0; i < n; i++) B[i] = dumb_rand();
   for (n=ldc*N SHIFT, i=0; i < n; i++) C[i] = dumb_rand();
   Mjoin(PATL,rm2am_a1_@(mu))(K, M, 1.0, A, lda, a);
   Mjoin(PATL,cm2am_a1_@(nu))(K, N, 1.0, B, ldb, b);
   ATL_CM2BK(M, N, @(mu), @(nu), C, ldc, c);
/*
 * Call test routine, move output to col-major D for comparison with correct C
 */
   ATL_USERMM(MMU/@(mu), NNU/@(nu), K, a, b, c, NULL, NULL, NULL);
   tst_mm(M, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
//   printf("c=%e,%e,%e,%e; %e,%e,%e,%e\n", c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7]);
//   printf("C=%e,%e,%e,%e; %e,%e,%e,%e\n", C[0], C[1], C[2], C[3], C[ldc], C[ldc+1], C[ldc+2], C[ldc+3]);
   Mjoin(PATL,ablk2cmat_@(mu)x@(nu)_a1_b0)(M, N, 1.0, c, 0.0, D, ldc);

   nerr = 0;
   for (j=0; j < N; j++)
   {
      for (i=0; i < M SHIFT; i++)
      {
         k = i + j*(ldc SHIFT);
         diff = C[k] - D[k];
         if (diff < 0.0) diff = -diff;
         if (diff > ErrBound)
         {
            fprintf(stderr, "C(%d,%d) : expected=%e, got=%e, diff=%e\n",
                    i, j, C[k], D[k], diff);
            nerr++;
         }
         else if (D[k] != D[k])   /* test for NaNs in test answer */
         {
            fprintf(stderr, "C(%d,%d) : expected=%e, got=%e\n",
                    i, j, C[k], D[k]);
            nerr++;
         }
      }
   }
   free(A);
   free(B);
   free(C);
   free(va);
   free(vb);
   free(vc);
   free(D);
   return(nerr);
}

main()
{
   int ierr;
   ierr = mmtst();
   if (!ierr) fprintf(stdout, "PASSED TEST\n");
   exit(ierr);
}
@rout ATL_ChooseNB
/*
 * This include file defines teh following:
 *   ATL_MM_MU : CPP macro of selected M unrolling factor
 *   ATL_MM_NU : CPP macro of selected N unrolling factor
 *   ATL_NKBS  : CPP macro of number of generated KBs
 *   ATL_KBS   : ATL_NKBS-length static array of all supported KBs;
 *               array is sorted from largest to smallest
 *   ATL_KItTimByKb : ATL_NKBS-length static double array time to perform one
 *                    k iteration of muxnu jammed loop
 *   ATL_mm_b0_Ks : ATL_NKBS-length function pointer array beta=0
 *   ATL_mm_b1_Ks : ATL_NKBS-length function pointer array beta=1
 *   ATL_mm_bn_Ks : ATL_NKBS-length function pointer array beta=-1
 *   ATL_DivByMU : CPP macro func that cheaply divides arg by MU 
 *   ATL_DivByNU : CPP macro func that cheaply divides arg by MU 
 *   ATL_MulByMU : CPP macro func that cheaply multiplies arg by MU 
 *   ATL_MulByNU : CPP macro func that cheaply multiplies arg by MU 
 */
#include Mstr(Mjoin(Mjoin(atlas_,PRE),mm.h))
int ATL_FindClosestKB(ATL_CINT K)
/*
 * Of the given KBs, find first one >= supplied K using recursive refinement
 * search
 */
{
   int i, imax, imin;
   if (K >= ATL_KBS[ATL_NKBS-1])
      return(ATL_NKBS-1);
   else if (K <= ATL_KBS[0])
      return(0);
   imax = ATL_NKBS-1;
   imin = 0;
   while (imax-imin > 1)
   {
      int k;
      i = (imin + imax) >> 1;
      k = ATL_KBS[i];
      if (k > K)
         imax = i;
      else if (k < K)
         imin = i;
      else if (k == K)
         return(i);
   }
   return((k < K) ? imax : i);
}

int ATL_ChooseNB(ATL_CINT M, ATL_CINT N, ATL_CINT K)
/* 
 * RETURNS: index into ATL_KBS of NB to use to min time for MxNxK gemm
 */
{
   size_t nnus, nmus, nkbs;
   int kb, kr, imin;
   double nmblks, minTime, t0;

   nmus = M + ATL_MM_MU - 1;
   nnus = N + ATL_MM_NU - 1;
   nmus = ATL_DivByMU(nmus);
   nnus = ATL_DivByNU(nnus);
   nmblks = nmus;
   nmblks *= nnus;
   kb = ATL_KBS[0];
   nkbs = K / kb;
   kr = K - nkbs*kb;
   minTime = nmblks * nkbs*ATL_KItTimByKb[0] + 
             ATL_KItTimByKb[ATL_FindClosestKB(kr)];
   imin = 0;
   for (i=1; i < ATL_NKBS; i++)
   {
      double t0;
      kb = ATL_KBS[i];
      nkbs = K / kb;
      kr = K - nkbs*kb;
      t0 = nmblks * nkbs*ATL_KItTimByKb[0] + 
           ATL_KItTimByKb[ATL_FindClosestKB(kr)];
      if (t0 < minTime)
      {
         minTime = t0;
         imin = i;
      }
   }
   return(imin);
}
@ROUT ATL_ngemm

@whiledef al 1 X
#define ATL_A2blk_a@(al) Mjoin(Mjoin(PATL,rm2am_a@(al)_),ATL_MM_MU)
#define ATL_AT2blk_a@(al) Mjoin(Mjoin(PATL,cm2am_a@(al)_),ATL_MM_MU)
#define ATL_B2blk_a@(al) Mjoin(Mjoin(PATL,cm2am_a@(al)_),ATL_MM_NU)
#define ATL_BT2blk_a@(al) Mjoin(Mjoin(PATL,rm2am_a@(al)_),ATL_MM_NU)
@endwhile
@ROUT ATL_cmat2ablk
/*
 *  b <- alpha*C + beta*b,
 *  C is an MxN matrix in column-major storage
 *  b is a CEIL(M/@(mu))*@(mu) x CEIL(N/@(nu))*@(nu) matrix stored in
 *    @(mu)x@(nu)-major storage
 */
void Mjoin(PATL,cmat2ablk_@(mu)x@(nu)_a@(nalp)_b@(nbet))
(
   ATL_CSZT M,          /* number of rows in A */
   ATL_CSZT N,          /* number of columns in A */
   const SCALAR alpha,  /* scalar for C */
   const TYPE *C,       /* matrix to be copied to access-major format */
   ATL_CSZT ldc,        /* stride between row elements */
   const SCALAR beta,   /* scalar for b */
   TYPE *b              /* matrix stored in @(mu)x@(nu)-major order */
)
{
   ATL_CINT m = (M/@(mu))*@(mu), n = (N/@(nu))*@(nu), mr = M-m, nr = N-n;
   ATL_CINT pansz = (nr) ? (n+@(nu))*@(mu) : n*@(mu);
   ATL_CINT incC = ldc*@(nu), incb = @(mu)*@(nu);
   ATL_INT i, j;
   @declare "   const TYPE " n n ";"
      *C0=C
      @define j @1@
      @iwhile j < @(nu)
         @iexp i @(j) -1 +
         *C@(j)=C@(i)+ldc
         @iexp j @(j) 1 +
      @endiwhile
   @enddeclare

   for (j=0; j < n; j += @(nu), b += incb)
   {
      TYPE *p = b;
      for (i=0; i < m; i += @(mu), p += pansz)
      {
   @iexp k 0 0 +
   @iexp j 0 0 +
   @iwhile j < @(nu)
      @iexp i 0 0 +
      @iwhile i < @(mu)
         @mif nalp = "n
            @mif nbet = "X
         p[@(k)] = beta*p[@(k)] - C@(j)[i+@(i)];
            @endmif
         @mif nbet = "1
         p[@(k)] -= C@(j)[i+@(i)];
            @endmif
            @mif nbet = "0
         p[@(k)] = @(malp)C@(j)[i+@(i)];
            @endmif
            @mif nbet = "n
         p[@(k)] = -(p[@(k)] + C@(j)[i+@(i)]);
            @endmif
         @endmif
         @mif nalp ! "n
            @mif nbet = "X
         p[@(k)] = @(malp)C@(j)[i+@(i)] + beta*p[@(k)];
            @endmif
         @mif nbet = "1
         p[@(k)] += @(malp)C@(j)[i+@(i)];
            @endmif
            @mif nbet = "0
         p[@(k)] = @(malp)C@(j)[i+@(i)];
            @endmif
            @mif nbet = "n
         p[@(k)] = @(malp)C@(j)[i+@(i)] - p[@(k)];
            @endmif
         @endmif
         @iexp k @(k) 1 +
      @iexp i @(i) 1 +
      @endiwhile
   @iexp j @(j) 1 +
   @endiwhile
      }
      @mif mu ! "1
      switch(mr)
      {
      @iexp m 1 0 +
      @iwhile m < @(mu)
      case @(m):
         @iexp j 0 0 +
         @iwhile j < @(nu)
            @iexp k @(mu) @(j) *
            @iexp i 0 0 +
            @iwhile i < @(m)
         @mif nalp = "n
            @mif nbet = "X
         p[@(k)] = beta*p[@(k)] - C@(j)[i+@(i)];
            @endmif
            @mif nbet = "1
         p[@(k)] -= C@(j)[i+@(i)];
            @endmif
            @mif nbet = "0
         p[@(k)] = @(malp)C@(j)[i+@(i)];
            @endmif
            @mif nbet = "n
         p[@(k)] = -(p[@(k)] + C@(j)[i+@(i)]);
            @endmif
         @endmif
         @mif nalp ! "n
            @mif nbet = "X
         p[@(k)] = @(malp)C@(j)[i+@(i)] + beta*p[@(k)];
            @endmif
            @mif nbet = "1
         p[@(k)] += @(malp)C@(j)[i+@(i)];
            @endmif
            @mif nbet = "0
         p[@(k)] = @(malp)C@(j)[i+@(i)];
            @endmif
            @mif nbet = "n
         p[@(k)] = @(malp)C@(j)[i+@(i)] - p[@(k)];
            @endmif
         @endmif
               @iexp k @(k) 1 + 
            @iexp i @(i) 1 +
            @endiwhile
         @iexp j @(j) 1 +
         @endiwhile
         break;
      @iexp m @(m) 1 +
      @endiwhile
      default:;
      }
      @endmif
   @iexp j 0 0 +
   @iwhile j < @(nu)
      C@(j) += incC;
      @iexp j @(j) 1 +
   @endiwhile
   }
   @mif nu ! "1
   switch(nr)
   {
   @iexp n 1 0 +
   @iwhile n < @(nu)
   case @(n):
      for (i=0; i < m; i += @(mu), b += pansz)
      {
      @iexp k 0 0 +
      @iexp j 0 0 +
      @iwhile j < @(n)
         @iexp i 0 0 +
         @iwhile i < @(mu)
            @mif nbet = "X
         b[@(k)] = @(malp)C@(j)[i+@(i)] + beta*b[@(k)];
            @endmif
            @mif nbet = "1
         b[@(k)] += @(malp)C@(j)[i+@(i)];
            @endmif
            @mif nbet = "n
         b[@(k)] = @(malp)C@(j)[i+@(i)] - b[@(k)];
            @endmif
            @mif nbet = "0
         b[@(k)] = @(malp)C@(j)[i+@(i)];
            @endmif
            @iexp k @(k) 1 +
         @iexp i @(i) 1 +
         @endiwhile
      @iexp j @(j) 1 +
      @endiwhile
      }
      @mif mu ! "1
      switch(mr)
      {
      @iexp m 1 0 +
      @iwhile m < @(mu)
      case @(m):
         @iexp j 0 0 +
         @iwhile j < @(n)
            @iexp k @(mu) @(j) *
            @iexp i 0 0 +
            @iwhile i < @(m)
               @mif nbet = "n
         b[@(k)] = @(malp)C@(j)[i+@(i)] - b[@(k)];
               @endmif
               @mif nbet = "X
         b[@(k)] = @(malp)C@(j)[i+@(i)] + beta*b[@(k)];
               @endmif
               @mif nbet = "1
         b[@(k)] += @(malp)C@(j)[i+@(i)];
               @endmif
               @mif nbet = "0
         b[@(k)] = @(malp)C@(j)[i+@(i)];
               @endmif
               @iexp k @(k) 1 + 
            @iexp i @(i) 1 +
            @endiwhile
         @iexp j @(j) 1 +
         @endiwhile
         b += incb;
         break;
      @iexp m @(m) 1 +
      @endiwhile
      default:;
      }
      @endmif
      break;
   @iexp n @(n) 1 +
   @endiwhile
   default:;
   }
   @endmif
}
