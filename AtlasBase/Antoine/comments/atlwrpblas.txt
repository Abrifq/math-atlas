@skip
@skip Comments of the ATLAS BLAS F77 wrappers                          AP00
@skip
@skip Last modification : 03/24/00
@skip
@skip      C      V                      D                             V12345678
@skip
@define F77WRAP_NOTES          @@(ATLAS_WRP_COMMENT) rout=ATL_F77wrap_notes@
@skip
@rout ATL_F77wrap_notes
@extract @(NOTES)
 *
 * This routine is an internal wrapper function written in  C  called by
 * the corresponding Fortran 77 user callable subroutine.  It calls  the
 * appropriate ATLAS routine performing the actual computation.
 *
 * This wrapper layer resolves the following portability issues:
 *
 *    - the routines' name sheme translation imposed by the  Fortran / C
 *      compilers of your target computer,
 *    - the translation of Fortran characters into the ATLAS  correspon-
 *      ding C enumerated type (in cooperation with the Fortan user cal-
 *      lable subroutine),
 *    - the translation of Fortran integers into the proper C correspon-
 *      ding native type;
 *
 * and the following ease-of-programming issue:
 *
 *    - a pointer to the the first entry of vector operands (when appli-
 *      cable) is passed to the  ATLAS computational routine even if the
 *      corresponding input increment value is negative. This allows for
 *      a more natural expression in  C  of the computation performed by
 *      these ATLAS functions. 
@skip
@skip
@rout ATL_F77wrap_rotg
/*
@extract @(PURPOSE)
 *
 * ATL_F77wrap_rotg constructs a Givens plane rotation.
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_rotmg
/*
@extract @(PURPOSE)
 *
 * ATL_F77wrap_rotmg constructs the modified-Givens plane rotation.
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_nrm2
/*
@extract @(PURPOSE)
 *
 * ATL_F77wrap_nrm2 computes the 2-norm of an n-vector x.
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_asum
/*
@extract @(PURPOSE)
 *
 * ATL_F77wrap_asum  computes  the sum of absolute values of the entries
 * of an n-vector x. 
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_amax
/*
@extract @(PURPOSE)
 *
 * ATL_F77wrap_amax  returns  the index  in  an n-vector x of the  first
 * element having maximum absolute value. 
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_scal
/*
@extract @(PURPOSE)
 *
 * ATL_F77wrap_scal scales an n-vector x by a scalar alpha.
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_rscal
/*
@extract @(PURPOSE)
 *
 * ATL_F77wrap_rscal scales an n-vector x by a real scalar alpha.
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_axpy
/*
@extract @(PURPOSE)
 *
 * ATL_F77wrap_axpy performs the following operation:
 *
 *    y := y + alpha * x,
 *
 * where alpha is a scalar and x and y are two n-vectors.
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_copy
/*
@extract @(PURPOSE)
 *
 * ATL_F77wrap_copy copies an n-vector x into an n-vector y.
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_swap
/*
@extract @(PURPOSE)
 *
 * ATL_F77wrap_swap swaps the entries of two n-vectors x and y.
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_rot
/*
@extract @(PURPOSE)
 *
 * ATL_F77wrap_rot applies a plane rotation to two n-vectors x and y.
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_rotm
/*
@extract @(PURPOSE)
 *
 * ATL_F77wrap_rotm  applies a modified-Givens rotation to two n-vectors
 * x and y.
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_dot ATL_F77wrap_dotc ATL_F77wrap_dotu
/*
@extract @(PURPOSE)
 *
@rout ATL_F77wrap_dot
 * ATL_F77wrap_dot computes the dot-product of two n-vectors x and y.
@rout ATL_F77wrap_dotc
 * ATL_F77wrap_dotc computes the dot-product of two n-vectors x and y.
@rout ATL_F77wrap_dotu
 * ATL_F77wrap_dotu computes the dot-product of two n-vectors x and y.
@rout ATL_F77wrap_dot ATL_F77wrap_dotc ATL_F77wrap_dotu
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_dsdot
/*
@extract @(PURPOSE)
 *
 * ATL_F77wrap_dsdot  computes  the dot product x^T * y of two n-vectors
 * x and y.  The  result is  internally computed using  double precision
 * arithmetic.
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_sdsdot
/*
@extract @(PURPOSE)
 *
 * ATL_F77wrap_sdsdot computes the dot product b + x^T * y of two n vec-
 * tors x and y.  The result is internally computed using  double preci-
 * sion arithmetic and casted to a  single precision  scalar just before 
 * being returned.
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_gemv ATL_F77wrap_gbmv
/*
@extract @(PURPOSE)
 *
@rout ATL_F77wrap_gemv
 * ATL_F77wrap_gemv performs one of the matrix-vector operations
@rout ATL_F77wrap_gbmv
 * ATL_F77wrap_gbmv performs one of the matrix-vector operations
@rout ATL_F77wrap_gemv ATL_F77wrap_gbmv
 *
 *    y := alpha*A*x + beta*y,   or   y := alpha*A'*x + beta*y,   or
 *
 *    y := alpha*conjg( A' )*x + beta*y,
 *
@rout ATL_F77wrap_gemv
 * where  alpha and beta are scalars, x and y are vectors and  A is an m
 * by n matrix.
@rout ATL_F77wrap_gbmv
 * where  alpha and beta are scalars, x and y are vectors and  A is an m
 * by n band matrix, with kl sub-diagonals and ku super-diagonals.
@rout ATL_F77wrap_gemv ATL_F77wrap_gbmv
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_symv ATL_F77wrap_sbmv ATL_F77wrap_spmv
/*
@extract @(PURPOSE)
 *
@rout ATL_F77wrap_symv
 * ATL_F77wrap_symv performs the matrix-vector operation
@rout ATL_F77wrap_sbmv
 * ATL_F77wrap_sbmv performs the matrix-vector operation
@rout ATL_F77wrap_spmv
 * ATL_F77wrap_spmv performs the matrix-vector operation
@rout ATL_F77wrap_symv ATL_F77wrap_sbmv ATL_F77wrap_spmv
 *
 *    y := alpha * A * x + beta * y,
 *
@rout ATL_F77wrap_symv
 * where alpha and beta are scalars, x and y are n-element vectors and A
 * is an n by n symmetric matrix.
@rout ATL_F77wrap_sbmv
 * where alpha and beta are scalars, x and y are n-element vectors and A
 * is an n by n symmetric band matrix, with k super-diagonals.
@rout ATL_F77wrap_spmv
 * where alpha and beta are scalars, x and y are n-element vectors and A
 * is an n by n symmetric matrix, supplied in packed form.
@rout ATL_F77wrap_symv ATL_F77wrap_sbmv ATL_F77wrap_spmv
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_hemv ATL_F77wrap_hbmv ATL_F77wrap_hpmv
/*
@extract @(PURPOSE)
 *
@rout ATL_F77wrap_hemv
 * ATL_F77wrap_hemv performs the matrix-vector operation
@rout ATL_F77wrap_hbmv
 * ATL_F77wrap_hbmv performs the matrix-vector operation
@rout ATL_F77wrap_hpmv
 * ATL_F77wrap_hpmv performs the matrix-vector operation
@rout ATL_F77wrap_hemv ATL_F77wrap_hbmv ATL_F77wrap_hpmv
 *
 *    y := alpha * A * x + beta * y,
 *
@rout ATL_F77wrap_hemv
 * where alpha and beta are scalars, x and y are n-element vectors and A
 * is an n by n Hermitian matrix.
@rout ATL_F77wrap_hbmv
 * where alpha and beta are scalars, x and y are n-element vectors and A
 * is an n by n Hermitian band matrix, with k super-diagonals.
@rout ATL_F77wrap_hpmv
 * where alpha and beta are scalars, x and y are n-element vectors and A
 * is an n by n Hermitian matrix, supplied in packed form.
@rout ATL_F77wrap_hemv ATL_F77wrap_hbmv ATL_F77wrap_hpmv
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_trmv ATL_F77wrap_tbmv ATL_F77wrap_tpmv
/*
@extract @(PURPOSE)
 *
@rout ATL_F77wrap_trmv
 * ATL_F77wrap_trmv performs one of the matrix-vector operations
@rout ATL_F77wrap_tbmv
 * ATL_F77wrap_tbmv performs one of the matrix-vector operations
@rout ATL_F77wrap_tpmv
 * ATL_F77wrap_tpmv performs one of the matrix-vector operations
@rout ATL_F77wrap_trmv ATL_F77wrap_tbmv ATL_F77wrap_tpmv
 *
 *    x := A*x,   or   x := A'*x,   or   x := conjg( A' )*x,
 *
@rout ATL_F77wrap_trmv
 * where x is an n-element vector and  A is an n by n unit, or non-unit,
 * upper or lower triangular matrix.
@rout ATL_F77wrap_tbmv
 * where x is an n-element vector and  A is an n by n unit, or non-unit,
 * upper or lower triangular band matrix, with ( k + 1 ) diagonals.
@rout ATL_F77wrap_tpmv
 * where x is an n-element vector and  A is an n by n unit, or non-unit,
 * upper or lower triangular matrix, supplied in packed form.
@rout ATL_F77wrap_trmv ATL_F77wrap_tbmv ATL_F77wrap_tpmv
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_trsv ATL_F77wrap_tbsv ATL_F77wrap_tpsv
/*
@extract @(PURPOSE)
 *
@rout ATL_F77wrap_trsv
 * ATL_F77wrap_trsv solves one of the systems of equations
@rout ATL_F77wrap_tbsv
 * ATL_F77wrap_tbsv solves one of the systems of equations
@rout ATL_F77wrap_tpsv
 * ATL_F77wrap_tpsv solves one of the systems of equations
@rout ATL_F77wrap_trsv ATL_F77wrap_tbsv ATL_F77wrap_tpsv
 *
 *    A*x = b,   or   A'*x = b,   or   conjg( A' )*x = b,
 *
@rout ATL_F77wrap_trsv
 * where b and x are n-element vectors and  A is an n by n unit, or non-
 * unit, upper or lower triangular matrix.
@rout ATL_F77wrap_tbsv
 * where b and x are n-element vectors and  A is an n by n unit, or non-
 * unit, upper or lower triangular band matrix, with (k+1) diagonals.
@rout ATL_F77wrap_tpsv
 * where b and x are n-element vectors and  A is an n by n unit, or non-
 * unit, upper or lower triangular matrix, supplied in packed form.
@rout ATL_F77wrap_trsv ATL_F77wrap_tbsv ATL_F77wrap_tpsv
 *
 * No test for  singularity  or  near-singularity  is included  in  this
 * routine. Such tests must be performed before calling this routine.
 * 
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_ger ATL_F77wrap_gerc ATL_F77wrap_geru
/*
@extract @(PURPOSE)
 *
@rout ATL_F77wrap_ger
 * ATL_F77wrap_ger performs the rank 1 operation
 *
 *    A := alpha * x * y' + A,
@rout ATL_F77wrap_geru
 * ATL_F77wrap_geru performs the rank 1 operation
 *
 *    A := alpha * x * y' + A,
@rout ATL_F77wrap_gerc
 * ATL_F77wrap_gerc performs the rank 1 operation
 *
 *    A := alpha * x * conjg( y' ) + A,
@rout ATL_F77wrap_ger ATL_F77wrap_gerc ATL_F77wrap_geru
 *
 * where alpha is a scalar,  x is an m-element vector, y is an n-element
 * vector and A is an m by n matrix.
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_syr ATL_F77wrap_spr ATL_F77wrap_her ATL_F77wrap_hpr
/*
@extract @(PURPOSE)
 *
@rout ATL_F77wrap_syr
 * ATL_F77wrap_syr performs the symmetric rank 1 operation
@rout ATL_F77wrap_spr
 * ATL_F77wrap_spr performs the symmetric rank 1 operation
@rout ATL_F77wrap_her
 * ATL_F77wrap_her performs the Hermitian rank 1 operation
@rout ATL_F77wrap_hpr
 * ATL_F77wrap_hpr performs the Hermitian rank 1 operation
@rout ATL_F77wrap_syr ATL_F77wrap_spr ATL_F77wrap_her ATL_F77wrap_hpr
 *
@rout ATL_F77wrap_syr ATL_F77wrap_spr
 *    A := alpha * x * x' + A,
@rout ATL_F77wrap_her ATL_F77wrap_hpr
 *    A := alpha * x * conjg( x' ) + A,
@rout ATL_F77wrap_syr ATL_F77wrap_spr ATL_F77wrap_her ATL_F77wrap_hpr
 *
@rout F77wrap_syr
 * where  alpha is a scalar, x is an n-element vector and A is an n by n
 * symmetric matrix.
@rout F77wrap_her
 * where  alpha is a real scalar, x is an n-element vector and A is an n
 * by n Hermitian matrix.
@rout F77wrap_spr
 * where  alpha is a scalar, x is an n-element vector and A is an n by n
 * symmetric matrix, supplied in packed form.
@rout F77wrap_hpr
 * where  alpha is a real scalar, x is an n-element vector and A is an n
 * by n Hermitian matrix, supplied in packed form.
@rout ATL_F77wrap_syr ATL_F77wrap_spr ATL_F77wrap_her ATL_F77wrap_hpr
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_syr2 ATL_F77wrap_spr2 ATL_F77wrap_her2 ATL_F77wrap_hpr2
/*
@extract @(PURPOSE)
 *
@rout ATL_F77wrap_syr2
 * ATL_F77wrap_syr2 performs the symmetric rank 2 operation
@rout ATL_F77wrap_spr2
 * ATL_F77wrap_spr2 performs the symmetric rank 2 operation
@rout ATL_F77wrap_her2
 * ATL_F77wrap_her2 performs the Hermitian rank 2 operation
@rout ATL_F77wrap_hpr2
 * ATL_F77wrap_hpr2 performs the Hermitian rank 2 operation
@rout ATL_F77wrap_syr2 ATL_F77wrap_spr2 ATL_F77wrap_her2 ATL_F77wrap_hpr2
 *
@rout ATL_F77wrap_syr2 ATL_F77wrap_spr2
 *    A := alpha * x * y' + alpha * y * x' + A,
@rout ATL_F77wrap_her2 ATL_F77wrap_hpr2
 *    A := alpha * x * conjg(y') + conjg(alpha) * y * conjg(x') + A,
@rout ATL_F77wrap_syr2 ATL_F77wrap_spr2 ATL_F77wrap_her2 ATL_F77wrap_hpr2
 *
@rout ATL_F77wrap_syr2
 * where  alpha is a scalar, x and y are n-element vectors and A is an n
 * by n symmetric matrix.
@rout ATL_F77wrap_spr2
 * where  alpha is a scalar, x and y are n-element vectors and A is an n
 * by n symmetric matrix, supplied in packed form.
@rout ATL_F77wrap_her2
 * where  alpha is a scalar, x and y are n-element vectors and A is an n
 * by n Hermitian matrix.
@rout ATL_F77wrap_hpr2
 * where  alpha is a scalar, x and y are n-element vectors and A is an n
 * by n Hermitian matrix, supplied in packed form.
@rout ATL_F77wrap_syr2 ATL_F77wrap_spr2 ATL_F77wrap_her2 ATL_F77wrap_hpr2
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_gemm
/*
@extract @(PURPOSE)
 *
 * ATL_F77wrap_gemm performs one of the matrix-matrix operations
 *
 *    C := alpha * op( A ) * op( B ) + beta * C,
 *
 * where op( X ) is one of
 *
 *    op( X ) = X   or   op( X ) = X'   or   op( X ) = conjg( X' ).
 *
 * Alpha and beta are scalars, and A, B and C are matrices, with op( A )
 * an m by k matrix,  op( B )  a  k by n matrix and  C an m by n matrix.        
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_symm ATL_F77wrap_hemm
/*
@extract @(PURPOSE)
 *
@rout ATL_F77wrap_symm
 * ATL_F77wrap_symm performs one of the matrix-matrix operations
@rout ATL_F77wrap_hemm
 * ATL_F77wrap_hemm performs one of the matrix-matrix operations
@rout ATL_F77wrap_symm ATL_F77wrap_hemm
 *
 *    C := alpha * A * B + beta * C,
 *
 * or
 *
 *    C := alpha * B * A + beta * C,
 *
@rout ATL_F77wrap_symm
 * where alpha and beta are scalars,  A is a symmetric matrix and B and
 * C are m by n matrices.
@rout ATL_F77wrap_hemm
 * where alpha and beta are scalars,  A is a Hermitian matrix and B and
 * C are m by n matrices.
@rout ATL_F77wrap_symm ATL_F77wrap_hemm
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_syrk ATL_F77wrap_herk
/*
@extract @(PURPOSE)
 *
@rout ATL_F77wrap_syrk
 * ATL_F77wrap_syrk performs one of the symmetric rank k operations
@rout ATL_F77wrap_herk
 * ATL_F77wrap_herk performs one of the Hermitian rank k operations
@rout ATL_F77wrap_syrk ATL_F77wrap_herk
 *
@rout ATL_F77wrap_syrk
 *    C := alpha * A * A' + beta * C,
@rout ATL_F77wrap_herk
 *    C := alpha * A * conjg( A' ) + beta * C,
@rout ATL_F77wrap_syrk ATL_F77wrap_herk
 *
 * or
 *
@rout ATL_F77wrap_syrk
 *    C := alpha * A' * A + beta * C,
@rout ATL_F77wrap_herk
 *    C := alpha * conjg( A' ) * A + beta * C,
@rout ATL_F77wrap_syrk ATL_F77wrap_herk
 *
@rout ATL_F77wrap_syrk
 * where alpha and beta are scalars, C is an n by n symmetric matrix and
 * A is an  n by k  matrix in the first case and a  k by n matrix in the
 * second case.
@rout ATL_F77wrap_herk
 * where alpha and beta are  real  scalars, C is an n by n Hermitian ma-
 * trix and  A is an n by k matrix in the first case and a k by n matrix
 * in the second case.
@rout ATL_F77wrap_syrk ATL_F77wrap_herk
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_syr2k ATL_F77wrap_her2k
/*
@extract @(PURPOSE)
 *
@rout ATL_F77wrap_syr2k
 * ATL_F77wrap_syr2k performs one of the symmetric rank 2k operations
@rout ATL_F77wrap_her2k
 * ATL_F77wrap_her2k performs one of the Hermitian rank 2k operations
@rout ATL_F77wrap_syr2k ATL_F77wrap_her2k
 *
@rout ATL_F77wrap_syr2k
 *    C := alpha * A * B' + alpha * B * A' + beta * C,
@rout ATL_F77wrap_her2k
 *    C := alpha * A * conjg( B )' + conjg( alpha ) * B * conjg( A )' +
 *         beta * C,
@rout ATL_F77wrap_syr2k ATL_F77wrap_her2k
 *
 * or
 *
@rout ATL_F77wrap_syr2k
 *    C := alpha * A' * B + alpha * B' * A + beta * C,
@rout ATL_F77wrap_her2k
 *    C := alpha * conjg( A' ) * B + conjg( alpha ) * conjg( B' ) * A +
 *         beta * C,
@rout ATL_F77wrap_syr2k ATL_F77wrap_her2k
 *
@rout ATL_F77wrap_syr2k
 * where alpha and beta are scalars, C is an n by n symmetric matrix and
 * A and B are n by k matrices in the first case and k by n  matrices in
 * the second case.
@rout ATL_F77wrap_her2k
 * where  alpha  and  beta are scalars with  beta  real,  C is an n by n
 * Hermitian matrix and  A  and  B are n by k matrices in the first case
 * and k by n matrices in the second case.
@rout ATL_F77wrap_syr2k ATL_F77wrap_her2k
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_trmm
/*
@extract @(PURPOSE)
 *
 * ATL_F77wrap_trmm  performs one of the matrix-matrix operations
 *
 *    B := alpha * op( A ) * B,   or    B := alpha * B * op( A ),
 *
 * where alpha is a scalar, B is an m by n matrix, A is a unit,  or non-
 * unit, upper or lower triangular matrix and op( X ) is one of
 *
 *    op( X ) = X   or   op( X ) = X'   or   op( X ) = conjg( X' ).
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_F77wrap_trsm
/*
@extract @(PURPOSE)
 *
 * ATL_F77wrap_trsm solves one of the matrix equations
 *
 *    op( A ) * X = alpha * B,   or  X * op( A ) = alpha * B,
 *
 * where alpha is a scalar, X and B are m by n matrices, A is a unit, or
 * non-unit, upper or lower triangular matrix and op( A ) is one of
 *
 *    op( A ) = A   or   op( A ) = A'   or   op( A ) = conjg( A' ).
 *
 * The matrix X is overwritten on B.
 *
@extract @(F77WRAP_NOTES)
 *
@extract @(LINE)
 */
@skip
@skip
@rout !
@skip
@skip
@undef F77WRAP_NOTES
@skip
@skip
