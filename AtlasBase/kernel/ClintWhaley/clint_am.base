@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S
   @define mu @4@
   @define nu @4@
@ROUT ATL_dammm3x3x256_sse2.S
   @define mu @6@
   @define nu @3@
@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S ATL_dammm3x3x256_sse2.S
@extract -b @(topd)/gen.inc what=crsetup
@extract -b @(topd)/cw.inc lang=c -define cwdate 2012
#include "atlas_asm.h"
#define movapd movaps
#define nmu     %rdi
#define nnu     %rsi
#define nnu0    %r10
@ROUT ATL_dammm2x4x1_sse2.S
#define KK      %rdx
#define KK0     %r11
#define pA      %rcx
#define pB      %rax
#define pC      %r9
#define pf      %rbp
#define pB0     %r12
#define incPF   %rbx
#define pA0     %r13
#define incAm   %r14
#define pfB     %r15
#define FSIZE 6*8
@ROUT ATL_dammm2x4x256_sse2.S ATL_dammm3x3x256_sse2.S
#define pA      %rcx
#define pB      %rax
#define pC      %r9
#define pf      %rbp
#define pB0     %r12
#define incPF   %rbx
#define pfB     %rdx
#define incAm   %r11 
@ROUT ATL_dammm3x3x256_sse2.S

#define rA0     %xmm0
#define rA1     %xmm1
#define rA2     %xmm2
#define rB0     %xmm3
#define rB1     %xmm4
#define rB2     %xmm5
#define rC00    %xmm6
#define rC10    %xmm7
#define rC20    %xmm8
#define rC01    %xmm9
#define rC11    %xmm10
#define rC21    %xmm11
#define rC02    %xmm12
#define rC12    %xmm13
#define rC22    %xmm14
#define rm0     %xmm15
#define FSIZE 4*8
@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S
#define FSIZE 4*8

#define rA0     %xmm0
#define rA1     %xmm1
#define rB0     %xmm2
#define rB1     %xmm3
#define rB2     %xmm4
#define rB3     %xmm5
#define rC00    %xmm6
#define rC10    %xmm7
#define rC01    %xmm8
#define rC11    %xmm9
#define rC02    %xmm10
#define rC12    %xmm11
#define rC03    %xmm12
#define rC13    %xmm13
#define rm0     %xmm14
@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S ATL_dammm3x3x256_sse2.S
#ifndef pref
   #define pref prefetcht1
#endif
#ifndef prefB
   #define prefB prefetcht1
#endif
#ifndef prefC
   #ifdef ATL_3DNow
      #define prefC prefetchw
   #else
      #define prefC prefetcht0
   #endif
#endif
#ifdef BETAN1
   #define BETCOP subpd
#else
   #define BETCOP addpd
#endif
/*
                    rdi      rsi    rdx        rcx         r8        r9  
void ATL_USERMM(SZT nmu, SZT nnu, SZT K, CTYPE *pA, CTYPE *pB, TYPE *pC, 
                  8(%rsp)    16(%rsp)     24(%rsp)   
                CTYPE *pAn, CTYPE *pBn, CTYPE *pCn);
 */
.text
.global ATL_asmdecor(ATL_USERMM)
ALIGN16
ATL_asmdecor(ATL_USERMM):
/*
 * Save callee-saved iregs
 */
   sub $FSIZE, %rsp
   movq    %rbp, 0(%rsp)
   movq    %rbx, 8(%rsp)
   movq    %r12, 16(%rsp)
@ROUT ATL_dammm2x4x1_sse2.S 
   movq    %r13, 24(%rsp)
   movq    %r14, 32(%rsp)
   movq    %r15, 40(%rsp)
@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S ATL_dammm3x3x256_sse2.S
/*
 * Load paramaters
 */
   movq %r8, pB
   mov nnu, nnu0
   movq FSIZE+16(%rsp), pf      /* pf = pBn */
   movq FSIZE+8(%rsp), pfB      /* pfB = pAn */
   cmp pf, pB                   /* if (pBn == pB) */
   CMOVE pfB, pf                /* if (pBn == pB) pfB = pAn */
   CMOVEq FSIZE+24(%rsp), pfB   /* if (pbN == pB) pfB = pCn */
@beginskip
   cmp $0, pf
   je BADPFB
   cmp pf, pB
   je BADPFB
.local PFSETUP
PFSETUP:
   movq FSIZE+8(%rsp), pfB
   cmp $0, pfB
   je BADPF_2
   cmp pf, pA
   je BADPF_2
PFSETUP_2:
@endskip
   mov $8*@(mu)*@(nu), incPF
@ROUT ATL_dammm2x4x256_sse2.S ATL_dammm3x3x256_sse2.S
/*
 * Extend range of small operands by starting at -128
 */
@ROUT ATL_dammm3x3x256_sse2.S `         movddup (pB), rC00`
   sub $-128, pA
   sub $-128, pB
   mov $KB*@(mu)*8, incAm           /* incAm = KB*MU*size */
@ROUT ATL_dammm3x3x256_sse2.S
   sub $-128, pf
   sub $-128, pC
   sub $-128, pfB
@ROUT ATL_dammm2x4x1_sse2.S
   mov KK, incAm                /* incAm = K */
   shl $5, incAm                /* incAm = K*MU*size = K*4*8 = K*32 = K << 5 */
   mov KK, KK0
   mov pA, pA0
@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S ATL_dammm3x3x256_sse2.S
   movq pB, pB0

ALIGN8
   .local MNLOOP
   MNLOOP:
/*
 *       Peel first iteration of K-loop to handle init of C to 0
 */
@ROUT ATL_dammm3x3x256_sse2.S
         movapd  -128(pA), rA0
         movapd rC00, rC10
         mulpd rA0, rC00
         movapd rC10, rC20
         movapd  -112(pA), rA1
         mulpd rA1, rC10
         movapd  -96(pA), rA2
         mulpd rA2, rC20
         movddup -120(pB), rC01
         movapd rC01, rC11
         mulpd rA0, rC01
         movapd rC11, rC21
         mulpd rA1, rC11
         mulpd rA2, rC21
         movddup -112(pB), rC02
         movapd rC02, rC12
         mulpd rA0, rC02
         #if KB > 1
            movddup -104(pB), rB0
         #endif
         movapd rC12, rC22
         mulpd rA1, rC12
            prefC -128(pC)
         mulpd rA2, rC22

ALIGN8
@iexp ao -80 0 +
@iexp bo -96 0 +
@iexp k 1 0 +
@iwhile k < 256
         #if KB > @(k)
   @iexp k @(k) 1 +
            movapd @(ao)(pA), rA0
   @iexp ao @(ao) 16 +
            movapd rA0, rm0
            mulpd rB0, rm0
            addpd rm0, rC00
            movapd @(ao)(pA), rA1
   @iexp ao @(ao) 16 +
            movapd rA1, rm0
            mulpd rB0, rm0
            addpd rm0, rC10
            movapd @(ao)(pA), rA2
   @iexp ao @(ao) 16 +
            movapd rA2, rm0
            mulpd rA2, rB0
            addpd rB0, rC20
   
            movddup @(bo)(pB), rB1
   @iexp bo @(bo) 8 +
            movapd rA0, rm0
            mulpd rB1, rm0
            addpd rm0, rC01
            movddup @(bo)(pB), rB2
   @iexp bo @(bo) 8 +
            movapd rA1, rm0
            mulpd rB1, rm0
            addpd rm0, rC11
            #if KB > @(k)
               movddup @(bo)(pB), rB0
   @iexp bo @(bo) 8 +
            #endif
            mulpd rA2, rB1
            addpd rB1, rC21
   
   @iif k = 2
            prefC -64(pC)
   @endiif
   @iif k = 3
               pref -128(pf)
   @endiif
   @iif k = 4
               prefB -128(pfB)
   @endiif
            mulpd rB2, rA0
            addpd rA0, rC02
   @iif k = 3
@skip               pref 64-128(pf)
   @endiif
            mulpd rB2, rA1
            addpd rA1, rC12
   @iif k = 4
               prefB (pfB)
   @endiif
   @iif k = 3
               pref 128(pf)
   @endiif
            mulpd rB2, rA2
            addpd rA2, rC22
   @iif k = 2
            prefC (pC)
   @endiif
   @iif k = 3
               add incPF, pf
   @endiif
   @iif k = 4
               add incPF, pfB
   @endiif
         #endif
@endiwhile
/*
 *       Bring in C if necessary, and store out final answer
 */
         add $KB*@(nu)*8, pB
         #if defined(BETA1) || defined(BETAN1)
            BETCOP -128(pC), rC00
            movapd rC00, -128(pC)
               movddup -128(pB), rC00
            BETCOP 16-128(pC), rC10
            movapd rC10, 16-128(pC)
            BETCOP 32-128(pC), rC20
            movapd rC20, 32-128(pC)
            BETCOP 48-128(pC), rC01
            movapd rC01, 48-128(pC)
            BETCOP 64-128(pC), rC11
            movapd rC11, 64-128(pC)
            BETCOP 80-128(pC), rC21
            movapd rC21, 80-128(pC)
            BETCOP 96-128(pC), rC02
            movapd rC02, 96-128(pC)
            BETCOP 112-128(pC), rC12
            movapd rC12, 112-128(pC)
            BETCOP (pC), rC22
            movapd rC22, (pC)
         #else
            movapd rC00, -128(pC)
               movddup -128(pB), rC00
            movapd rC10, 16-128(pC)
            movapd rC20, 32-128(pC)
            movapd rC01, 48-128(pC)
            movapd rC11, 64-128(pC)
            movapd rC21, 80-128(pC)
            movapd rC02, 96-128(pC)
            movapd rC12, 112-128(pC)
            movapd rC22, (pC)
         #endif
         add $144, pC
      sub $1, nnu
      jnz MNLOOP
               movddup -128(pB0), rC00
      mov nnu0, nnu
      mov pB0, pB
      add incAm, pA
   sub $1, nmu
   jnz MNLOOP
@ROUT ATL_dammm2x4x256_sse2.S
         movapd -128(pB), rB1
         pshufd $0x44, rB1, rB0
         movapd -128(pA), rC00

         movapd rC00, rC01
         mulpd rB0, rC00
         unpckhpd rB1, rB1
         movapd -112(pA), rC10
         movapd rC10, rC11
         mulpd rB0, rC10

         movapd -112(pB), rB3
         pshufd $0x44, rB3, rB2
         movapd rC01, rC02
         mulpd rB1, rC01
         unpckhpd rB3, rB3
         movapd rC11, rC12
         mulpd rB1, rC11
         #if KB > 1
            movapd -96(pB), rB1
         #else
            pref (pf)
         #endif

         #if KB > 1
            movapd -96(pA), rA0
         #else
            pref 64(pf)
         #endif
         movapd rC02, rC03
         mulpd rB2, rC02
         movapd rC12, rC13
         mulpd rB2, rC12
         #if KB > 1
            pshufd $0x44, rB1, rB0
         #else
            add incPF, pf
         #endif

         mulpd rB3, rC03
         prefC (pC)
         mulpd rB3, rC13
         prefC 64(pC)
/*
 *       ==========================
 *       Completely unrolled K-loop
 *       ==========================
 */
@iexp ao -80 0 +
@iexp bo -80 0 +
@iexp k 1 0 +
@iwhile k < 256
         #if KB > @(k)
   @iexp k @(k) 1 +
            movapd rB0, rm0
            mulpd rA0, rm0
            addpd rm0, rC00
            movapd @(ao)(pA), rA1
   @iexp ao @(ao) 16 +
            mulpd rA1, rB0
            addpd rB0, rC10
            unpckhpd rB1, rB1

            movapd rB1, rm0
            mulpd rA0, rm0
            addpd rm0, rC01
            movapd @(bo)(pB), rB3
   @iexp bo @(bo) 16 +
            mulpd rA1, rB1
            addpd rB1, rC11
            pshufd $0x44, rB3, rB2

            movapd rB2, rm0
            mulpd rA0, rm0
            addpd rm0, rC02
            unpckhpd rB3, rB3
            mulpd rA1, rB2
            addpd rB2, rC12

            #if KB > @(k)
               movapd @(bo)(pB), rB1
   @iexp bo @(bo) 16 +
            #elif KB == @(k)
               pref (pf)
            #endif
            mulpd rB3, rA0
            addpd rA0, rC03
            #if KB > @(k)
               movapd @(ao)(pA), rA0
   @iexp ao @(ao) 16 +
            #elif KB == @(k)
               pref 64(pf)
            #endif
            mulpd rA1, rB3
            addpd rB3, rC13
            #if KB > @(k)
               pshufd $0x44, rB1, rB0
            #elif KB == @(k)
               add incPF, pf
            #endif
         #endif   
@endiwhile
@ROUT ATL_dammm2x4x1_sse2.S
         movapd (pB), rB1
         pshufd $0x44, rB1, rB0
         movapd (pA), rC00

         movapd rC00, rC01
         mulpd rB0, rC00
         unpckhpd rB1, rB1
         movapd 16(pA), rC10
         movapd rC10, rC11
         mulpd rB0, rC10

         movapd 16(pB), rB3
         pshufd $0x44, rB3, rB2
         movapd rC01, rC02
         mulpd rB1, rC01
         pref (pf)
         movapd rC11, rC12
         mulpd rB1, rC11
         unpckhpd rB3, rB3

         pref 64(pf)
         movapd rC02, rC03
         mulpd rB2, rC02
         movapd rC12, rC13
         mulpd rB2, rC12

         prefC (pC)
         mulpd rB3, rC03
         add $32, pB
         prefC 64(pC)
         mulpd rB3, rC13
         add incPF, pf
         add $32, pA
         sub $1, KK
         jz DONEK

         KLOOP:
            movapd (pB), rB1
            pshufd $0x44, rB1, rB0
            movapd (pA), rA0
            movapd rB0, rm0
            mulpd rA0, rm0
            addpd rm0, rC00
            movapd 16(pA), rA1
            movapd rB0, rm0
            mulpd rA1, rm0
            addpd rm0, rC10
            unpckhpd rB1, rB1

            movapd 16(pB), rB3
            movapd rB1, rm0
            mulpd rA0, rm0
            addpd rm0, rC01
            pshufd $0x44, rB3, rB2
            movapd rB1, rm0
            mulpd rA1, rm0
            addpd rm0, rC11
            unpckhpd rB3, rB3

            movapd rB2, rm0
            mulpd rA0, rm0
            addpd rm0, rC02
            add $32, pA
            movapd rB2, rm0
            mulpd rA1, rm0
            addpd rm0, rC12
            add $32, pB

            movapd rB3, rm0
            mulpd rA0, rm0
            addpd rm0, rC03
            movapd rB3, rm0
            mulpd rA1, rm0
            addpd rm0, rC13
         sub $1, KK
         jnz KLOOP
         DONEK:
@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S
         #if defined(BETA1) || defined(BETAN1)
            BETCOP (pC), rC00
            movapd rC00, (pC)
            BETCOP 16(pC), rC10
            movapd rC10, 16(pC)
            BETCOP 32(pC), rC01
            movapd rC01, 32(pC)
            BETCOP 48(pC), rC11
            movapd rC11, 48(pC)
            BETCOP 64(pC), rC02
            movapd rC02, 64(pC)
            BETCOP 80(pC), rC12
            movapd rC12, 80(pC)
            BETCOP 96(pC), rC03
            movapd rC03, 96(pC)
            BETCOP 112(pC), rC13
            movapd rC13, 112(pC)
         #else
            movapd rC00, (pC)
            movapd rC10, 16(pC)
            movapd rC01, 32(pC)
            movapd rC11, 48(pC)
            movapd rC02, 64(pC)
            movapd rC12, 80(pC)
            movapd rC03, 96(pC)
            movapd rC13, 112(pC)
         #endif
         sub $-128, pC
@ROUT ATL_dammm2x4x1_sse2.S 
         mov KK0, KK
         mov pA0, pA
@ROUT ATL_dammm2x4x256_sse2.S
         add $KB*4*8, pB
@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S
      sub $1, nnu
      jnz MNLOOP
      mov nnu0, nnu
      mov pB0, pB
@ROUT ATL_dammm2x4x1_sse2.S
      add incAm, pA0
      mov pA0, pA
@ROUT ATL_dammm2x4x256_sse2.S
      add incAm, pA
@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S
   sub $1, nmu
   jnz MNLOOP

@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S ATL_dammm3x3x256_sse2.S
/* DONE: */
   movq    (%rsp), %rbp
   movq    8(%rsp), %rbx
   movq    16(%rsp), %r12
@ROUT ATL_dammm2x4x1_sse2.S
   movq    24(%rsp), %r13
   movq    32(%rsp), %r14
   movq    40(%rsp), %r15
@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S ATL_dammm3x3x256_sse2.S
   add $FSIZE, %rsp
   ret
@beginskip
/*
 * Can't use next B as pointer as usual, see if we can use next A
 */
.local BADPFB
BADPFB:
   movq 16(%rsp), pf
   cmp $0, pf
   je BADPFAB
   cmp pf, pA
   jne PFSETUP
/*
 * Can't use A or B as ptr, try C
 */
.local BADPFAB
BADPFAB:
   movq 24(%rsp), pf
   cmp $0, pf
   je BADPFABC
   cmp pf, pA
   jne PFSETUP
/*
 * No next block, so just fetch this time's A ahead
 */
.local BADPFABC
BADPFABC:
#ifndef KB
   #define KB 40
#endif
#ifndef MB
   #define MB KB
#endif
   lea KB*MB*4(pA), pf
   jmp PFSETUP
BADPF_2:
   movq 24(%rsp), pfB
   jmp PFSETUP_2
@endskip
@ROUT ATL_dammm_nb8_avx.S
@extract -b @(topd)/gen.inc what=crsetup
@extract -b @(topd)/cw.inc lang=c -define cwdate 2012
#include "atlas_asm.h"

#define pA %rcx
#define pB %r8
#define pC %r9
#define rA00    %ymm0
#define rA10    %ymm1
#define rA01    %ymm2
#define rA11    %ymm3
#define rA02    %ymm4
#define rA12    %ymm5
#define rA03    %ymm6
#define rA13    %ymm7
#define rB0     %ymm8
#define rB1     %ymm9
#define rC00    %ymm10
#define rC10    %ymm11
#define rC01    %ymm12
#define rC11    %ymm13
#define rb0     %ymm14
#define rb0_x   %xmm14
#define rb1     %ymm15
#define rb1_x   %xmm15
/*
                    rdi      rsi    rdx        rcx         r8        r9
void ATL_USERMM(SZT nmu, SZT nnu, SZT K, CTYPE *pA, CTYPE *pB, TYPE *pC,
                  8(%rsp)    16(%rsp)     24(%rsp)
                CTYPE *pAn, CTYPE *pBn, CTYPE *pCn);
 */
.text
ALIGN16
.global ATL_asmdecor(ATL_USERMM)
ATL_asmdecor(ATL_USERMM):
   vmovapd (pA), rA00
   movapd 16(pA), rA10
   movapd 32(pA), rA01
   movapd 48(pA), rA11
   movapd 64(pA), rA02
   movapd 80(pA), rA12
   movapd 96(pA), rA03
   movapd 112(pA), rA13

/*
 * ======================================================
 * rC00 = rA00 * rB00 + rA01*rB10 + rA02*rB20 + rA03*rB30
 * rC10 = rA10 * rB00 + rA11*rB10 + rA12*rB20 + rA13*rB30
 * rC01 = rA00 * rB01 + rA01*rB11 + rA02*rB21 + rA03*rB31
 * rC11 = rA10 * rB01 + rA11*rB11 + rA12*rB21 + rA13*rB31
 * ======================================================
 */
/*
 * rC00 = rA00 * rB0
 * rC10 = rA10 * rB0
 * rC01 = rA00 * rB1
 * rC11 = rA10 * rB1
 */
   #if defined(BETA0) || defined(BETAN1)
      movddup (pB), rC10
      movapd rC10, rC00
      mulpd rA00, rC00
      movddup 32(pB), rC11
      mulpd rA10, rC10
      movapd rC11, rC01
      mulpd rA00, rC01
      mulpd rA10, rC11
   #else
      movddup (pB), rB0
      movddup 32(pB), rB1
      movapd rB0, m0
      mulpd rA00, m0
      movapd (pC), rC00
      addpd m0, rC00
      mulpd rA10, rB0
      movapd 16(pC), rC10
      addpd rB0, rC10
      movapd rB1, m0
      mulpd rA00, m0
      movapd 32(pC), rC01
      addpd m0, rC01
      mulpd rA10, rB1
      movapd 48(pC), rC11
      addpd rB1, rC11
   #endif
/*
 * rC00 = rA01*rB10 
 * rC10 = rA11*rB10 
 * rC01 = rA01*rB11 
 * rC11 = rA11*rB11 
 */
   movddup 8(pB), rB0
   movapd rB0, m0
   mulpd rA01, m0
   addpd m0, rC00
   mulpd rA11, rB0
   addpd rB0, rC10
   movddup 40(pB), rB1
   movapd rB1, m0
   mulpd rA01, m0
   addpd m0, rC01
   mulpd rA11, rB1
   addpd rB1, rC11
/*
 * rC00 = rA02*rB20
 * rC10 = rA12*rB20
 * rC01 = rA02*rB21
 * rC11 = rA12*rB21
 */
   movddup 16(pB), rB0
   movapd rA02, m0
   mulpd rB0, m0
   addpd m0, rC00
   mulpd rA12, rB0
   addpd rB0, rC10
   movapd rA02, m0
   movddup 48(pB), rB1
   mulpd rB1, m0
   addpd m0, rC01
   mulpd rA12, rB1
   addpd rB1, rC11
/*
 * rC00 = rA03*rB30
 * rC10 = rA13*rB30
 * rC01 = rA03*rB31
 * rC11 = rA13*rB31
 */
   movddup 24(pB), rB0
   movapd rA03, m0
   mulpd rB0, m0
   addpd m0, rC00
   #ifdef BETAN1
      subpd (pC), rC00
   #endif
   movapd rC00, (pC)
   mulpd rA13, rB0
   addpd rB0, rC10
   #ifdef BETAN1
      subpd 16(pC), rC10
   #endif
   movapd rC10, 16(pC)
   movapd rA03, m0
   movddup 56(pB), rB1
   mulpd rB1, m0
   addpd m0, rC01
   #ifdef BETAN1
      subpd 32(pC), rC01
   #endif
   movapd rC01, 32(pC)
   mulpd rA13, rB1
   addpd rB1, rC11
   #ifdef BETAN1
      subpd 48(pC), rC11
   #endif
   movapd rC11, 48(pC)

/*
 * rC00 = rA00 * rB0
 * rC10 = rA10 * rB0
 * rC01 = rA00 * rB1
 * rC11 = rA10 * rB1
 */
   #if defined(BETA0) || defined(BETAN1)
      movddup 64(pB), rC10
      movapd rC10, rC00
      mulpd rA00, rC00
      movddup 96(pB), rC11
      mulpd rA10, rC10
      movapd rC11, rC01
      mulpd rA00, rC01
      mulpd rA10, rC11
   #else
      movddup 64(pB), rB0
      movddup 96(pB), rB1
      movapd rB0, m0
      mulpd rA00, m0
      movapd 64(pC), rC00
      addpd m0, rC00
      mulpd rA10, rB0
      movapd 80(pC), rC10
      addpd rB0, rC10
      movapd rB1, m0
      mulpd rA00, m0
      movapd 96(pC), rC01
      addpd m0, rC01
      mulpd rA10, rB1
      movapd 112(pC), rC11
      addpd rB1, rC11
   #endif
/*
 * rC00 = rA01*rB10 
 * rC10 = rA11*rB10 
 * rC01 = rA01*rB11 
 * rC11 = rA11*rB11 
 */
   movddup 72(pB), rB0
   movapd rB0, m0
   mulpd rA01, m0
   addpd m0, rC00
   mulpd rA11, rB0
   addpd rB0, rC10
   movddup 104(pB), rB1
   movapd rB1, m0
   mulpd rB1, rA01
   addpd rA01, rC01
   mulpd rA11, rB1
   addpd rB1, rC11
/*
 * rC00 = rA02*rB20
 * rC10 = rA12*rB20
 * rC01 = rA02*rB21
 * rC11 = rA12*rB21
 */
   movddup 80(pB), rB0
   movapd rA02, m0
   mulpd rB0, m0
   addpd m0, rC00
   mulpd rA12, rB0
   addpd rB0, rC10
   movddup 112(pB), rB1
   mulpd rB1, rA02
   addpd rA02, rC01
   mulpd rA12, rB1
   addpd rB1, rC11
/*
 * rC00 = rA03*rB30
 * rC10 = rA13*rB30
 * rC01 = rA03*rB31
 * rC11 = rA13*rB31
 */
   movddup 88(pB), rB0
   movapd rA03, m0
   mulpd rB0, m0
   addpd m0, rC00
   #ifdef BETAN1
      subpd 64(pC), rC00
   #endif
   movapd rC00, 64(pC)
   mulpd rA13, rB0
   addpd rB0, rC10
   #ifdef BETAN1
      subpd 80(pC), rC10
   #endif
   movapd rC10, 80(pC)
   movddup 120(pB), rB1
   mulpd rB1, rA03
   addpd rA03, rC01
   #ifdef BETAN1
      subpd 96(pC), rC01
   #endif
   movapd rC01, 96(pC)
   mulpd rA13, rB1
   addpd rB1, rC11
   #ifdef BETAN1
      subpd 112(pC), rC11
   #endif
   movapd rC11, 112(pC)
   ret

@ROUT ATL_dammm_nb4_sse2.S
@extract -b @(topd)/gen.inc what=crsetup
@extract -b @(topd)/cw.inc lang=c -define cwdate 2012
#include "atlas_asm.h"

#define pA %rcx
#define pB %r8
#define pC %r9
#define m0      %xmm0
#define rA00    %xmm1
#define rA10    %xmm2
#define rA01    %xmm3
#define rA11    %xmm4
#define rA02    %xmm5
#define rA12    %xmm6
#define rA03    %xmm7
#define rA13    %xmm8
#define rB0     %xmm9
#define rB1     %xmm10
#define rC00    %xmm11
#define rC10    %xmm12
#define rC01    %xmm13
#define rC11    %xmm14
/*
                    rdi      rsi    rdx        rcx         r8        r9
void ATL_USERMM(SZT nmu, SZT nnu, SZT K, CTYPE *pA, CTYPE *pB, TYPE *pC,
                  8(%rsp)    16(%rsp)     24(%rsp)
                CTYPE *pAn, CTYPE *pBn, CTYPE *pCn);
 */
.text
ALIGN16
.global ATL_asmdecor(ATL_USERMM)
ATL_asmdecor(ATL_USERMM):
   movapd (pA), rA00
   movapd 16(pA), rA10
   movapd 32(pA), rA01
   movapd 48(pA), rA11
   movapd 64(pA), rA02
   movapd 80(pA), rA12
   movapd 96(pA), rA03
   movapd 112(pA), rA13

/*
 * ======================================================
 * rC00 = rA00 * rB00 + rA01*rB10 + rA02*rB20 + rA03*rB30
 * rC10 = rA10 * rB00 + rA11*rB10 + rA12*rB20 + rA13*rB30
 * rC01 = rA00 * rB01 + rA01*rB11 + rA02*rB21 + rA03*rB31
 * rC11 = rA10 * rB01 + rA11*rB11 + rA12*rB21 + rA13*rB31
 * ======================================================
 */
/*
 * rC00 = rA00 * rB0
 * rC10 = rA10 * rB0
 * rC01 = rA00 * rB1
 * rC11 = rA10 * rB1
 */
   #if defined(BETA0) || defined(BETAN1)
      movddup (pB), rC10
      movapd rC10, rC00
      mulpd rA00, rC00
      movddup 32(pB), rC11
      mulpd rA10, rC10
      movapd rC11, rC01
      mulpd rA00, rC01
      mulpd rA10, rC11
   #else
      movddup (pB), rB0
      movddup 32(pB), rB1
      movapd rB0, m0
      mulpd rA00, m0
      movapd (pC), rC00
      addpd m0, rC00
      mulpd rA10, rB0
      movapd 16(pC), rC10
      addpd rB0, rC10
      movapd rB1, m0
      mulpd rA00, m0
      movapd 32(pC), rC01
      addpd m0, rC01
      mulpd rA10, rB1
      movapd 48(pC), rC11
      addpd rB1, rC11
   #endif
/*
 * rC00 = rA01*rB10 
 * rC10 = rA11*rB10 
 * rC01 = rA01*rB11 
 * rC11 = rA11*rB11 
 */
   movddup 8(pB), rB0
   movapd rB0, m0
   mulpd rA01, m0
   addpd m0, rC00
   mulpd rA11, rB0
   addpd rB0, rC10
   movddup 40(pB), rB1
   movapd rB1, m0
   mulpd rA01, m0
   addpd m0, rC01
   mulpd rA11, rB1
   addpd rB1, rC11
/*
 * rC00 = rA02*rB20
 * rC10 = rA12*rB20
 * rC01 = rA02*rB21
 * rC11 = rA12*rB21
 */
   movddup 16(pB), rB0
   movapd rA02, m0
   mulpd rB0, m0
   addpd m0, rC00
   mulpd rA12, rB0
   addpd rB0, rC10
   movapd rA02, m0
   movddup 48(pB), rB1
   mulpd rB1, m0
   addpd m0, rC01
   mulpd rA12, rB1
   addpd rB1, rC11
/*
 * rC00 = rA03*rB30
 * rC10 = rA13*rB30
 * rC01 = rA03*rB31
 * rC11 = rA13*rB31
 */
   movddup 24(pB), rB0
   movapd rA03, m0
   mulpd rB0, m0
   addpd m0, rC00
   #ifdef BETAN1
      subpd (pC), rC00
   #endif
   movapd rC00, (pC)
   mulpd rA13, rB0
   addpd rB0, rC10
   #ifdef BETAN1
      subpd 16(pC), rC10
   #endif
   movapd rC10, 16(pC)
   movapd rA03, m0
   movddup 56(pB), rB1
   mulpd rB1, m0
   addpd m0, rC01
   #ifdef BETAN1
      subpd 32(pC), rC01
   #endif
   movapd rC01, 32(pC)
   mulpd rA13, rB1
   addpd rB1, rC11
   #ifdef BETAN1
      subpd 48(pC), rC11
   #endif
   movapd rC11, 48(pC)

/*
 * rC00 = rA00 * rB0
 * rC10 = rA10 * rB0
 * rC01 = rA00 * rB1
 * rC11 = rA10 * rB1
 */
   #if defined(BETA0) || defined(BETAN1)
      movddup 64(pB), rC10
      movapd rC10, rC00
      mulpd rA00, rC00
      movddup 96(pB), rC11
      mulpd rA10, rC10
      movapd rC11, rC01
      mulpd rA00, rC01
      mulpd rA10, rC11
   #else
      movddup 64(pB), rB0
      movddup 96(pB), rB1
      movapd rB0, m0
      mulpd rA00, m0
      movapd 64(pC), rC00
      addpd m0, rC00
      mulpd rA10, rB0
      movapd 80(pC), rC10
      addpd rB0, rC10
      movapd rB1, m0
      mulpd rA00, m0
      movapd 96(pC), rC01
      addpd m0, rC01
      mulpd rA10, rB1
      movapd 112(pC), rC11
      addpd rB1, rC11
   #endif
/*
 * rC00 = rA01*rB10 
 * rC10 = rA11*rB10 
 * rC01 = rA01*rB11 
 * rC11 = rA11*rB11 
 */
   movddup 72(pB), rB0
   movapd rB0, m0
   mulpd rA01, m0
   addpd m0, rC00
   mulpd rA11, rB0
   addpd rB0, rC10
   movddup 104(pB), rB1
   movapd rB1, m0
   mulpd rB1, rA01
   addpd rA01, rC01
   mulpd rA11, rB1
   addpd rB1, rC11
/*
 * rC00 = rA02*rB20
 * rC10 = rA12*rB20
 * rC01 = rA02*rB21
 * rC11 = rA12*rB21
 */
   movddup 80(pB), rB0
   movapd rA02, m0
   mulpd rB0, m0
   addpd m0, rC00
   mulpd rA12, rB0
   addpd rB0, rC10
   movddup 112(pB), rB1
   mulpd rB1, rA02
   addpd rA02, rC01
   mulpd rA12, rB1
   addpd rB1, rC11
/*
 * rC00 = rA03*rB30
 * rC10 = rA13*rB30
 * rC01 = rA03*rB31
 * rC11 = rA13*rB31
 */
   movddup 88(pB), rB0
   movapd rA03, m0
   mulpd rB0, m0
   addpd m0, rC00
   #ifdef BETAN1
      subpd 64(pC), rC00
   #endif
   movapd rC00, 64(pC)
   mulpd rA13, rB0
   addpd rB0, rC10
   #ifdef BETAN1
      subpd 80(pC), rC10
   #endif
   movapd rC10, 80(pC)
   movddup 120(pB), rB1
   mulpd rB1, rA03
   addpd rA03, rC01
   #ifdef BETAN1
      subpd 96(pC), rC01
   #endif
   movapd rC01, 96(pC)
   mulpd rA13, rB1
   addpd rB1, rC11
   #ifdef BETAN1
      subpd 112(pC), rC11
   #endif
   movapd rC11, 112(pC)
   ret
@ROUT ATL_damm2x12x2_sse2.S ATL_damm2x12x256_sse2.S
@extract -b @(topd)/gen.inc what=crsetup
@extract -b @(topd)/cw.inc lang=c -define cwdate 2012
#include "atlas_asm.h"
#ifndef KB
   #define KB 0
#endif
@ROUT ATL_damm2x12x2_sse2.S
/*
 * innermost (K-) loop items get priority on 1st 7 regs
 */
#define pA      %rcx
#define pB      %rdi
#define incB    %rax
#define KK      %rdx
/*
 * Second (N-) loop items get next level of priority on good regs
 */
#define pC      %rbp
#define pfA     %rsi
#define pfB     %rbx
/* #define pfC     %r8 */
#define incPF   %r9
#define nnu     %r10
#define incAm   %r11
#define KK0     %r15
/*
 * Outer- (M-) loop variables assigned to any regs
 */
#define nmu     %r12
#define pB0     %r13
#define nnu0    %r14
@ROUT ATL_damm2x12x256_sse2.S
/*
 * innermost (K-) loop items get priority on 1st 7 regs
 */
#define pA      %rcx
#define pB      %rdi
#define i256    %rax
#define i768    %rdx   /* 3 * 256 */
#define i1280   %rsi   /* 5 * 256 */
#define i1792   %rbx   /* 7 * 256 */
/*
 * Second (N-) loop items get next level of priority on good regs
 */
#define pC      %rbp
#define pfA     %r12
#define pfB     %r8
#define incPF   %r9
#define nnu     %r10
@skip #define incAm   %r11
/*
 * Outer- (M-) loop variables assigned to any regs
 */
#define nmu     %r13
#define pB0     %r14
#define nnu0    %r15
@ROUT ATL_damm2x12x2_sse2.S ATL_damm2x12x256_sse2.S
/*
 * floating point registers
 */
#define a0      %xmm0
#define b0      %xmm1
#define rC0     %xmm2
#define rC1     %xmm3
#define rC2     %xmm4
#define rC3     %xmm5
#define rC4     %xmm6
#define rC5     %xmm7
#define rC6     %xmm8
#define rC7     %xmm9
#define rC8     %xmm10
#define rC9     %xmm11
#define rC10    %xmm12
#define rC11    %xmm13
/*
                    rdi      rsi    rdx        rcx         r8        r9
void ATL_USERMM(SZT nmu, SZT nnu, SZT K, CTYPE *pA, CTYPE *pB, TYPE *pC,
                  8(%rsp)    16(%rsp)     24(%rsp)
                CTYPE *pAn, CTYPE *pBn, CTYPE *pCn);
 */

#define FSIZE 6*8
#ifndef prefA
   #define prefA prefetcht0
#endif
#ifndef prefB
   #define prefB prefetcht0
#endif
#ifndef prefC
   #ifdef ATL_3DNow
      #define prefC prefetchw
   #else
      #define prefC prefetcht0
   #endif
#endif
#ifdef BETAN1
   #define BETCOP subpd
#else
   #define BETCOP addpd
#endif
/*
                    rdi      rsi    rdx        rcx         r8        r9
void ATL_USERMM(SZT nmu, SZT nnu, SZT K, CTYPE *pA, CTYPE *pB, TYPE *pC,
                  8(%rsp)    16(%rsp)     24(%rsp)
                CTYPE *pAn, CTYPE *pBn, CTYPE *pCn);
 */
.text
.global ATL_asmdecor(ATL_USERMM)
ALIGN16
ATL_asmdecor(ATL_USERMM):
/*
 * Save callee-saved iregs
 */
   sub $FSIZE, %rsp
   movq    %rbp, 0(%rsp)
   movq    %rbx, 8(%rsp)
   movq    %r12, 16(%rsp)
   movq    %r13, 24(%rsp)
   movq    %r14, 32(%rsp)
   movq    %r15, 40(%rsp)
/*
 * Load paramaters
 */
   mov %rdi, nmu
   mov %rsi, nnu
   mov %r8, pB
   mov %r9, pC
   mov nnu, nnu0
   movq FSIZE+8(%rsp), pfB      /* pfB = pAn */
   movq FSIZE+16(%rsp), pfA     /* pf = pBn */
   cmp pfA, pB
   CMOVE pfB, pfA
   CMOVEq FSIZE+24(%rsp), pfB
   mov $2*12*8, incPF           /* incPF = mu*nu*sizeof */
/*
 * Extend range of 1-byte offsets  by starting at -128
 */
@ROUT ATL_damm2x12x256_sse2.S `   sub $-128, pA`
   sub $-128, pB
   sub $-128, pC
   sub $-128, pfA
   sub $-128, pfB
   movq pB, pB0
@ROUT ATL_damm2x12x2_sse2.S
/*
 * incAm = KB*MU*sizeof = K*2*8 = K*16
 */
   shl $4, KK                   /* KK = K*MU*sizeof = K*2*8 = K*16 */
   mov KK, incAm                /* incAm = K*16 */
   mov $192, incB
@ROUT ATL_damm2x12x256_sse2.S
@beginskip
@BEGINPROC decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
@ENDPROC
@endskip
@BEGINPROC doref p io r
   @define io0 @@(io)@
   @mif "pB = p
      @define mv @   movddup@
   @endmif
   @mif "pB ! p
      @define mv @   movapd@
   @endmif
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io < 128
         @(mv) @(of)(@(p)), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 384
         @(mv) @(of)(@(p),i256), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 640
         @(mv) @(of)(@(p),i256,2), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 896
         @(mv) @(of)(@(p),i768), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 1152
         @(mv) @(of)(@(p),i256,4), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 1408
         @(mv) @(of)(@(p),i1280), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 1664
         @(mv) @(of)(@(p),i768,2), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 1920
         @(mv) @(of)(@(p),i1792), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 2176
         @(mv) @(of)(@(p),i256,8), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 2432
         @(mv) @(io0)(@(p)), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 2688
         @(mv) @(of)(@(p),i1280,2), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 2944
         @(mv) @(io0)(@(p)), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 3200
         @(mv) @(of)(@(p),i768,4), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 3456
         @(mv) @(io0)(@(p)), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 3712
         @(mv) @(of)(@(p),i1792,2), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io < 4992
         @(mv) @(io0)(@(p)), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 5248
         @(mv) @(of)(@(p),i1280,4), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io < 6016
         @(mv) @(io0)(@(p)), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 6272
         @(mv) @(of)(@(p),i768,8), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io < 7040
         @(mv) @(io0)(@(p)), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 7296
         @(mv) @(of)(@(p),i1792,4), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io < 10112
         @(mv) @(io0)(@(p)), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 7296
         @(mv) @(of)(@(p),i1280,8), @(r)
      @endextract
   @endiif
@SKIP default case just indexes ptr
         @(mv) @(io0)(@(p)), @(r)
   @undef io0
   @undef of
   @undef mv
@ENDPROC
   mov $256, i256
   lea (i256, i256,2), i768
   lea (i256, i256,4), i1280
   lea (i256, i768,2), i1792
   ALIGN8
   .local MNLOOP
   MNLOOP:
/*
      .local NLOOP
      NLOOP:
*/
/*
 *       Peel first iteration of K loop to initialize rCx
 */
         movapd -128(pA), a0
         movddup -128(pB), rC0
         mulpd a0, rC0
            prefC -128(pC)
         movddup -120(pB), rC1
         mulpd a0, rC1
         movddup -112(pB), rC2
         mulpd a0, rC2
         movddup -104(pB), rC3
         mulpd a0, rC3
         movddup -96(pB), rC4
         mulpd a0, rC4
         movddup -88(pB), rC5
         mulpd a0, rC5
         movddup -80(pB), rC6
         mulpd a0, rC6
         movddup -72(pB), rC7
         mulpd a0, rC7
         movddup -64(pB), rC8
         mulpd a0, rC8
         movddup -56(pB), rC9
         mulpd a0, rC9
         movddup -48(pB), rC10
         mulpd a0, rC10
         movddup -40(pB), rC11
         mulpd a0, rC11
/*
 *       Fully unrolled K-loop
 */
@iexp ao -112 0 +
@iexp bo -32 0 +
@iexp k 1 0 +
@iwhile k < 256
         #if KB > @(k)
   @iexp k @(k) 1 +
            @callproc doref pA @(ao) a0
            @iexp ao @(ao) 16 +
            @callproc doref pB @(bo) b0
            @iexp bo @(bo) 8 +
            mulpd a0, b0
            addpd b0, rC0
            @callproc doref pB @(bo) b0
            @iexp bo @(bo) 8 +
            @iif @(k) = 1
               prefC -64(pC)
            @endiif
            @iif @(k) = 2
               prefC (pC)
            @endiif
            @iif @(k) = 3
            prefA -128(pfA)
            @endiif
            @iif @(k) = 4
            prefA -64(pfA)
            @endiif
            @iif @(k) = 5
            prefA (pfA)
            @endiif
            @iif @(k) = 6
            prefB -128(pfB)
            @endiif
            @iif @(k) = 7
            prefB -64(pfB)
            @endiif
            @iif @(k) = 8
            prefB (pfB)
            @endiif
            mulpd a0, b0
            addpd b0, rC1
            @callproc doref pB @(bo) b0
            @iexp bo @(bo) 8 +
            mulpd a0, b0
            addpd b0, rC2
            @callproc doref pB @(bo) b0
            @iexp bo @(bo) 8 +
            mulpd a0, b0
            addpd b0, rC3
            @callproc doref pB @(bo) b0
            @iexp bo @(bo) 8 +
            mulpd a0, b0
            addpd b0, rC4
            @callproc doref pB @(bo) b0
            @iexp bo @(bo) 8 +
            mulpd a0, b0
            addpd b0, rC5
            @callproc doref pB @(bo) b0
            @iexp bo @(bo) 8 +
            mulpd a0, b0
            addpd b0, rC6
            @callproc doref pB @(bo) b0
            @iexp bo @(bo) 8 +
            mulpd a0, b0
            addpd b0, rC7
            @callproc doref pB @(bo) b0
            @iexp bo @(bo) 8 +
            mulpd a0, b0
            addpd b0, rC8
            @callproc doref pB @(bo) b0
            @iexp bo @(bo) 8 +
            mulpd a0, b0
            addpd b0, rC9
            @callproc doref pB @(bo) b0
            @iexp bo @(bo) 8 +
            mulpd a0, b0
            addpd b0, rC10
            @callproc doref pB @(bo) b0
            @iexp bo @(bo) 8 +
            mulpd a0, b0
            addpd b0, rC11
         #endif
@endiwhile
         add incPF, pfA
         add incPF, pfB
/*
 *       Write answer back out to C
 */
         #ifdef BETA0
            movapd rC0, -128(pC)
            movapd rC1, -112(pC)
            movapd rC2, -96(pC)
            movapd rC3, -80(pC)
            movapd rC4, -64(pC)
            movapd rC5, -48(pC)
            movapd rC6, -32(pC)
            movapd rC7, -16(pC)
            movapd rC8, (pC)
            movapd rC9, 16(pC)
            movapd rC10, 32(pC)
            movapd rC11, 48(pC)
/*
 *          Add running sum in rCx with original C, then store back out
 */
         #else
            BETCOP -128(pC), rC0
            movapd rC0, -128(pC)
            BETCOP -112(pC), rC1
            movapd rC1, -112(pC)
            BETCOP -96(pC), rC2
            movapd rC2, -96(pC)
            BETCOP -80(pC), rC3
            movapd rC3, -80(pC)
            BETCOP -64(pC), rC4
            movapd rC4, -64(pC)
            BETCOP -48(pC), rC5
            movapd rC5, -48(pC)
            BETCOP -32(pC), rC6
            movapd rC6, -32(pC)
            BETCOP -16(pC), rC7
            movapd rC7, -16(pC)
            BETCOP (pC), rC8
            movapd rC8, (pC)
            BETCOP 16(pC), rC9
            movapd rC9, 16(pC)
            BETCOP 32(pC), rC10
            movapd rC10, 32(pC)
            BETCOP 48(pC), rC11
            movapd rC11, 48(pC)
         #endif
         add $12*2*8, pC   /* pC += NU*VECLEN*sizeof */
         add $KB*12*8, pB     /* pB += K*NU*sizeof */
      sub $1, nnu
      jnz MNLOOP

      mov nnu0, nnu
      mov pB0, pB
      add $KB*2*8, pA    /* pA += KB*MU*size */
   sub $1, nmu
   jnz MNLOOP
@ROUT ATL_damm2x12x2_sse2.S
   add KK, pA                   /* pA += K*MU (ptr starts 1 past last loc */
   neg KK
   mov KK, KK0

   nop ; nop ; nop ; nop ; nop
   .local MNLOOP
   MNLOOP:
/*
      .local NLOOP
      NLOOP:
*/
/*
 *       Peel first iteration of K loop to initialize rCx
 */
         movapd (pA,KK), a0
         movddup -128(pB), rC0
         mulpd a0, rC0
            prefC -128(pC)
         movddup -120(pB), rC1
         mulpd a0, rC1
            prefC -64(pC)
         movddup -112(pB), rC2
         mulpd a0, rC2
            prefC (pC)
         movddup -104(pB), rC3
         mulpd a0, rC3
            prefA -128(pfA)
         movddup -96(pB), rC4
         mulpd a0, rC4
            prefA -64(pfA)
         movddup -88(pB), rC5
         mulpd a0, rC5
            prefA (pfA)
         movddup -80(pB), rC6
         mulpd a0, rC6
            prefB -128(pfB)
         movddup -72(pB), rC7
         mulpd a0, rC7
            prefB -64(pfB)
         movddup -64(pB), rC8
         mulpd a0, rC8
            prefB (pfB)
         movddup -56(pB), rC9
         mulpd a0, rC9
@skip            prefC -128(pfC)
         movddup -48(pB), rC10
         mulpd a0, rC10
         movddup -40(pB), rC11
         mulpd a0, rC11

         movapd 16(pA,KK), a0
         movddup -32(pB), b0
         mulpd a0, b0
         addpd b0, rC0
         movddup -24(pB), b0
         mulpd a0, b0
         addpd b0, rC1
            #if KB > 2
               add $32, KK
            #endif
         movddup -16(pB), b0
         mulpd a0, b0
         addpd b0, rC2
            add incPF, pfA
         movddup -8(pB), b0
         mulpd a0, b0
         addpd b0, rC3
            add incPF, pfB
         movddup (pB), b0
         mulpd a0, b0
         addpd b0, rC4
         movddup 8(pB), b0
         mulpd a0, b0
         addpd b0, rC5
         movddup 16(pB), b0
         mulpd a0, b0
         addpd b0, rC6
         movddup 24(pB), b0
         mulpd a0, b0
         addpd b0, rC7
         movddup 32(pB), b0
         mulpd a0, b0
         addpd b0, rC8
         movddup 40(pB), b0
         mulpd a0, b0
         addpd b0, rC9
         movddup 48(pB), b0
         mulpd a0, b0
         addpd b0, rC10
         movddup 56(pB), b0
         add incB, pB
         mulpd a0, b0
         addpd b0, rC11
         #if KB == 0
            add $32, KK
            jz KLOOPDONE
         #endif

         #if KB > 2 || KB == 0
         .local KLOOP
         KLOOP:
            movapd (pA,KK), a0
            movddup -128(pB), b0
            mulpd a0, b0
            addpd b0, rC0
            movddup -120(pB), b0
            mulpd a0, b0
            addpd b0, rC1
            movddup -112(pB), b0
            mulpd a0, b0
            addpd b0, rC2
            movddup -104(pB), b0
            mulpd a0, b0
            addpd b0, rC3
            movddup -96(pB), b0
            mulpd a0, b0
            addpd b0, rC4
            movddup -88(pB), b0
            mulpd a0, b0
            addpd b0, rC5
            movddup -80(pB), b0
            mulpd a0, b0
            addpd b0, rC6
            movddup -72(pB), b0
            mulpd a0, b0
            addpd b0, rC7
            movddup -64(pB), b0
            mulpd a0, b0
            addpd b0, rC8
            movddup -56(pB), b0
            mulpd a0, b0
            addpd b0, rC9
            movddup -48(pB), b0
            mulpd a0, b0
            addpd b0, rC10
            movddup -40(pB), b0
            mulpd a0, b0
            addpd b0, rC11

            movapd 16(pA,KK), a0
            movddup -32(pB), b0
            mulpd a0, b0
            addpd b0, rC0
            movddup -24(pB), b0
            mulpd a0, b0
            addpd b0, rC1
            movddup -16(pB), b0
            mulpd a0, b0
            addpd b0, rC2
            movddup -8(pB), b0
            mulpd a0, b0
            addpd b0, rC3
            movddup (pB), b0
            mulpd a0, b0
            addpd b0, rC4
            movddup 8(pB), b0
            mulpd a0, b0
            addpd b0, rC5
            movddup 16(pB), b0
            mulpd a0, b0
            addpd b0, rC6
            movddup 24(pB), b0
            mulpd a0, b0
            addpd b0, rC7
            movddup 32(pB), b0
            mulpd a0, b0
            addpd b0, rC8
            movddup 40(pB), b0
            mulpd a0, b0
            addpd b0, rC9
            movddup 48(pB), b0
            mulpd a0, b0
            addpd b0, rC10
            movddup 56(pB), b0
            mulpd a0, b0
            addpd b0, rC11
            add incB, pB
         add $32, KK
         jnz KLOOP
         #endif
         #if KB == 0
         .local KLOOPDONE
         KLOOPDONE:
         #endif
/*
 *       Write answer back out to C
 */
         #ifdef BETA0
            movapd rC0, -128(pC)
            movapd rC1, -112(pC)
            movapd rC2, -96(pC)
            movapd rC3, -80(pC)
            movapd rC4, -64(pC)
            movapd rC5, -48(pC)
            movapd rC6, -32(pC)
            movapd rC7, -16(pC)
            movapd rC8, (pC)
            movapd rC9, 16(pC)
            movapd rC10, 32(pC)
            movapd rC11, 48(pC)
/*
 *          Add running sum in rCx with original C, then store back out
 */
         #else
            BETCOP -128(pC), rC0
            movapd rC0, -128(pC)
            BETCOP -112(pC), rC1
            movapd rC1, -112(pC)
            BETCOP -96(pC), rC2
            movapd rC2, -96(pC)
            BETCOP -80(pC), rC3
            movapd rC3, -80(pC)
            BETCOP -64(pC), rC4
            movapd rC4, -64(pC)
            BETCOP -48(pC), rC5
            movapd rC5, -48(pC)
            BETCOP -32(pC), rC6
            movapd rC6, -32(pC)
            BETCOP -16(pC), rC7
            movapd rC7, -16(pC)
            BETCOP (pC), rC8
            movapd rC8, (pC)
            BETCOP 16(pC), rC9
            movapd rC9, 16(pC)
            BETCOP 32(pC), rC10
            movapd rC10, 32(pC)
            BETCOP 48(pC), rC11
            movapd rC11, 48(pC)
         #endif
         mov KK0, KK
         add incB, pC   /* pC += 12*8*2 = 192 */
      sub $1, nnu
      jnz MNLOOP

      mov nnu0, nnu
      mov pB0, pB
      add incAm, pA    /* pA += KB*KU*MU*size */
   sub $1, nmu
   jnz MNLOOP
@ROUT ATL_damm2x12x2_sse2.S ATL_damm2x12x256_sse2.S
/* DONE: */
   movq    (%rsp), %rbp
   movq    8(%rsp), %rbx
   movq    16(%rsp), %r12
   movq    24(%rsp), %r13
   movq    32(%rsp), %r14
   movq    40(%rsp), %r15
   add $FSIZE, %rsp
   ret
@ROUT ATL_damm12x3x256_avx.S ATL_samm24x3x256_avx.S
@extract -b @(topd)/gen.inc what=crsetup
@extract -b @(topd)/cw.inc lang=c -define cwdate 2012
#include "atlas_asm.h"
#ifndef KB
   #define KB 0
#endif
/*
 * innermost (K-) loop items get priority on 1st 7 regs
 */
#define pA      %rcx
#define pB      %rdi
#define i256    %rax
#define i768    %rdx   /* 3 * 256 */
#define i1280   %rsi   /* 5 * 256 */
#define i1792   %rbx   /* 7 * 256 */
#define i2304   %r11
/*
 * Second (N-) loop items get next level of priority on good regs
 */
#define pC      %rbp
#define pfA     %r8
#define pfB     %r9
#define incPF   %r10
#define nnu     %r12
/*
 * Outer- (M-) loop variables assigned to any regs
 */
#define nmu     %r13
#define pB0     %r14
#define nnu0    %r15
/*
 * floating point registers
 */
#define m0   %ymm0
#define rA0  %ymm1
#define rA1  %ymm2
#define rA2  %ymm3
#define rB0  %ymm4
#define rB1  %ymm5
#define rB2  %ymm6
#define rC00 %ymm7
#define rC10 %ymm8
#define rC20 %ymm9
#define rC01 %ymm10
#define rC11 %ymm11
#define rC21 %ymm12
#define rC02 %ymm13
#define rC12 %ymm14
#define rC22 %ymm15
/*
                    rdi      rsi    rdx        rcx         r8        r9
void ATL_USERMM(SZT nmu, SZT nnu, SZT K, CTYPE *pA, CTYPE *pB, TYPE *pC,
                  8(%rsp)    16(%rsp)     24(%rsp)
                CTYPE *pAn, CTYPE *pBn, CTYPE *pCn);
 */

#define FSIZE 6*8
#ifndef prefA
   #define prefA prefetcht0
#endif
#ifndef prefB
   #define prefB prefetcht0
#endif
#ifndef prefC
   #ifdef ATL_3DNow
      #define prefC prefetchw
   #else
      #define prefC prefetcht0
   #endif
#endif
@ROUT ATL_samm24x3x256_avx.S
#ifdef BETAN1
   #define BETCOP vsubps
#else
   #define BETCOP vaddps
#endif
#define vmovapd vmovaps
#define vmulpd vmulps
#define vaddpd vaddps
#define vbroadcastsd vbroadcastss
@define sz @4@
@ROUT ATL_damm12x3x256_avx.S
#ifdef BETAN1
   #define BETCOP vsubpd
#else
   #define BETCOP vaddpd
#endif
#define vmovapd vmovaps
@define sz @8@
@ROUT ATL_damm12x3x256_avx.S ATL_samm24x3x256_avx.S
/*
                    rdi      rsi    rdx        rcx         r8        r9
void ATL_USERMM(SZT nmu, SZT nnu, SZT K, CTYPE *pA, CTYPE *pB, TYPE *pC,
                  8(%rsp)    16(%rsp)     24(%rsp)
                CTYPE *pAn, CTYPE *pBn, CTYPE *pCn);
 */
.text
.global ATL_asmdecor(ATL_USERMM)
ALIGN16
ATL_asmdecor(ATL_USERMM):
/*
 * Save callee-saved iregs
 */
   sub $FSIZE, %rsp
   movq    %rbp, 0(%rsp)
   movq    %rbx, 8(%rsp)
   movq    %r12, 16(%rsp)
   movq    %r13, 24(%rsp)
   movq    %r14, 32(%rsp)
   movq    %r15, 40(%rsp)
/*
 * Load paramaters
 */
   mov %rdi, nmu
   mov %rsi, nnu
   mov %r8, pB
   mov %r9, pC
   mov nnu, nnu0
   movq FSIZE+8(%rsp), pfB      /* pfB = pAn */
   movq FSIZE+16(%rsp), pfA     /* pf = pBn */
   cmp pfA, pB
   CMOVE pfB, pfA
   CMOVEq FSIZE+24(%rsp), pfB
   mov $2*12*@(sz), incPF           /* incPF = mu*nu*sizeof */
/*
 * Extend range of 1-byte offsets  by starting at -128
 */
   sub $-128, pA
   sub $-128, pB
   sub $-128, pC
   sub $-128, pfA
   sub $-128, pfB
   movq pB, pB0
@BEGINPROC doref p io r
   @define io0 @@(io)@
   @mif "pB = p
      @ROUT ATL_damm12x3x256_avx.S `@define mv @   vbroadcastsd@`
      @ROUT ATL_samm24x3x256_avx.S `@define mv @   vbroadcastss@`
   @endmif
   @mif "pB ! p
      @ROUT ATL_damm12x3x256_avx.S `@define mv @   vmovapd@`
      @ROUT ATL_samm24x3x256_avx.S `@define mv @   vmovaps@`
   @endmif
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io < 128
         @(mv) @(of)(@(p)), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 384
         @(mv) @(of)(@(p),i256), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 640
         @(mv) @(of)(@(p),i256,2), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 896
         @(mv) @(of)(@(p),i768), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 1152
         @(mv) @(of)(@(p),i256,4), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 1408
         @(mv) @(of)(@(p),i1280), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 1664
         @(mv) @(of)(@(p),i768,2), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 1920
         @(mv) @(of)(@(p),i1792), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 2176
         @(mv) @(of)(@(p),i256,8), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 2432
         @(mv) @(of)(@(p),i2304), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 2688
         @(mv) @(of)(@(p),i1280,2), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 2944
         @(mv) @(io0)(@(p)), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 3200
         @(mv) @(of)(@(p),i768,4), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 3456
         @(mv) @(io0)(@(p)), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 3712
         @(mv) @(of)(@(p),i1792,2), @(r)
      @endextract
   @endiif
   @iif io0 < 4736
      @iif io0 > 4479
         @iexp io @(io0) -4480 +
         @iexp io @(io) -128 +
         @iif io = 0
         @(mv) (@(p),i2304,2), @(r)
         @endiif
         @iif io ! 0
         @(mv) @(io)(@(p),i2304,2), @(r)
         @endiif
         @endextract
      @endiif
   @endiif
   @iif io0 < 5248
      @iif io0 > 4991
         @iexp io @(io0) -4992 +
         @iexp io @(io) -128 +
         @iif io = 0
         @(mv) (@(p),i1280,4), @(r)
         @endiif
         @iif io ! 0
         @(mv) @(io)(@(p),i1280,4), @(r)
         @endiif
         @endextract
      @endiif
   @endiif
   @iif io0 < 6272
      @iif io0 > 6015
         @iexp io @(io0) -6016 +
         @iexp io @(io) -128 +
         @iif io = 0
         @(mv) (@(p),i768,8), @(r)
         @endiif
         @iif io ! 0
         @(mv) @(io)(@(p),i768,8), @(r)
         @endiif
         @endextract
      @endiif
   @endiif
   @iif io0 < 7296
      @iif io0 > 7039
         @iexp io @(io0) -7040 +
         @iexp io @(io) -128 +
         @iif io = 0
         @(mv) (@(p),i1792,4), @(r)
         @endiif
         @iif io ! 0
         @(mv) @(io)(@(p),i1792,4), @(r)
         @endiif
         @endextract
      @endiif
   @endiif
   @iif io0 < 7296
      @iif io0 > 7039
         @iexp io @(io0) -7040 +
         @iexp io @(io) -128 +
         @iif io = 0
         @(mv) (@(p),i1792,4), @(r)
         @endiif
         @iif io ! 0
         @(mv) @(io)(@(p),i1792,4), @(r)
         @endiif
         @endextract
      @endiif
   @endiif
   @iif io0 < 9344
      @iif io0 > 9087
         @iexp io @(io0) -9088 +
         @iexp io @(io) -128 +
         @iif io = 0
         @(mv) (@(p),i2304,4), @(r)
         @endiif
         @iif io ! 0
         @(mv) @(io)(@(p),i2304,4), @(r)
         @endiif
         @endextract
      @endiif
   @endiif
   @iif io0 < 10368
      @iif io0 > 10111
         @iexp io @(io0) -10112 +
         @iexp io @(io) -128 +
         @iif io = 0
         @(mv) (@(p),i1280,8), @(r)
         @endiif
         @iif io ! 0
         @(mv) @(io)(@(p),i1280,8), @(r)
         @endiif
         @endextract
      @endiif
   @endiif
@SKIP default case just indexes ptr
         @(mv) @(io0)(@(p)), @(r)
   @undef io0
   @undef of
   @undef mv
@ENDPROC
   mov $256, i256
   lea (i256, i256,2), i768
   lea (i256, i256,4), i1280
   lea (i256, i768,2), i1792
   lea (i256, i256,8), i2304
   ALIGN8
   .local MNLOOP
   MNLOOP:
/*
      .local NLOOP
      NLOOP:
*/
/*
 *       Peel first iteration of K loop to initialize rCx
 */
@iexp bo -128 0 +
         vmovapd -128(pA), rA0
         @callproc doref pB @(bo) rB0
         @iexp bo @(bo) @(sz) +
         vmulpd rA0, rB0, rC00
         vmovapd -96(pA), rA1
         vmulpd rA1, rB0, rC10
         vmovapd -64(pA), rA2
         vmulpd rA2, rB0, rC20
         @callproc doref pB @(bo) rB1
         @iexp bo @(bo) @(sz) +
         vmulpd rA0, rB1, rC01
         @callproc doref pB @(bo) rB2
         @iexp bo @(bo) @(sz) +
         vmulpd rA1, rB1, rC11
         #if KB > 1
         @callproc doref pB @(bo) rB0
         @iexp bo @(bo) @(sz) +
         #endif
         vmulpd rA2, rB1, rC21
         #if KB > 1
         @callproc doref pB @(bo) rB1
         @iexp bo @(bo) @(sz) +
         #endif
         vmulpd rA0, rB2, rC02
         #if KB > 1
            vmovapd -32(pA), rA0
         #endif
         vmulpd rA1, rB2, rC12
         #if KB > 1
            vmovapd (pA), rA1
         #endif
         vmulpd rA2, rB2, rC22
         #if KB > 1
            vmovapd 32(pA), rA2
         #endif
/*
 *       Fully unrolled K-loop
 */
@iexp ao 64 0 +
@skip @iexp bo -88 0 +
@iexp k 1 0 +
@iwhile k < 256
         #if KB > @(k)
   @iexp k @(k) 1 +
            vmulpd rB0, rA0, m0
            vaddpd rC00, m0, rC00
            @callproc doref pB @(bo) rB2
            @iexp bo @(bo) @(sz) +
            vmulpd rB0, rA1, m0
            vaddpd rC10, m0, rC10
            @iif @(k) = 1
               prefC -128(pC)
            @endiif
            @iif @(k) = 2
               prefC (pC)
            @endiif
            @iif @(k) = 3
               prefC 128(pC)
            @endiif
            @iif @(k) = 4
            prefA -128(pfA)
            @endiif
            @iif @(k) = 5
            prefA -64(pfA)
            @endiif
            @iif @(k) = 6
            prefA (pfA)
            @endiif
            @iif @(k) = 7
            prefB -128(pfB)
            @endiif
            @iif @(k) = 8
            prefB -64(pfB)
            @endiif
            @iif @(k) = 9
            prefB (pfB)
            @endiif
            vmulpd rB0, rA2, m0
            vaddpd rC20, m0, rC20
            #if KB > @(k)
               @callproc doref pB @(bo) rB0
               @iexp bo @(bo) @(sz) +
            #endif

            vmulpd rB1, rA0, m0
            vaddpd rC01, m0, rC01
            @iif @(k) = 1
               prefC -64(pC)
            @endiif
            @iif @(k) = 2
               prefC 64(pC)
            @endiif
            vmulpd rB1, rA1, m0
            vaddpd rC11, m0, rC11
            vmulpd rB1, rA2, m0
            vaddpd rC21, m0, rC21
            #if KB > @(k)
               @callproc doref pB @(bo) rB1
               @iexp bo @(bo) @(sz) +
            #endif
      
            vmulpd rB2, rA0, m0
            vaddpd rC02, m0, rC02
            #if KB > @(k)
               @callproc doref pA @(ao) rA0
               @iexp ao @(ao) 32 +
            #endif
            vmulpd rB2, rA1, m0
            vaddpd rC12, m0, rC12
            #if KB > @(k)
               @callproc doref pA @(ao) rA1
               @iexp ao @(ao) 32 +
            #endif
            vmulpd rB2, rA2, m0
            vaddpd rC22, m0, rC22
            #if KB > @(k)
               @callproc doref pA @(ao) rA2
               @iexp ao @(ao) 32 +
            #endif

         #endif
@endiwhile
         add incPF, pfA
         add incPF, pfB
/*
 *       Write answer back out to C
 */
         #ifdef BETA0
            vmovapd rC00, -128(pC)
            vmovapd rC10, -96(pC)
            vmovapd rC20, -64(pC)
            vmovapd rC01, -32(pC)
            vmovapd rC11, (pC)
            vmovapd rC21, 32(pC)
            vmovapd rC02, 64(pC)
            vmovapd rC12, 96(pC)
            vmovapd rC22, 128(pC)
/*
 *          Add running sum in rCx with original C, then store back out
 */
         #else
            BETCOP -128(pC), rC00, rC00
            vmovapd rC00, -128(pC)
            BETCOP -96(pC), rC10, rC10
            vmovapd rC10, -96(pC)
            BETCOP -64(pC), rC20, rC20
            vmovapd rC20, -64(pC)
            BETCOP -32(pC), rC01, rC01
            vmovapd rC01, -32(pC)
            BETCOP (pC), rC11, rC11
            vmovapd rC11, (pC)
            BETCOP 32(pC), rC21, rC21
            vmovapd rC21, 32(pC)
            BETCOP 64(pC), rC02, rC02
            vmovapd rC02, 64(pC)
            BETCOP 96(pC), rC12, rC12
            vmovapd rC12, 96(pC)
            BETCOP 128(pC), rC22, rC22
            vmovapd rC22, 128(pC)
         #endif
         add $12*3*8, pC        /* pC += MU*NU*sizeof */
         add $KB*3*@(sz), pB        /* pB += K*NU*sizeof */
      sub $1, nnu
      jnz MNLOOP

      mov nnu0, nnu
      mov pB0, pB
      add $KB*12*8, pA          /* pA += KB*MU*size */
   sub $1, nmu
   jnz MNLOOP
/* DONE: */
   movq    (%rsp), %rbp
   movq    8(%rsp), %rbx
   movq    16(%rsp), %r12
   movq    24(%rsp), %r13
   movq    32(%rsp), %r14
   movq    40(%rsp), %r15
   add $FSIZE, %rsp
   ret
@ROUT ATL_damm6x3x256_sse3.S ATL_damm6x3x4_sse3.S
@extract -b @(topd)/gen.inc what=crsetup
@extract -b @(topd)/cw.inc lang=c -define cwdate 2012
#include "atlas_asm.h"
#ifndef KB
   #define KB 0
#endif
/*
 * innermost (K-) loop items get priority on 1st 7 regs
 */
#define pA      %rcx
#define pB      %rdi
@ROUT ATL_damm6x3x256_sse3.S ATL_damm6x3x4_sse3.S
#define KK0     %rax
#define KK      %rdx
#define incA    %rsi
#define incB    %rbx
#define pA0     %r11
@ROUT ATL_damm6x3x256_sse3.S
#define i256    %rax
#define i768    %rdx   /* 3 * 256 */
#define i1280   %rsi   /* 5 * 256 */
#define i1792   %rbx   /* 7 * 256 */
#define i2304   %r11
@ROUT ATL_damm6x3x256_sse3.S ATL_damm6x3x4_sse3.S
/*
 * Second (N-) loop items get next level of priority on good regs
 */
#define pC      %rbp
#define pfA     %r8
#define pfB     %r9
#define incPF   %r10
#define nnu     %r12
/*
 * Outer- (M-) loop variables assigned to any regs
 */
#define nmu     %r13
#define pB0     %r14
#define nnu0    %r15
/*
 * floating point registers
 */
#define m0   %xmm0
#define rA0  %xmm1
#define rA1  %xmm2
#define rA2  %xmm3
#define rB0  %xmm4
#define rB1  %xmm5
#define rB2  %xmm6
#define rC00 %xmm7
#define rC10 %xmm8
#define rC20 %xmm9
#define rC01 %xmm10
#define rC11 %xmm11
#define rC21 %xmm12
#define rC02 %xmm13
#define rC12 %xmm14
#define rC22 %xmm15
/*
                    rdi      rsi    rdx        rcx         r8        r9
void ATL_USERMM(SZT nmu, SZT nnu, SZT K, CTYPE *pA, CTYPE *pB, TYPE *pC,
                  8(%rsp)    16(%rsp)     24(%rsp)
                CTYPE *pAn, CTYPE *pBn, CTYPE *pCn);
 */

#define FSIZE 6*8
#ifndef prefA
   #define prefA prefetcht0
#endif
#ifndef prefB
   #define prefB prefetcht2
#endif
#ifndef prefC
   #ifdef ATL_3DNow
      #define prefC prefetchw
   #else
      #define prefC prefetcht0
   #endif
#endif
#ifdef BETAN1
   #define BETCOP subpd
#else
   #define BETCOP addpd
#endif
#define movapd movaps
@define sz @8@
/*
                    rdi      rsi    rdx        rcx         r8        r9
void ATL_USERMM(SZT nmu, SZT nnu, SZT K, CTYPE *pA, CTYPE *pB, TYPE *pC,
                  8(%rsp)    16(%rsp)     24(%rsp)
                CTYPE *pAn, CTYPE *pBn, CTYPE *pCn);
 */
.text
.global ATL_asmdecor(ATL_USERMM)
ALIGN16
ATL_asmdecor(ATL_USERMM):
/*
 * Save callee-saved iregs
 */
   sub $FSIZE, %rsp
   movq    %rbp, 0(%rsp)
   movq    %rbx, 8(%rsp)
   movq    %r12, 16(%rsp)
   movq    %r13, 24(%rsp)
   movq    %r14, 32(%rsp)
   movq    %r15, 40(%rsp)
/*
 * Load paramaters
 */
   mov %rdi, nmu
   mov %rsi, nnu
   mov %r8, pB
   mov %r9, pC
   mov nnu, nnu0
   movq FSIZE+8(%rsp), pfB      /* pfB = pAn */
   movq FSIZE+16(%rsp), pfA     /* pf = pBn */
   cmp pfA, pB
   CMOVE pfB, pfA
   CMOVEq FSIZE+24(%rsp), pfB
   mov $6*3*@(sz), incPF           /* incPF = mu*nu*sizeof */
/*
 * Extend range of 1-byte offsets  by starting at -128
 */
   sub $-128, pA
   sub $-128, pB
   sub $-128, pC
   sub $-128, pfA
   sub $-128, pfB
   movq pB, pB0
@BEGINPROC doref p io r
   @define io0 @@(io)@
   @mif "pB = p
      @define mv @   movddup@
   @endmif
   @mif "pB ! p
      @define mv @   movapd@
   @endmif
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io < 128
         @(mv) @(of)(@(p)), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 384
         @(mv) @(of)(@(p),i256), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 640
         @(mv) @(of)(@(p),i256,2), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 896
         @(mv) @(of)(@(p),i768), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 1152
         @(mv) @(of)(@(p),i256,4), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 1408
         @(mv) @(of)(@(p),i1280), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 1664
         @(mv) @(of)(@(p),i768,2), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 1920
         @(mv) @(of)(@(p),i1792), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 2176
         @(mv) @(of)(@(p),i256,8), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 2432
         @(mv) @(of)(@(p),i2304), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 2688
         @(mv) @(of)(@(p),i1280,2), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 2944
         @(mv) @(io0)(@(p)), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 3200
         @(mv) @(of)(@(p),i768,4), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 3456
         @(mv) @(io0)(@(p)), @(r)
      @endextract
   @endiif
@skip   @callproc decio
   @iexp io @(io) -256 +
   @undef of
   @iif io = 0
      @define of @@
   @endiif
   @iif io ! 0
      @define of @@(io)@
   @endiif
   @iif io0 < 3712
         @(mv) @(of)(@(p),i1792,2), @(r)
      @endextract
   @endiif
   @iif io0 < 4736
      @iif io0 > 4479
         @iexp io @(io0) -4480 +
         @iexp io @(io) -128 +
         @iif io = 0
         @(mv) (@(p),i2304,2), @(r)
         @endiif
         @iif io ! 0
         @(mv) @(io)(@(p),i2304,2), @(r)
         @endiif
         @endextract
      @endiif
   @endiif
   @iif io0 < 5248
      @iif io0 > 4991
         @iexp io @(io0) -4992 +
         @iexp io @(io) -128 +
         @iif io = 0
         @(mv) (@(p),i1280,4), @(r)
         @endiif
         @iif io ! 0
         @(mv) @(io)(@(p),i1280,4), @(r)
         @endiif
         @endextract
      @endiif
   @endiif
   @iif io0 < 6272
      @iif io0 > 6015
         @iexp io @(io0) -6016 +
         @iexp io @(io) -128 +
         @iif io = 0
         @(mv) (@(p),i768,8), @(r)
         @endiif
         @iif io ! 0
         @(mv) @(io)(@(p),i768,8), @(r)
         @endiif
         @endextract
      @endiif
   @endiif
   @iif io0 < 7296
      @iif io0 > 7039
         @iexp io @(io0) -7040 +
         @iexp io @(io) -128 +
         @iif io = 0
         @(mv) (@(p),i1792,4), @(r)
         @endiif
         @iif io ! 0
         @(mv) @(io)(@(p),i1792,4), @(r)
         @endiif
         @endextract
      @endiif
   @endiif
   @iif io0 < 7296
      @iif io0 > 7039
         @iexp io @(io0) -7040 +
         @iexp io @(io) -128 +
         @iif io = 0
         @(mv) (@(p),i1792,4), @(r)
         @endiif
         @iif io ! 0
         @(mv) @(io)(@(p),i1792,4), @(r)
         @endiif
         @endextract
      @endiif
   @endiif
   @iif io0 < 9344
      @iif io0 > 9087
         @iexp io @(io0) -9088 +
         @iexp io @(io) -128 +
         @iif io = 0
         @(mv) (@(p),i2304,4), @(r)
         @endiif
         @iif io ! 0
         @(mv) @(io)(@(p),i2304,4), @(r)
         @endiif
         @endextract
      @endiif
   @endiif
   @iif io0 < 10368
      @iif io0 > 10111
         @iexp io @(io0) -10112 +
         @iexp io @(io) -128 +
         @iif io = 0
         @(mv) (@(p),i1280,8), @(r)
         @endiif
         @iif io ! 0
         @(mv) @(io)(@(p),i1280,8), @(r)
         @endiif
         @endextract
      @endiif
   @endiif
@SKIP default case just indexes ptr
         @(mv) @(io0)(@(p)), @(r)
   @undef io0
   @undef of
   @undef mv
@ENDPROC
@ROUT ATL_damm6x3x4_sse3.S
   mov pA, pA0
   mov KK, KK0
   mov $192, incA
   mov $96, incB
@ROUT ATL_damm6x3x256_sse3.S
   mov $256, i256
   lea (i256, i256,2), i768
   lea (i256, i256,4), i1280
   lea (i256, i768,2), i1792
   lea (i256, i256,8), i2304
@iexp bo -128 0 +
   @callproc doref pB @(bo) rB0
   @iexp bo @(bo) @(sz) +
   @callproc doref pB @(bo) rB1
   @iexp bo @(bo) @(sz) +
   ALIGN8
@ROUT ATL_damm6x3x4_sse3.S
@iexp bo -128 0 +
   @callproc doref pB @(bo) rB0
   @iexp bo @(bo) @(sz) +
   @callproc doref pB @(bo) rB1
   @iexp bo @(bo) @(sz) +
   nop ; nop ; nop ; nop ; nop
@ROUT ATL_damm6x3x256_sse3.S ATL_damm6x3x4_sse3.S
   .local MNLOOP
   MNLOOP:
/*
      .local NLOOP
      NLOOP:
*/
/*
 *       Peel first iteration of K loop to initialize rCx
 */
         movapd -128(pA), rC02
         movapd rC02, rC00
         mulpd rB0, rC00
         movapd -112(pA), rC12
         movapd rC12, rC10
         mulpd rB0, rC10
         movapd -96(pA), rC22
         movapd rC22, rC20
         mulpd rB0, rC20

         movapd rC02, rC01
         mulpd rB1, rC01
         @callproc doref pB @(bo) rB2
         @iexp bo @(bo) @(sz) +
         movapd rC12, rC11
         mulpd rB1, rC11
            prefC -128(pC)
         movapd rC22, rC21
         mulpd rB1, rC21

         mulpd rB2, rC02
         #if KB > 1
         @callproc doref pB @(bo) rB0
         @iexp bo @(bo) @(sz) +
         #endif
         mulpd rB2, rC12
         #if KB > 1
         @callproc doref pB @(bo) rB1
         @iexp bo @(bo) @(sz) +
         #endif
         mulpd rB2, rC22

@ROUT ATL_damm6x3x4_sse3.S
         movapd -80(pA), rA0
         movapd rA0, m0
         mulpd rB0, m0
         addpd m0, rC00
         movapd -64(pA), rA1
         movapd rA1, m0
         mulpd rB0, m0
         addpd m0, rC10
         movapd -48(pA), rA2
         mulpd rA2, rB0
         addpd rB0, rC20

            prefC 64(pC)
         movapd rA0, m0
         mulpd rB1, m0
         addpd m0, rC01
            prefA -128(pfA)
         movapd rA1, m0
         mulpd rB1, m0
         addpd m0, rC11
         mulpd rA2, rB1
         addpd rB1, rC21

         movddup -88(pB), rB2
         mulpd rB2, rA0
         addpd rA0, rC02
            movddup -80(pB), rB0
         mulpd rB2, rA1
         addpd rA1, rC12
            movddup -72(pB), rB1
         mulpd rB2, rA2
         addpd rA2, rC22

         movapd -32(pA), rA0
         movapd rA0, m0
         mulpd rB0, m0
         addpd m0, rC00
         movapd -16(pA), rA1
         movapd rA1, m0
         mulpd rB0, m0
         addpd m0, rC10
         movapd (pA), rA2
         mulpd rA2, rB0
         addpd rB0, rC20

            prefA -64(pfA)
         movapd rA0, m0
         mulpd rB1, m0
         addpd m0, rC01
            prefA (pfA)
         movapd rA1, m0
         mulpd rB1, m0
         addpd m0, rC11
         mulpd rA2, rB1
         addpd rB1, rC21

         movddup -64(pB), rB2
         mulpd rB2, rA0
         addpd rA0, rC02
            movddup -56(pB), rB0
         mulpd rB2, rA1
         addpd rA1, rC12
            movddup -48(pB), rB1
         mulpd rB2, rA2
         addpd rA2, rC22

         movapd 16(pA), rA0
         movapd rA0, m0
         mulpd rB0, m0
         addpd m0, rC00
         movapd 32(pA), rA1
         movapd rA1, m0
         mulpd rB0, m0
         addpd m0, rC10
         movapd 48(pA), rA2
         mulpd rA2, rB0
         addpd rB0, rC20

            prefB -128(pfB)
         movapd rA0, m0
         mulpd rB1, m0
         addpd m0, rC01
            prefB -64(pfB)
         movapd rA1, m0
         mulpd rB1, m0
         addpd m0, rC11
            prefB (pfB)
         mulpd rA2, rB1
         addpd rB1, rC21

         movddup -40(pB), rB2
         add incB, pB
         mulpd rB2, rA0
         addpd rA0, rC02
            movddup -128(pB), rB0
         mulpd rB2, rA1
         addpd rA1, rC12
            movddup -120(pB), rB1
         mulpd rB2, rA2
            add incA, pA
         addpd rA2, rC22
         sub $4, KK
         jz KLOOPDONE

         KLOOP:
            movapd -128(pA), rA0
            movapd rA0, m0
            mulpd rB0, m0
            addpd m0, rC00
            movapd -112(pA), rA1
            movapd rA1, m0
            mulpd rB0, m0
            addpd m0, rC10
            movapd -96(pA), rA2
            mulpd rA2, rB0
            addpd rB0, rC20

            movapd rA0, m0
            mulpd rB1, m0
            addpd m0, rC01
            movapd rA1, m0
            mulpd rB1, m0
            addpd m0, rC11
            mulpd rA2, rB1
            addpd rB1, rC21

            movddup -112(pB), rB2
            mulpd rB2, rA0
            addpd rA0, rC02
               movddup -104(pB), rB0
            mulpd rB2, rA1
            addpd rA1, rC12
               movddup -96(pB), rB1
            mulpd rB2, rA2
            addpd rA2, rC22

            movapd -80(pA), rA0
            movapd rA0, m0
            mulpd rB0, m0
            addpd m0, rC00
            movapd -64(pA), rA1
            movapd rA1, m0
            mulpd rB0, m0
            addpd m0, rC10
            movapd -48(pA), rA2
            mulpd rA2, rB0
            addpd rB0, rC20

            movapd rA0, m0
            mulpd rB1, m0
            addpd m0, rC01
            movapd rA1, m0
            mulpd rB1, m0
            addpd m0, rC11
            mulpd rA2, rB1
            addpd rB1, rC21

            movddup -88(pB), rB2
            mulpd rB2, rA0
            addpd rA0, rC02
               movddup -80(pB), rB0
            mulpd rB2, rA1
            addpd rA1, rC12
               movddup -72(pB), rB1
            mulpd rB2, rA2
            addpd rA2, rC22

            movapd -32(pA), rA0
            movapd rA0, m0
            mulpd rB0, m0
            addpd m0, rC00
            movapd -16(pA), rA1
            movapd rA1, m0
            mulpd rB0, m0
            addpd m0, rC10
            movapd (pA), rA2
            mulpd rA2, rB0
            addpd rB0, rC20

            movapd rA0, m0
            mulpd rB1, m0
            addpd m0, rC01
            movapd rA1, m0
            mulpd rB1, m0
            addpd m0, rC11
            mulpd rA2, rB1
            addpd rB1, rC21

            movddup -64(pB), rB2
            mulpd rB2, rA0
            addpd rA0, rC02
               movddup -56(pB), rB0
            mulpd rB2, rA1
            addpd rA1, rC12
               movddup -48(pB), rB1
            mulpd rB2, rA2
            addpd rA2, rC22

            movapd 16(pA), rA0
            movapd rA0, m0
            mulpd rB0, m0
            addpd m0, rC00
            movapd 32(pA), rA1
            movapd rA1, m0
            mulpd rB0, m0
            addpd m0, rC10
            movapd 48(pA), rA2
            mulpd rA2, rB0
            addpd rB0, rC20

            movapd rA0, m0
            mulpd rB1, m0
            addpd m0, rC01
            movapd rA1, m0
            mulpd rB1, m0
            addpd m0, rC11
               add incA, pA
            mulpd rA2, rB1
            addpd rB1, rC21

            movddup -40(pB), rB2
            mulpd rB2, rA0
            addpd rA0, rC02
               movddup -32(pB), rB0
            mulpd rB2, rA1
            addpd rA1, rC12
               movddup -24(pB), rB1
            mulpd rB2, rA2
            add incB, pB
            addpd rA2, rC22
         sub $4, KK
         jnz KLOOP
         KLOOPDONE:
@ROUT ATL_damm6x3x256_sse3.S
/*
 *       Fully unrolled K-loop
 */
@define vsz @16@
@iexp ao -80 0 +
@iexp k 1 0 +
@iwhile k < 256
         #if KB > @(k)
   @iexp k @(k) 1 +
            @callproc doref pA @(ao) rA0
            @iexp ao @(ao) @(vsz) +
            movapd rA0, m0
            mulpd rB0, m0
            addpd m0, rC00
            @callproc doref pA @(ao) rA1
            @iexp ao @(ao) @(vsz) +
            movapd rA1, m0
            mulpd rB0, m0
            addpd m0, rC10
            @callproc doref pA @(ao) rA2
            @iexp ao @(ao) @(vsz) +
            mulpd rA2, rB0
            addpd rB0, rC20

            @iif @(k) = 1
               prefC -64(pC)
            @endiif
            @iif @(k) = 2
               prefC (pC)
            @endiif
            @iif @(k) = 3
               prefA -128(pfA)
            @endiif
            @iif @(k) = 4
               prefA -64(pfA)
            @endiif
            @iif @(k) = 5
               prefA (pfA)
            @endiif
            @iif @(k) = 6
               prefB -128(pfB)
            @endiif
            @iif @(k) = 7
               prefB -64(pfB)
            @endiif
            @iif @(k) = 8
               prefB (pfB)
            @endiif
            movapd rA0, m0
            mulpd rB1, m0
            addpd m0, rC01
            movapd rA1, m0
            mulpd rB1, m0
            addpd m0, rC11
            mulpd rA2, rB1
            addpd rB1, rC21

            @callproc doref pB @(bo) rB2
            @iexp bo @(bo) @(sz) +
            mulpd rB2, rA0
            addpd rA0, rC02
            #if KB > @(k)
            @callproc doref pB @(bo) rB0
            @iexp bo @(bo) @(sz) +
            #endif
            mulpd rB2, rA1
            addpd rA1, rC12
            #if KB > @(k)
            @callproc doref pB @(bo) rB1
            @iexp bo @(bo) @(sz) +
            #endif
            mulpd rB2, rA2
            addpd rA2, rC22
         #endif
@endiwhile
@ROUT ATL_damm6x3x256_sse3.S ATL_damm6x3x4_sse3.S
         add incPF, pfA
         add incPF, pfB
/*
 *       Write answer back out to C
 */
         #ifdef BETA0
            movapd rC00, -128(pC)
            movapd rC10, -112(pC)
            movapd rC20, -96(pC)
            movapd rC01, -80(pC)
            movapd rC11, -64(pC)
            movapd rC21, -48(pC)
            movapd rC02, -32(pC)
            movapd rC12, -16(pC)
            movapd rC22, (pC)
/*
 *          Add running sum in rCx with original C, then store back out
 */
         #else
            BETCOP -128(pC), rC00
            movapd rC00, -128(pC)
            BETCOP -112(pC), rC10
            movapd rC10, -112(pC)
            BETCOP -96(pC), rC20
            movapd rC20, -96(pC)
            BETCOP -80(pC), rC01
            movapd rC01, -80(pC)
            BETCOP -64(pC), rC11
            movapd rC11, -64(pC)
            BETCOP -48(pC), rC21
            movapd rC21, -48(pC)
            BETCOP -32(pC), rC02
            movapd rC02, -32(pC)
            BETCOP -16(pC), rC12
            movapd rC12, -16(pC)
            BETCOP (pC), rC22
            movapd rC22, (pC)
         #endif
@ROUT ATL_damm6x3x256_sse3.S `         add $KB*3*@(sz), pB        /* pB += K*NU*sizeof */`
         add $6*3*8, pC        /* pC += MU*NU*sizeof */
         movddup -128(pB), rB0
      sub $1, nnu
         movddup -120(pB), rB1
@ROUT ATL_damm6x3x4_sse3.S `         mov KK0, KK`
@ROUT ATL_damm6x3x4_sse3.S `         mov pA0, pA`
      jnz MNLOOP

         movddup -128(pB0), rB0
      mov nnu0, nnu
         movddup -120(pB0), rB1
      mov pB0, pB
@ROUT ATL_damm6x3x4_sse3.S
      lea (KK, KK, 4), pA      /* pA = 5*K */
      add KK, pA               /* pA = 6*K = MU*K */
      shl $3, pA               /* pA = MU*K*sizeof */
      add pA0, pA              /* pA = A + MU*K*sizeof */
      mov pA, pA0
@ROUT ATL_damm6x3x256_sse3.S
      add $KB*6*8, pA          /* pA += KB*MU*size */
@ROUT ATL_damm6x3x256_sse3.S ATL_damm6x3x4_sse3.S
   sub $1, nmu
   jnz MNLOOP
/* DONE: */
   movq    (%rsp), %rbp
   movq    8(%rsp), %rbx
   movq    16(%rsp), %r12
   movq    24(%rsp), %r13
   movq    32(%rsp), %r14
   movq    40(%rsp), %r15
   add $FSIZE, %rsp
   ret
