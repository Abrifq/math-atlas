@ROUT gmmsearch
@extract -b @(topd)/cw.inc lang=c -def cwdate 2009
/*
 ****************************************************************************
 * This search exercises the main generator, emit_mm.c, and finds the best
 * parameters to use for the mmK.  It does not handle cleanup or no-copy
 * searches. It produces the file res/<pre>gMMRES.sum as output.
 * Here are the emit_mm options that it exercises:
 *   fftch, iftch, nftch, muladd, lat, mu, nu, ku, NB (MB=KB=NB), pref
 * Important options it does *not* exercise include:
 *   Loop order --> always NMK, 
 *   TA,TB      --> Trans, NoTrans
 *   lda        --> kb (compiletime constant)
 *   ldb        --> kb (compiletime constant)
 *   ldc        --> MAX(mb, 120) (runtime constant)
 *   csA        --> always 1
 *   csB        --> always 1
 *   csC        --> always 1 for real, always 2 for complex
 *   alpha      --> always 1.0
 *   beta       --> timing always on 1
 *   M, N, K    --> always compiletime variables equal to NB
 ****************************************************************************
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <string.h>
#include "atlas_misc.h"
#include "atlas_fopen.h"
#include "atlas_prefetch.h"
#include "atlas_gentesttime.h"
#include "atlas_mmtesttime.h"

void PrintUsage(char *name, int ierr, char *flag)
{
   if (ierr > 0)
      fprintf(stderr, "Bad argument #%d: '%s'\n",
              ierr, flag ? flag : "Not enough arguments");
   else if (ierr < 0)
      fprintf(stderr, "ERROR: %s\n", flag);
   fprintf(stderr, "USAGE: %s [flags]:\n", name);
   fprintf(stderr, "   -v # : verbosity; higher numbers print out more\n");
   fprintf(stderr, "   -p [s,d,c,z]: set precision prefix \n");
   fprintf(stderr, "   -b <nb> : use this NB, rather than search\n");
   fprintf(stderr, "   -m <mu> : use this M unroll rather than search\n");
   fprintf(stderr, "   -n <nu> : use this N unroll rather than search\n");
   fprintf(stderr, "   -F[i,n,f] : use initial, number and force fetch setting rather than search\n");
   fprintf(stderr, 
"   -k <ku> : use this K unroll rather than search (-1 means fully unroll)\n");
   exit(ierr ? ierr : -1);
}

void GetFlags(int nargs, char **args, char *pre, int *NB, int *MU, int *NU, 
              int *KU, int *verb, int *IFTCH, int *NFTCH, int *FFTCH)
{
   int i;

   *pre = 'd';
   *verb = 1;
   *MU = *NU = *KU = *IFTCH = *NFTCH = *FFTCH = 0;
   for (i=1; i < nargs; i ++)
   {
      if (args[i][0] != '-')
         PrintUsage(args[0], i, args[i]);
      switch(args[i][1])
      {
      case 'p':  /* -p <pre> */
         if (++i >= nargs)
            PrintUsage(args[0], i, NULL);

         ch = tolower(args[i][0]);
         assert(ch == 's' || ch == 'd' || ch == 'c' || ch == 'z');
         *pre = ch;
         break;
      case 'v':
         if (++i >= nargs)
            PrintUsage(args[0], i, NULL);
         *verb = atoi(args[i]);
         break;
      case 'b':
         if (++i >= nargs)
            PrintUsage(args[0], i, NULL);
         *NB = atoi(args[i]);
         break;
      default:
         PrintUsage(args[0], i, args[i]);
      }
   }
}

main(int nargs, char **args)
{
   int verb
   char pre;
}
