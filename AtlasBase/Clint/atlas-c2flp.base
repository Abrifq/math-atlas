@ROUT ! Make.c2flp atlas_C2Flapack.h C_lapack.h
@extract -b @(topd)/gen.inc what=crsetup
@extract -b @(topd)/gen.inc what=cw @(cw08)
#include "atlas_misc.h"
#include "atlas_f77.h"
#include "atlas_C2Flapack.h"

@ROUT larft
   @define rt @larft@
@ROUT geqrf
   @define rt @geqrf@
@ROUT geqlf
   @define rt @geqlf@
@ROUT gerqf
   @define rt @gerqf@
@ROUT gelqf
   @define rt @gelqf@
@ROUT gels
   @define rt @gels@
@ROUT ormqr
   @define rt @ormqr@
@ROUT ormql
   @define rt @ormql@
@ROUT ormrq
   @define rt @ormrq@
@ROUT ormlq
   @define rt @ormlq@
@ROUT unmqr
   @define rt @unmqr@
@ROUT unmql
   @define rt @unmql@
@ROUT unmrq
   @define rt @unmrq@
@ROUT unmlq
   @define rt @unmlq@
@ROUT geqrf geqlf gerqf gelqf gels @\
      ormqr unmqr ormql unmql ormrq unmrq ormlq unmlq
#if defined(NoChange)
   #define F77@up@(rt) Mjoin(PRE,@(rt))
#elif defined (UpCase)
   #define F77@up@(rt) Mjoin(PREU,@up@(rt))
#elif defined (Add_) || defined(Add__)
   #define F77@up@(rt) Mjoin(PRE,@(rt)_)
#endif
#define PC2F Mjoin(ATL_C2F,PRE)

@ROUT gels
int Mjoin(PC2F,gels_wrk)(const enum CBLAS_TRANSPOSE TA, ATL_CINT M, ATL_CINT N,
                         ATL_CINT NRHS, TYPE *A, ATL_CINT lda, 
                         TYPE *B, ATL_CINT ldb, TYPE *wrk, ATL_INT lwrk)
{
#if defined(StringSunStyle)
   F77_INTEGER ONE=1;
#elif defined(StringStructVal) || defined(StringStructPtr) || \
      defined(StringCrayStyle)
   F77_CHAR F77trans;
#endif
   F77_INTEGER F77M=M, F77N=N, F77NRHS=NRHS, F77lda=lda, F77ldb=ldb, 
               F77lwrk = lwrk, F77info;
#if defined(StringSunStyle)
   void F77@up@(rt)(char*, F77_INTEGER*, F77_INTEGER*, F77_INTEGER*, TYPE*,
               F77_INTEGER*, TYPE*, F77_INTEGER*, TYPE*, F77_INTEGER*, 
               F77_INTEGER*, F77_INTEGER);
#elif defined(StringStructPtr)
   void F77@up@(rt)(F77_CHAR*, F77_INTEGER*, F77_INTEGER*, F77_INTEGER*, TYPE*,
               F77_INTEGER*, TYPE*, F77_INTEGER*, TYPE*, F77_INTEGER*, 
               F77_INTEGER*);
#else
   void F77@up@(rt)(F77_CHAR, F77_INTEGER*, F77_INTEGER*, F77_INTEGER*, TYPE*,
               F77_INTEGER*, TYPE*, F77_INTEGER*, TYPE*, F77_INTEGER*, 
               F77_INTEGER*);
#endif
   char ctrans;

   if (TA == CblasNoTrans) ctrans = 'N';
   else if (TA == CblasTrans) ctrans = 'T';
   else ctrans = 'C';
#if defined(StringCrayStyle)
   f77trans = ATL_C2F_TransChar(cuplo);
#elif defined(StringStructVal) || defined(StringStructPtr)
   f77trans.len = 1;
   f77trans.cp = &ctrans;
#elif !defined(StringSunStyle)
   fprintf(stderr, "\n\nF77/C interface not defined!!\n\n");
   exit(-1);
#endif

#if defined(StringSunStyle)
   F77@up@(rt)(&ctrans, &F77M, &F77N, &F77NRHS, A, &F77lda, B, &F77ldb, 
           wrk, &F77lwrk, &F77info, ONE);
#elif defined(StringStructPtr)
   F77@up@(rt)(&f77trans, &F77M, &F77N, &F77NRHS, A, &F77lda, B, &F77ldb, 
           wrk, &F77lwrk, &F77info);
#elif defined(StringStructVal) || defined(StringCrayStyle)
   F77@up@(rt)(f77trans, &F77M, &F77N, &F77NRHS, A, &F77lda, B, &F77ldb, 
           wrk, &F77lwrk, &F77info);
#endif
   return(F77info);
}

int Mjoin(PC2F,gels)(const enum CBLAS_TRANSPOSE TA, ATL_CINT M, ATL_CINT N,
                     ATL_CINT NRHS, TYPE *A, ATL_CINT lda, 
                     TYPE *B, ATL_CINT ldb)
{
   TYPE work[2];
   TYPE *wrk;
   ATL_INT lwrk;
   int iret;
/*
 * Query routine for optimal workspace, allocate it, and call routine with it
 */
   ATL_assert(!Mjoin(PC2F,gels_wrk)(TA, M, N, NRHS, A, lda, B, ldb, work, -1));
   lwrk = work[0];
   wrk = malloc(ATL_MulBySize(lwrk));
   ATL_assert(wrk);
   iret = Mjoin(PC2F,gels_wrk)(TA, M, N, NRHS, A, lda, B, ldb, wrk, lwrk);
   free(wrk);
   return(iret);
}
@ROUT unmqr ormqr unmql ormql unmrq ormrq unmlq ormlq
int Mjoin(PC2F,@(rt)_wrk)
   (const enum CBLAS_SIDE Side, const enum CBLAS_TRANSPOSE TA,
    ATL_CINT M, ATL_CINT N, ATL_CINT K, TYPE *A, ATL_CINT lda, TYPE *TAU, 
    TYPE *C, ATL_CINT ldc, TYPE *wrk, ATL_INT lwrk)
{
#if defined(StringSunStyle)
   F77_INTEGER ONE=1;
#elif defined(StringStructVal) || defined(StringStructPtr) || \
      defined(StringCrayStyle)
   F77_CHAR F77trans, F77Side;
#endif
   F77_INTEGER F77M=M, F77N=N, F77K=K, F77lda=lda, F77ldc=ldc, 
               F77lwrk = lwrk, F77info;
#if defined(StringSunStyle)
   void F77@up@(rt)(char*, char*, F77_INTEGER*, F77_INTEGER*, F77_INTEGER*, 
                 TYPE*, F77_INTEGER*, TYPE*, TYPE*, F77_INTEGER*, TYPE*,
                 F77_INTEGER*, F77_INTEGER*, F77_INTEGER, F77_INTEGER);
#elif defined(StringStructPtr)
   void F77@up@(rt)(F77_CHAR*, F77CHAR*,  F77_INTEGER*, F77_INTEGER*, 
                 F77_INTEGER*, TYPE*, F77_INTEGER*, TYPE*, TYPE*, F77_INTEGER*, 
                 TYPE*, F77_INTEGER*, F77_INTEGER*);
#else
   void F77@up@(rt)(F77_CHAR, F77_CHAR, F77_INTEGER*, F77_INTEGER*, 
                 F77_INTEGER*, TYPE*, F77_INTEGER*, TYPE*, TYPE*, F77_INTEGER*, 
                 TYPE*, F77_INTEGER*, F77_INTEGER*);
#endif
   char cside, ctrans;

   if (TA == CblasNoTrans) ctrans = 'N';
   else if (TA == CblasTrans) ctrans = 'T';
   else ctrans = 'C';
   if (Side == CblasLeft) cside = 'L';
   else cside = 'R';
#if defined(StringCrayStyle)
   f77side  = ATL_C2F_TransChar(cside);
   f77trans = ATL_C2F_TransChar(cuplo);
#elif defined(StringStructVal) || defined(StringStructPtr)
   f77trans.len = 1;
   f77trans.cp = &ctrans;
   f77side.len = 1;
   f77side.cp = &cside;
#elif !defined(StringSunStyle)
   fprintf(stderr, "\n\nF77/C interface not defined!!\n\n");
   exit(-1);
#endif

#if defined(StringSunStyle)
   F77@up@(rt)(&cside, &ctrans, &F77M, &F77N, &F77K, A, &F77lda, TAU, 
            C, &F77ldc, wrk, &F77lwrk, &F77info, ONE, ONE);
#elif defined(StringStructPtr)
   F77@up@(rt)(&f77side, &f77trans, &F77M, &F77N, &F77K, A, &F77lda, TAU,
            C, &F77ldc, wrk, &F77lwrk, &F77info);
#elif defined(StringStructVal) || defined(StringCrayStyle)
   F77@up@(rt)(&f77side, &f77trans, &F77M, &F77N, &F77K, A, &F77lda, TAU,
            C, &F77ldc, wrk, &F77lwrk, &F77info);
#endif
   return(F77info);
}

int Mjoin(PC2F,@(rt))
   (const enum CBLAS_SIDE Side, const enum CBLAS_TRANSPOSE TA, 
    ATL_CINT M, ATL_CINT N, ATL_CINT K, TYPE *A, ATL_CINT lda, TYPE *TAU, 
    TYPE *C, ATL_CINT ldc)
{
   TYPE work[2];
   void *vp;
   TYPE *wrk;
   ATL_INT lwrk;
   int iret;
/*
 * Query routine for optimal workspace, allocate it, and call routine with it
 */
   ATL_assert(!Mjoin(PC2F,@(rt)_wrk)(Side, TA, M, N, K, A, lda, TAU, C, ldc, 
                                     work, -1));
   lwrk = work[0];
   vp = malloc(ATL_MulBySize(lwrk) + ATL_Cachelen);
   ATL_assert(vp);
   wrk = ATL_AlignPtr(vp);
   iret = Mjoin(PC2F,@(rt)_wrk)(Side, TA, M, N, K, A, lda, TAU, C, ldc, 
                                wrk, lwrk);
   free(vp);
   return(iret);
}
@ROUT geqrf geqlf gerqf gelqf
int Mjoin(PC2F,@(rt)_wrk)(ATL_CINT M, ATL_CINT N, TYPE *A, ATL_CINT lda, 
                          TYPE *tau, TYPE *wrk, ATL_INT lwork)
{
   F77_INTEGER F77M=M, F77N=N, F77lda=lda, F77lwork=lwork, F77info;
   void F77@up@(rt)(F77_INTEGER *M, F77_INTEGER *N, TYPE *A, F77_INTEGER *lda,
                 TYPE *tau, TYPE *wrk, F77_INTEGER *lwork, F77_INTEGER *info);

   F77@up@(rt)(&F77M, &F77N, A, &F77lda, tau, wrk, &F77lwork, &F77info);
   return(F77info);
}

int Mjoin(PC2F,@(rt))(ATL_CINT M, ATL_CINT N, TYPE *A, ATL_CINT lda, TYPE *tau)
{
   TYPE tmp[2];
   TYPE *work;
   ATL_INT lwork, info;
/*
 * Get workspace requirements, do allocation, and call routine for real
 */
   ATL_assert(!Mjoin(PC2F,@(rt)_wrk)(M, N, A, lda, tau, tmp, -1));
   lwork = tmp[0];
   work = malloc(lwork*ATL_sizeof);
   ATL_assert(work);
   info = Mjoin(PC2F,@(rt)_wrk)(M, N, A, lda, tau, work, lwork);
   free(work);
   return(info);
}
@ROUT larft
void Mjoin(PC2F,@(rt))
   (const enum CBLAS_UPLO Uplo, const enum CBLAS_ORDER ROC, 
    ATL_CINT N, ATL_CINT K, TYPE *V, ATL_CINT ldv, const TYPE *tau, 
    TYPE *T, ATL_CINT ldt)
{
#if defined(StringSunStyle)
   F77_INTEGER ONE=1;
#elif defined(StringStructVal) || defined(StringStructPtr) || \
      defined(StringCrayStyle)
   F77_CHAR F77direct, F77storev;
#endif
   F77_INTEGER F77N=N, F77K=K, F77ldv=ldv, F77ldt=ldt, F77info;
   char direct, storev;

#if defined(StringSunStyle)
   void F77LARFT(char*, char*, F77_INTEGER*, F77_INTEGER*, TYPE*, F77_INTEGER*,
                 const TYPE*, TYPE*, F77_INTEGER*, F77_INTEGER, F77_INTEGER);
#elif defined(StringStructPtr)
   void F77LARFT(F77_CHAR*, F77_CHAR*, F77_INTEGER*, F77_INTEGER*, TYPE*, 
                 F77_INTEGER*, const TYPE*, TYPE*, F77_INTEGER*);
#else
   void F77LARFT(F77_CHAR, F77_CHAR, F77_INTEGER*, F77_INTEGER*, TYPE*, 
                 F77_INTEGER*, const TYPE*, TYPE*, F77_INTEGER*);
#endif

   direct = (Uplo == CblasUpper) ? 'F' : 'B';
   storev = (ROC == CblasRowMajor) ? 'R' : 'C';
#if defined(StringCrayStyle)
   f77direct = ATL_C2F_TransChar(direct);
   f77storev = ATL_C2F_TransChar(storev);
#elif defined(StringStructVal) || defined(StringStructPtr)
   f77direct.len = f77storev.len = 1;
   f77direct.cp = &direct;
   f77storev.cp = &storev;
#elif !defined(StringSunStyle)
   fprintf(stderr, "\n\nF77/C interface not defined!!\n\n");
   exit(-1);
#endif

#if defined(StringSunStyle)
   F77LARFT(&direct, &storev, &F77N, &F77K, V, &F77ldv, tau, T, &F77ldt, 
            ONE, ONE);
#elif defined(StringStructPtr)
   F77LARFT(&f77direct, &f77storev, &F77N, &F77K, V, &F77ldv, tau, T, &F77ldt);
#elif defined(StringStructVal) || defined(StringCrayStyle)
   F77LARFT(f77direct, f77storev, &F77N, &F77K, V, &F77ldv, tau, T, &F77ldt);
#endif
}
@ROUT C_lapack.h
#include "clapack.h"

/*
 ************************************************************
 * The following routines are provided natively by ATLAS in C
 ************************************************************
 */
@whiledef pre z c d s
#define C_@(pre)posv(Uplo_, N_, NRHS_, A_, lda_, B_, ldb_) \
   clapack_@(pre)posv(CblasColMajor, Uplo_, N_, NRHS_, A_, lda_, B_, ldb_)
#define C_@(pre)gesv(N_, NRHS_, A_, lda_, ipiv_, B_, ldb_) \
   clapack_@(pre)gesv(CblasColMajor, N_, NRHS_, A_, lda_, ipiv_, B_, ldb_)

#define C_@(pre)potrf(Uplo_, N_, A_, lda_) \
   clapack_@(pre)potrf(CblasColMajor, Uplo_, N_, A_, lda_)
#define C_@(pre)getrf(M_, N_, A_, lda_, ipiv_) \
   clapack_@(pre)getrf(CblasColMajor, M_, N_, A_, lda_, ipiv_)

#define C_@(pre)potrs(Uplo_, N_, NRHS_, A_, lda_, B_, ldb_) \
   clapack_@(pre)potrs(CblasColMajor, Uplo_, N_, NRHS_, A_, lda_, B_, ldb_)
#define C_@(pre)getrs(Trans_, N_, NRHS_, A_, lda_, ipiv_, B_, ldb_) \
   clapack_@(pre)getrs(CblasColMajor, Trans_, N_, NRHS_, A_, lda_, ipiv_, B_, ldb_)

#define C_@(pre)potri(Uplo_, N_, A_, lda_) \
   clapack_@(pre)potrs(CblasColMajor, Uplo_, N_, A_, lda_)
#define C_@(pre)trtri(Uplo_, Diag_, N_, A_, lda_) \
   clapack_@(pre)potrs(CblasColMajor, Uplo_, Diag_, N_, A_, lda_)
#define C_@(pre)laumm(Uplo_, N_, A_, lda_) \
   clapack_@(pre)laumm(CblasColMajor, Uplo_, N_, A_, lda_)

@endwhile

/* 
 *****************************************************************************
 * The following routines are available in ATLAS only if a F77 LAPACK has been
 * provided to ATLAS.  These routines are accessed through the C-to-Fortran77
 * wrappers available in ATLAS/interfaces/lapack/C2F/src
 *****************************************************************************
 */
#include "atlas_C2Flapack.h"

/*
 * ----------------------------------------------------------------------------
 * These routines take workspace, and thus come in two flavors: rout & rout_wrk
 * ----------------------------------------------------------------------------
 */
@whiledef pre z c d s
   @whiledef rt gels
#define C_@(pre)@(rt) ATL_C2F@(pre)@(rt)
#define C_@(pre)@(rt)_wrk ATL_C2F@(pre)@(rt)_wrk
   @endwhile
@endwhile
@ROUT atlas_C2Flapack.h
/*
 * This routine prototypes the C wrappers to the Fortran77 LAPACK routines
 * (i.e., those LAPACK routines not natively provided by ATLAS).
 * See "clapack.h" for the prototypes of ATLAS's native LAPACK routines.
 */
#ifndef ATLAS_C2FLAPACK_H
   #define ATLAS_C2FLAPACK_H

@multidef typ double float double float
@whiledef pre z c d s
@beginskip
   @whiledef rt geqrf geqlf gerqf gelqf
int ATL_C2F@(pre)@(rt)(ATL_CINT M, ATL_CINT N, @(typ) *A, ATL_CINT lda, @(typ) * tau);
int ATL_C2F@(pre)@(rt)_wrk(ATL_CINT M, ATL_CINT N, @(typ) *A, ATL_CINT lda, @(typ) *tau, @(typ) *wrk, ATL_INT lwork);
#define ATL_C2F@(pre)@(rt)_wrk__    /* signal that this func exists */
   @endwhile
@endskip
int ATL_C2F@(pre)gels(const enum CBLAS_TRANSPOSE TA, ATL_CINT M, ATL_CINT N,
                 ATL_CINT NRHS, @(typ) *A, ATL_CINT lda, 
                 @(typ) *B, ATL_CINT ldb);
int ATL_C2F@(pre)gels_wrk(const enum CBLAS_TRANSPOSE TA, ATL_CINT M, ATL_CINT N,
                    ATL_CINT NRHS, @(typ) *A, ATL_CINT lda, 
                    @(typ) *B, ATL_CINT ldb, @(typ) *wrk, ATL_INT lwrk);
#define ATL_C2F@(pre)gels_wrk__    /* signal that this func exists */
@beginskip
void ATL_C2F@(pre)larft
   (const enum CBLAS_UPLO Uplo, const enum CBLAS_ORDER ROC, 
    ATL_CINT N, ATL_CINT K, @(typ) *V, ATL_CINT ldv, 
    const @(typ) *tau, @(typ) *T, ATL_CINT ldt);
@endskip
   @undef typ
@endwhile
/*
 * Routines in complex precisions only
 */
@multidef typ double float
@whiledef pre z c
   @whiledef rt qr rq lq ql
int ATL_C2F@(pre)unm@(rt)
   (const enum CBLAS_SIDE S, const enum CBLAS_TRANSPOSE TA, 
    ATL_CINT M, ATL_CINT N, ATL_CINT K, @(typ) *A, ATL_CINT lda, @(typ) *TAU, 
    @(typ) *C, ATL_CINT ldc);
int ATL_C2F@(pre)unm@(rt)_wrk
   (const enum CBLAS_SIDE S, const enum CBLAS_TRANSPOSE TA, 
    ATL_CINT M, ATL_CINT N, ATL_CINT K, @(typ) *A, ATL_CINT lda, @(typ) *TAU, 
    @(typ) *C, ATL_CINT ldc, @(typ) *wrk, ATL_INT lwrk);
#define ATL_C2F@(pre)unm@(rt)_wrk__    /* signal that this func exists */
   @endwhile
   @undef typ
@endwhile
/*
 * Routines in real precisions only
 */
@multidef typ double float
@whiledef pre d s
   @whiledef rt qr rq lq ql
int ATL_C2F@(pre)orm@(rt)
   (const enum CBLAS_SIDE S, const enum CBLAS_TRANSPOSE TA,
    ATL_CINT M, ATL_CINT N, ATL_CINT K, @(typ) *A, ATL_CINT lda, @(typ) *TAU, 
    @(typ) *C, ATL_CINT ldc);
int ATL_C2F@(pre)orm@(rt)_wrk
   (const enum CBLAS_SIDE S, const enum CBLAS_TRANSPOSE TA,
    ATL_CINT M, ATL_CINT N, ATL_CINT K, @(typ) *A, ATL_CINT lda, @(typ) *TAU, 
    @(typ) *C, ATL_CINT ldc, @(typ) *wrk, ATL_INT lwrk);
#define ATL_C2F@(pre)orm@(rt)_wrk__    /* signal that this func exists */
   @endwhile
   @undef typ
@endwhile

#endif   /* end ifdef ATLAS_C2FLAPACK_H */
@ROUT Make.c2flp
include Make.inc
mySRCdir = $(SRCdir)/interfaces/lapack/C2F/src

@whiledef pre z c d s
   @addkeys typ=@(pre)
@declare "@(pre)obj = " y y
   @whiledef rt gels
      ATL_C2F@(pre)@(rt).o
   @endwhile
   @whiledef rt qr ql rq lq
      @typ d s
         ATL_C2F@(pre)orm@(rt).o
      @typ z c
         ATL_C2F@(pre)unm@(rt).o
      @typ !
   @endwhile
   @killkeys typ
@endwhile

ptlib : tlib
all :
	$(MAKE) lib
	- $(MAKE) tlib

clean : dclean sclean zclean cclean dtclean stclean ztclean ctclean
#
# NOTE: only build C2F interface if F77 LAPACK exists; otherwise, we will
#       not be able to build dynamic libs due to unsatisfied calls to F77LAPACK
#
@whiledef pre z c d s
   @define lib @@
   @define lib @PT@
   @define pt @@
   @whiledef pt t
@(pre)@(pt)clean :
	rm -f $(@(pre)@(pt)obj) @(pre)@(pt)lib.grd
@(pt)lib : d@(pt)lib s@(pt)lib z@(pt)lib c@(pt)lib
@(pre)@(pt)lib : 
	if [ -d "$(FLAdir)" ]; then \
           $(MAKE) @(pre)@(pt)lib.grd ; \
        fi
@(pre)@(pt)lib.grd : $(@(pre)obj)
	if [ -d "$(FLAdir)" ]; then \
           $(ARCHIVER) $(ARFLAGS) $(@(lib)LAPACKlib) $(@(pre)obj) ; \
           $(RANLIB) $(@(lib)LAPACKlib) ; \
        fi
	touch @(pre)@(pt)lib.grd
      @undef lib
   @endwhile
@endwhile

@multidef typ DCPLX SCPLX
@whiledef pre z c
   @whiledef rt2 unmqr unmql unmrq unmlq
ATL_C2F@(pre)@(rt2).o : $(mySRCdir)/ATL_C2F@(rt2).c
	$(ICC) $(ICCFLAGS) -o $@ -c -D@(typ) $(mySRCdir)/ATL_C2F@(rt2).c
   @endwhile
   @undef typ
@endwhile
@multidef typ DREAL SREAL
@whiledef pre d s
   @whiledef rt2 ormqr ormql ormrq ormlq
ATL_C2F@(pre)@(rt2).o : $(mySRCdir)/ATL_C2F@(rt2).c
	$(ICC) $(ICCFLAGS) -o $@ -c -D@(typ) $(mySRCdir)/ATL_C2F@(rt2).c
   @endwhile
   @undef typ
@endwhile

@whiledef rt2 gels
   @multidef typ DCPLX SCPLX DREAL SREAL
   @whiledef pre z c d s
ATL_C2F@(pre)@(rt2).o : $(mySRCdir)/ATL_C2F@(rt2).c
	$(ICC) $(ICCFLAGS) -o $@ -c -D@(typ) $(mySRCdir)/ATL_C2F@(rt2).c
      @undef typ
   @endwhile

@endwhile
