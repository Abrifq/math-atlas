@skip
@skip Comments of the ATLAS multi-threaded BLAS L3 implementation      AP00
@skip
@skip Last modification : 08/31/00
@skip
@skip      C      V                      D                             V12345678
@skip
@define PTM_NOTES          @@(ATLAS_PTM_COMMENT) rout=ptm_notes@
@skip
@skip
@rout ATL_Sgemm
@rout ATL_Ssymm
@rout ATL_Ssyr2k
@rout ATL_Ssyrk
@rout ATL_Strmm
@rout ATL_Strsm
@rout ATL_ptgemm
/*
@extract @(PURPOSE)
 *
 * @(rname)  performs one of the matrix-matrix operations
 *
 *    C := alpha * op( A ) * op( B ) + beta * C,
 *
 * where op( X ) is one of
 *
 *    op( X ) = X   or   op( X ) = X'   or   op( X ) = conjg( X' ).
 *
 * Alpha and beta are scalars, and A, B and C are matrices, with op( A )
 * an m by k matrix,  op( B )  a  k by n matrix and  C an m by n matrix.
 *
@extract @(PTM_NOTES)
 *
@extract @(LINE)
 */
@rout ATL_ptsymm ATL_pthemm
/*
@extract @(PURPOSE)
 *
 * @(rname)  performs one of the matrix-matrix operations
 *
 *    C := alpha * A * B + beta * C,
 *
 * or
 *
 *    C := alpha * B * A + beta * C,
 *
@rout ATL_ptsymm
 * where alpha and beta are scalars,  A is a symmetric matrix and B and
 * C are m by n matrices.
@rout ATL_pthemm
 * where alpha and beta are scalars,  A is a Hermitian matrix and B and
 * C are m by n matrices.
@rout ATL_ptsymm ATL_pthemm
 *
@extract @(PTM_NOTES)
 *
@extract @(LINE)
 */
@rout ATL_ptsyrk ATL_ptherk
/*
@extract @(PURPOSE)
 *
@rout ATL_ptsyrk
 * @(rname)  performs one of the symmetric rank k operations
 *
 *    C := alpha * A * A' + beta * C,
 *
 * or
 *
 *    C := alpha * A' * A + beta * C,
 *
 * where alpha and beta are scalars, C is an n by n symmetric matrix and
 * A is an  n by k  matrix in the first case and a  k by n matrix in the
 * second case.
@rout ATL_ptherk
 * @(rname)  performs one of the Hermitian rank k operations
 *
 *    C := alpha * A * conjg( A' ) + beta * C,
 *
 * or
 *
 *    C := alpha * conjg( A' ) * A + beta * C,
 *
 * where alpha and beta are  real  scalars, C is an n by n Hermitian ma-
 * trix and  A is an n by k matrix in the first case and a k by n matrix
 * in the second case.
@rout ATL_ptsyrk ATL_ptherk
 *
@extract @(PTM_NOTES)
 *
@extract @(LINE)
 */
@rout ATL_ptsyr2k ATL_pther2k
/*
@extract @(PURPOSE)
 *
@rout ATL_ptsyr2k
 * @(rname) performs one of the symmetric rank 2k operations
 *
 *    C := alpha * A * B' + alpha * B * A' + beta * C,
 *
 * or
 *
 *    C := alpha * A' * B + alpha * B' * A + beta * C,
 *
 * where alpha and beta are scalars, C is an n by n symmetric matrix and
 * A and B are n by k matrices in the first case and k by n  matrices in
 * the second case.
@rout ATL_pther2k
 * @(rname) performs one of the Hermitian rank 2k operations
 *
 *    C := alpha * A * conjg( B )' + conjg( alpha ) * B * conjg( A )' +
 *         beta * C,
 *
 * or
 *
 *    C := alpha * conjg( A' ) * B + conjg( alpha ) * conjg( B' ) * A +
 *         beta * C,
 *
 * where  alpha  and  beta are scalars with  beta  real,  C is an n by n
 * Hermitian matrix and  A  and  B are n by k matrices in the first case
 * and k by n matrices in the second case.
@rout ATL_ptsyr2k ATL_pther2k
 *
@extract @(PTM_NOTES)
 *
@extract @(LINE)
 */
@rout ATL_pttrmm
/*
@extract @(PURPOSE)
 *
 * @(rname)  performs one of the matrix-matrix operations
 *
 *    B := alpha * op( A ) * B,   or    B := alpha * B * op( A ),
 *
 * where alpha is a scalar, B is an m by n matrix, A is a unit,  or non-
 * unit, upper or lower triangular matrix and op( X ) is one of
 *
 *    op( X ) = X   or   op( X ) = X'   or   op( X ) = conjg( X' ).
 *
@extract @(PTM_NOTES)
 *
@extract @(LINE)
 */
@rout ATL_pttrsm        
/*
@extract @(PURPOSE)
 *
 * @(rname)  solves one of the matrix equations
 *
 *    op( A ) * X = alpha * B,   or  X * op( A ) = alpha * B,
 *
 * where alpha is a scalar, X and B are m by n matrices, A is a unit, or
 * non-unit, upper or lower triangular matrix and op( A ) is one of
 *
 *    op( A ) = A   or   op( A ) = A'   or   op( A ) = conjg( A' ).
 *
 * The matrix X is overwritten on B.
 *
@extract @(PTM_NOTES)
 *
@extract @(LINE)
 */
@rout !
@skip
@skip
@undef PTM_NOTES
@skip
@skip
