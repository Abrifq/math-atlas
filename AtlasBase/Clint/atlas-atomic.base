@ROUT atlas_atmctr.h
#ifndef ATLAS_ATMCTR_H
   #define ATLAS_ATMCTR_H
   #include "atlas_tprim.h"
/* 
 * atmctr data structure has two variants.  The mutex version is of size
 * 2*SAFELS + sizeof(lock).  _new returns a SAFELS-aligned address, and the
 * data structure from this point is: [<cnt><off>][lock].
 * 
 * For systems where we have true atomic ctrs, the lock is ommitted, so size
 * 2*SAFELS.
 *
 * If <off> is nonzero it is the bytes to add to ac to get to the 
 * original malloc-returned ptr (used only in _free).
 */
   #ifndef ATL_ATM_ASM
      #if defined(ATL_GAS_x8632) || defined(ATL_GAS_x8664) || \
          defined(ATL_GAS_ARM64) || defined(ATL_GAS_WOW64)
         #define ATL_ATM_ASM 1  /* I've got assembly atomic ops */
      #else
         #define ATL_ATM_ASM 0  /* I do not have assembly atomic ops */
      #endif
   #endif

void *ATL_atmctr_init(void *vp, long cnt);
void *ATL_atmctr_new(long cnt);
void  ATL_atmctr_free(void *ac);
#if ! ATL_ATM_ASM
   #define ATL_atmctr_destroy(ac_) ATL_lock_destroy(ATL_IncBySafeLS(ac_))
   #define ATL_atmctr_sizeof (size_t) \
      ATL_AlignSafeLS(sizeof(ATL_lock_t)+ATL_SAFELS)
#else
   #define ATL_atmctr_sizeof ATL_SAFELS
   #define ATL_atmctr_destroy(ac_) 
#endif
/* All these functions return prior value */
long ATL_atmctr_set(void *ac, long val);
long ATL_atmctr_dec(void *ac);
long ATL_atmctr_add(void *ac, unsigned long val);

@skip long ATL_atmctr_get(void *ac); /* perform unsafe read */
#define ATL_atmctr_get(ac_) (*((volatile long*)(ac_)))
#endif
@ROUT ATL_atmctr_new
#include "atlas_atmctr.h"
void *ATL_atmctr_init(void *vp, long cnt)
{
   if (vp)
   {
      long *lp = ATL_AlignSafeLS(vp);
      void *lck;

      lp[0] = cnt;
      lp[1] = ((size_t)vp) - ((size_t)lp); /* will be negative or 0 */
      #if !ATL_ATM_ASM
         lck = ATL_IncBySafeLS(lp);
         ATL_lock_init(lck);
      #endif
      return(lp);
   }
   return(NULL);
}

void *ATL_atmctr_new(long cnt)
{
   void *vp, *lck;
   long *lp;
   #if ATL_ATM_ASM
      vp = malloc(ATL_SAFELS+ATL_SAFELS);
   #else
      vp = malloc(ATL_SAFELS+ATL_SAFELS+sizeof(ATL_lock_t));
   #endif
   ATL_assert(vp);
   return(ATL_atmctr_init(vp, cnt));
}
@ROUT ATL_atmctr_free
#include "atlas_atmctr.h"
void  ATL_atmctr_free(void *ac)
{
   long *lp=ac, off=lp[1];
   #if !ATL_ATM_ASM
      ATL_lock_destroy(ATL_IncBySafeLS(ac));
   #endif
   ac = ATL_AddBytesPtr(ac, lp[1]);
   free(ac);
}
@ROUT ATL_atmctr_set_mut
#include "atlas_atmctr.h"
#if !ATL_ATM_ASM
long ATL_atmctr_set(void *ac, long val)
{  /* RETURNS: old value of count */
   void *lck=ATL_IncBySafeLS(ac);
   long ret, *lp=ac;
   ATL_lock(lck);
   ret = *lp;
   *lp = val;
   ATL_unlock(lck);
   return(ret);
}
#endif
@ROUT ATL_atmctr_dec_mut
#include "atlas_atmctr.h"
#if !ATL_ATM_ASM
long ATL_atmctr_dec(void *ac)
{  /* RETURNS: old value of count */
   void *lck=ATL_IncBySafeLS(ac);
   long ret, *lp=ac;
   ATL_lock(lck);
   ret = *lp;
   if (ret > 0)
      *lp = ret-1;
   ATL_unlock(lck);
   return(ret);
}
#endif
@ROUT ATL_atmctr_add_mut
#include "atlas_atmctr.h"
#if !ATL_ATM_ASM
long ATL_atmctr_add(void *ac, unsigned long val)
{  /* RETURNS: old value of count */
   void *lck=ATL_IncBySafeLS(ac);
   long ret, *lp=ac;
   ATL_lock(lck);
   ret = *lp;
   *lp = ret + val;
   ATL_unlock(lck);
   return(ret);
}
#endif
@ROUT ATL_atmctr_dec_asm
   @define rt @dec@
@ROUT ATL_atmctr_add_asm
   @define rt @add@
@ROUT ATL_atmctr_set_asm
   @define rt @set@
@ROUT ATL_atmctr_dec_asm ATL_atmctr_add_asm ATL_atmctr_set_asm
#include "atlas_asm.h"
#include "atlas_asm.h"
#define ROUT ATL_asmdecor(ATL_atmctr_@(rt))
#ifdef ATL_GAS_x8664
@ROUT ATL_atmctr_dec_asm
   /* rax                     rdi  */
   /* int ATL_atmctr_dec(void *vp) */
@ROUT ATL_atmctr_add.S ATL_atmctr_set.S
   /* rax                     rdi                rsi  */
   /* int ATL_atmctr_@(rt)(void *vp, unsigned long val) */
@ROUT ATL_atmctr_dec_asm ATL_atmctr_add_asm ATL_atmctr_set.S
   .text
   ALIGN32
   .global ROUT
   ROUT:
      movq (%rdi), %rax       /* read cnt from memory */
      mov  %rax, %rcx         /* rcx = cnt */
@ROUT ATL_atmctr_dec_asm
      sub  $1, %rcx           /* rcx = cnt-1 */
      jl ZERO_RET             /* return 0 if count already below 1 */
@ROUT ATL_atmctr_add_asm
      add %rsi, %rcx          /* rcx = val+cnt */
@ROUT ATL_atmctr_set_asm
      mov %rsi, %rcx          /* rcx = val */
@ROUT ATL_atmctr_dec_asm ATL_atmctr_add_asm
      lock                    /* make cmpxchg atomic */
      cmpxchg %rcx, (%rdi)    /* st newcnt if mem still == oldcnt in rax */
      je DONE                 /* ZF set if cmpxchg wrote to mem */
   jmp ROUT                   /* ZF=0 means cmpxch failed, try again */
   ZERO_RET:
      xor %rax, %rax
   DONE:
   ret
#elif defined(ATL_GAS_WOW64)
@ROUT ATL_atmctr_dec_asm
   /* rax                      rcx  */
   /* int ATL_atmctr_@(rt)(void *vp) */
@ROUT ATL_atmctr_add_asm ATL_atmctr_set_asm
   /* rax                      rcx                rdx  */
   /* int ATL_atmctr_@(rt)(void *vp, unsigned long val) */
@ROUT ATL_atmctr_dec_asm ATL_atmctr_add_asm ATL_atmctr_set_asm
   .text
   ALIGN32
   .global ROUT
   ROUT:
      movq (%rcx), %rax       /* read cnt from memory */
@ROUT ATL_atmctr_dec_asm
      mov  %rax, %r8          /* r8 = cnt */
      subl $1, %r8            /* r8 = cnt-1 */
      jl ZERO_RET             /* return 0 if count already below 1 */
@ROUT ATL_atmctr_dec_asm ATL_atmctr_add_asm
      add %rdx, %r8           /* r8 = val+cnt */
@ROUT ATL_atmctr_dec_asm ATL_atmctr_add_asm
      lock                    /* make cmpxchg atomic */
      cmpxchg %r8, (%rcx)     /* st newcnt if mem still == oldcnt in rax */
      je DONE                 /* ZF set if cmpxchg wrote to mem */
   jmp ROUT                   /* ZF=0 means cmpxch failed, try again */
@ROUT ATL_atmctr_add_asm
   ZERO_RET:
      xor %rax, %rax
@ROUT ATL_atmctr_dec_asm ATL_atmctr_add_asm ATL_atmctr_set_asm
   DONE:
   ret
#elif defined(ATL_GAS_x8632)
@ROUT ATL_atmctr_dec_asm
   /* eax                    4(%esp)  */
   /* int ATL_DecAtomicCount(void *vp) */
   .text
   .global ROUT
   ROUT:
   movl 4(%esp), %edx
   ATOMIC_LOOP:
      movl (%edx), %eax       /* read cnt from memory */
      movl %eax, %ecx         /* ecx = cnt */
      subl $1, %ecx           /* ecx = cnt-1 */
      jl ZERO_RET             /* return 0 if count already below 1 */
      lock                    /* make cmpxchg atomic */
      cmpxchg %ecx, (%edx)    /* put cnt-1 in mem if mem still == cnt in eax */
      je DONE                 /* ZF set if cmpxchg wrote to mem */
   jmp ATOMIC_LOOP            /* ZF=0 means cmpxch failed, try again */

   ZERO_RET:
      xor %eax, %eax
@ROUT ATL_atmctr_add_asm ATL_atmctr_set_asm
   /* eax                  4(%esp)  8(%esp)  */
   /* int ATL_atmctr_@(rt)(void *vp, int val) */
   .text
   .global ROUT
   ROUT:
   push %esi
   movl 4+4(%esp), %edx       /* edx = ac */
   movl 4+8(%esp), %esi       /* esi = val */
   ATOMIC_LOOP:
      movl (%edx), %eax       /* read cnt from memory */
      movl %eax, %ecx         /* ecx = cnt */
@ROUT ATL_atmctr_add_asm `      add %esi, %ecx          /* ecx = cnt + val */`
@ROUT ATL_atmctr_set_asm `      mov %esi, %ecx          /* ecx = val */`
      lock                    /* make cmpxchg atomic */
      cmpxchg %ecx, (%edx)    /* st newcnt if mem still == oldcnt in eax */
      je DONE                 /* ZF set if cmpxchg wrote to mem */
   jmp ATOMIC_LOOP            /* ZF=0 means cmpxch failed, try again */
   pop %esi

@ROUT ATL_atmctr_dec_asm ATL_atmctr_add_asm
   DONE:
   ret
#elif defined(ATL_GAS_ARM64)
@ROUT ATL_atmctr_dec_asm
/* x0                        x0
/* long ATL_atmctr_dec(void *ac) */
@ROUT ATL_atmctr_add_asm ATL_atmctr_set_asm
/* x0                         x0                 x1 */
/* long ATL_atmctr_@(rt)(void *ac, unsigned long val) */
@ROUT ATL_atmctr_dec_asm ATL_atmctr_add_asm ATL_atmctr_set_asm
   .global Mjoin(PATL,atmcnt_@(rt))
   Mjoin(PATL,atmcnt_@(rt)):
   mov x3, x0            /* x3 = address of ctr */
@ROUT ATL_atmctr_set `   mov x2, x1            /* x2 = val */`
   ATOMIC_LOOP:
      ldxr x0, [x3]      /* exclusive read of cnt into return reg (x0) */
@ROUT ATL_atmctr_dec_asm
      subs x2, x0, 1     /* dec cnt, set cond codes */
      b.lt   ZERO_RET    /* return 0 if count already below 1 */
@ROUT ATL_atmctr_add_asm
      add x2, x0, x1     /* x2 = cnt + val */
@ROUT ATL_atmctr_dec_asm ATL_atmctr_add_asm ATL_atmctr_set_asm
      stxr w4, x2, [x3]  /* excl store newval, w4 0 on exclusive success */
   cbnz w4, ATOMIC_LOOP  /* if (w4 != 0) try again */
   ret
@ROUT ATL_atmctr_dec_asm
   ZERO_RET:
      eor w0, w0, w0
@ROUT ATL_atmctr_dec_asm ATL_atmctr_add_asm ATL_atmctr_set_asm
   ret
#endif
@ROUT testAC
#ifdef TEST_GLOBAL
   #include "atlas_gatmctr.h"
#else
   #include "atlas_atmctr.h"
   #include "atlas_threads.h"
   #define ATL_gatmctr_new(p_, cnt_, flg_) ATL_atmctr_new(cnt_)
   #define ATL_gatmctr_free(ac_) ATL_atmctr_free(ac_)
   #define ATL_gatmctr_print(fp_, ac_)
   #define ATL_gatmctr_dec(ac_, rnk_) ATL_atmctr_dec(ac_)
   #define ATL_GAC_MIX 0
#endif
#include "atlas_bitvec.h"
#define ATL_GETFLAGS 1
#include "atlas_genparse.h"

static long GN=500, NERR=0;
volatile static unsigned char *CNT;
static void *AC;
void DoWorkAC(void *vpp, int rank, int vrank)
{
   ATL_tpool_t *pp=vpp;
   const long N=GN;
   long cnt;
   while ((cnt = ATL_gatmctr_dec(AC, vrank)))
   {
      if (cnt < 1 || cnt > N)
      {
         fprintf(stderr, "   AtmCtr out of range: %lu\n", cnt);
         NERR++;
      }
      else
         CNT[N-cnt]++;
   }
}

void PrintUsage(char *name, int ierr, char *flag)
{
   if (ierr > 0)
      fprintf(stderr, "Bad argument #%d: '%s'\n",
              ierr, flag ? flag : "Not enough arguments");
   else if (ierr < 0)
      fprintf(stderr, "ERROR: %s\n", flag);
   fprintf(stderr, "USAGE: %s [flags]:\n", name);
   fprintf(stderr, "   -v <verb> [1]\n");
   fprintf(stderr, "   -f <flag> [NOPOLL]\n");
   fprintf(stderr, "   -F # <flag1> ... <flagN>\n");
   fprintf(stderr, "   -p <nthreads> [ATL_NTHREAD]\n");
   fprintf(stderr, "   -P <nthr0> <nthrN> <nthrINC> [ATL_NTHREAD]\n");
   fprintf(stderr, "   -n <cnt> [8111]\n");
   fprintf(stderr, "   -N <cnt0> <cntN> <cntINC> [8111]\n");
   fprintf(stderr, "   -g <gap> : nctrs = P-gap [0]\n");
   exit(ierr ? ierr : -1);
}

int GetFlags(int nargs, char **args, int *N0, int *NN, int *NINC,
             int *P0, int *PN, int *PINC, int **FLAGs, int *GAP)
{
   int i, P, verb=1;
   
   *GAP = 0;
   *P0 = *PN = *PINC = ATL_NTHREADS;
   *N0 = *NN = *NINC = 8111;
   *FLAGs=NULL;
   for (i=1; i < nargs; i++)
   {
      int WH=0;
      if (args[i][0] != '-')
         PrintUsage(args[0], i, args[i]);
      switch(args[i][1])
      {
      case 'p':
         if (++i >= nargs)
            PrintUsage(args[0], i, NULL);
         *P0 = *PN = *PINC = atoi(args[i]);
         if (*P0 == 0)
            *PN = -1;
         break;
      case 'g':
         if (++i >= nargs)
            PrintUsage(args[0], i, NULL);
         *GAP = atoi(args[i]);
         break;
      case 'n':
         if (++i >= nargs)
            PrintUsage(args[0], i, NULL);
         *N0 = *NN = *NINC = atoi(args[i]);
         break;
      case 'N':
         if (++i >= nargs)
            PrintUsage(args[0], i, NULL);
         *N0 = atoi(args[i]);
         if (++i >= nargs)
            PrintUsage(args[0], i, NULL);
         *NN = atoi(args[i]);
         if (++i >= nargs)
            PrintUsage(args[0], i, NULL);
         *NINC = atoi(args[i]);
         break;
      case 'P':
         if (++i >= nargs)
            PrintUsage(args[0], i, NULL);
         *P0 = atoi(args[i]);
         if (++i >= nargs)
            PrintUsage(args[0], i, NULL);
         *PN = atoi(args[i]);
         if (++i >= nargs)
            PrintUsage(args[0], i, NULL);
         *PINC = atoi(args[i]);
         break;
      case 'v':         /* -p <nthr> */
         if (++i >= nargs)
            PrintUsage(args[0], i, NULL);
         verb = atoi(args[i]);
         break;
      case 'F':
         *FLAGs = GF_GetIntList(nargs, args, i, 1);
         i += (*FLAGs)[0] + 1;
         break;
      case 'f':         /* -f <flag> */
         if (++i >= nargs)
            PrintUsage(args[0], i, NULL);
         *FLAGs = GF_GetIntList1(atoi(args[i]));
         break;
      default:
         PrintUsage(args[0], i, args[i]);
      }
   }
   if (*FLAGs == NULL)
      *FLAGs = GF_GetIntList1(ATL_GAC_MIX);
   return(verb);
}

int main(int nargs, char **args)
{
   void *ac;
   long i;
   int p, f, verb, N0, NN, incN, P0, PN, incP, *flgs, gap;
   unsigned long nerr=0;
   verb = GetFlags(nargs, args, &N0, &NN, &incN, &P0, &PN, &incP, &flgs, &gap);

/*
 * First just check that we can alloc/free (use valgrind to validate)
 */
   if (verb)
      fprintf(stderr, "%d of %s\n", __LINE__, __FILE__);
   ac = ATL_gatmctr_new(ATL_NTHREADS, ATL_NTHREADS*(ATL_NTHREADS+2), flgs[1]);
   ATL_gatmctr_free(ac);
   if (verb)
      fprintf(stderr, "%d of %s\n", __LINE__, __FILE__);
   ac = ATL_gatmctr_new(ATL_NTHREADS, ATL_NTHREADS, flgs[1]);
   ATL_gatmctr_free(ac);
   ac = ATL_gatmctr_new(ATL_NTHREADS, ATL_NTHREADS>>1, flgs[1]);
   if (verb)
      fprintf(stderr, "%d of %s\n", __LINE__, __FILE__);
   ATL_gatmctr_free(ac);
   if (verb)
      fprintf(stderr, "%d of %s\n", __LINE__, __FILE__);
   i = (PN > 1) ? PN : 2;
   ac = ATL_gatmctr_new(i, i-1, flgs[1]);
   ATL_gatmctr_free(ac);
   if (verb)
      fprintf(stderr, "%d of %s\n", __LINE__, __FILE__);
   ac = ATL_gatmctr_new(0, 0, flgs[1]);
   ATL_gatmctr_free(ac);
/*
 * Test basic functionality
 */
   for (f=0; f < flgs[0]; f++)
   {
      int flg = flgs[f+1];
      for (p=P0; p <= PN; p += incP)
      {
         int nctr = (p > gap) ? p-gap : 1;
         for (GN=N0; GN <= NN; GN += incN)
         {
            int err=0;
            CNT = calloc(GN, sizeof(char));
            AC = ac = ATL_gatmctr_new(nctr, GN, flg);
            fprintf(stderr, "\n\n");
            ATL_gatmctr_print(stderr, ac);
            fprintf(stderr, "TESTING P=%d, N=%d:\n", p, GN);
            ATL_goParallel(p, DoWorkAC, NULL, NULL, NULL);
            ATL_gatmctr_free(ac);
            for (i=0; i < GN; i++)
            {
               if (CNT[i] != 1)
               {
                  err++;
                  if (verb)
                     fprintf(stderr, "   CNT[%d] = %d, expected 1\n",i,CNT[i]);
               }
            }
            err += NERR;
            NERR = 0;
            fprintf(stderr, "DONE    P=%d, N=%d, NERR=%d\n", p, GN, err);
            nerr += err;
            free((void*)CNT);
         }
      }
   }
   fprintf(stderr, "\nDONE ALL TESTING, NERR=%d\n", nerr);
   free(flgs);
   return(nerr);
}
