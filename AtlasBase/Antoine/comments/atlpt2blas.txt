@skip
@skip Comments of the ATLAS multi-threaded BLAS L2 implementation      AP00
@skip
@skip Last modification : 08/31/00
@skip
@skip      C      V                      D                             V12345678
@skip
@define PTM_NOTES          @@(ATLAS_PTM_COMMENT) rout=ptm_notes@
@skip
@skip
@rout ATL_ptgemv ATL_ptgbmv
/*
@extract @(PURPOSE)
 *
 * @(rname) performs one of the matrix-vector operations
 *
 *    y := alpha * op( A ) * x + beta * y,
 *
 * where op( X ) is one of
 *
 *    op( X ) = X   or   op( X ) = conjg( X  )   or
 *
 *    op( X ) = X'  or   op( X ) = conjg( X' ).
 *
@rout ATL_ptgemv
 * where  alpha and beta are scalars, x and y are vectors and op( A ) is
 * an m by n matrix.
@rout ATL_ptgbmv
 * where  alpha and beta are scalars, x and y are vectors and op( A ) is
 * an m by n band matrix, with kl sub-diagonals and ku super-diagonals.
@rout ATL_ptgemv ATL_ptgbmv
 *
@extract @(PTM_NOTES)
 *
@extract @(LINE)
 */
@rout ATL_ptsymv ATL_ptsbmv ATL_ptspmv ATL_pthemv ATL_pthbmv ATL_pthpmv
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the matrix-vector operation
 *
 *    y := alpha * A * x + beta * y,
 *
@rout ATL_ptsymv
 * where alpha and beta are scalars, x and y are n-element vectors and A
 * is an n by n symmetric matrix.
@rout ATL_ptsbmv
 * where alpha and beta are scalars, x and y are n-element vectors and A
 * is an n by n symmetric band matrix, with k super-diagonals.
@rout ATL_ptspmv
 * where alpha and beta are scalars, x and y are n-element vectors and A
 * is an n by n symmetric matrix, supplied in packed form.
@rout ATL_pthemv
 * where alpha and beta are scalars, x and y are n-element vectors and A
 * is an n by n Hermitian matrix.
@rout ATL_pthbmv
 * where alpha and beta are scalars, x and y are n-element vectors and A
 * is an n by n Hermitian band matrix, with k super-diagonals.
@rout ATL_pthpmv
 * where alpha and beta are scalars, x and y are n-element vectors and A
 * is an n by n Hermitian matrix, supplied in packed form.
@rout ATL_ptsymv ATL_ptsbmv ATL_ptspmv ATL_pthemv ATL_pthbmv ATL_pthpmv
 *
@extract @(PTM_NOTES)
 *
@extract @(LINE)
 */
@rout ATL_pttrmv ATL_pttbmv ATL_pttpmv
/*
@extract @(PURPOSE)
 *
 * @(rname) performs one of the matrix-vector operations
 *
 *    x := A * x,   or   x := conjg( A  ) * x,   or
 *
 *    x := A'* x,   or   x := conjg( A' ) * x,
 *
@rout ATL_pttbmv
 * where x is an n-element vector and  A is an n by n unit, or non-unit,
 * upper or lower triangular band matrix, with ( k + 1 ) diagonals.
@rout ATL_pttpmv
 * where x is an n-element vector and  A is an n by n unit, or non-unit,
 * upper or lower triangular matrix, supplied in packed form.
@rout ATL_pttrmv
 * where x is an n-element vector and  A is an n by n unit, or non-unit,
 * upper or lower triangular matrix.
@rout ATL_pttrmv ATL_pttbmv ATL_pttpmv
 *
@extract @(PTM_NOTES)
 *
@extract @(LINE)
 */
@rout ATL_pttrsv ATL_pttbsv ATL_pttpsv
/*
@extract @(PURPOSE)
 *
 * @(rname) solves one of the systems of equations
 *
 *    A * x = b,   or   conjg( A  ) * x = b,   or
 *
 *    A'* x = b,   or   conjg( A' ) * x = b,
 *
@rout ATL_pttbsv
 * where b and x are n-element vectors and  A is an n by n unit, or non-
 * unit, upper or lower triangular band matrix, with (k+1) diagonals.
@rout ATL_pttpsv
 * where b and x are n-element vectors and  A is an n by n unit, or non-
 * unit, upper or lower triangular matrix, supplied in packed form.
@rout ATL_pttrsv
 * where b and x are n-element vectors and  A is an n by n unit, or non-
 * unit, upper or lower triangular matrix.
@rout ATL_pttrsv ATL_pttbsv ATL_pttpsv
 *
 * No test for  singularity  or  near-singularity  is included  in  this
 * routine. Such tests must be performed before calling this routine.
 *
@extract @(PTM_NOTES)
 *
@extract @(LINE)
 */
@rout ATL_ptger ATL_ptgerc ATL_ptgeru
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the rank 1 operation
 *
@rout ATL_ptger ATL_ptgeru
 *    A := alpha * x * y' + A,
@rout ATL_ptgerc
 *    A := alpha * x * conjg( y' ) + A,
@rout ATL_ptger ATL_ptgerc ATL_ptgeru
 *
 * where alpha is a scalar,  x is an m-element vector, y is an n-element
 * vector and A is an m by n matrix.
 *
@extract @(PTM_NOTES)
 *
@extract @(LINE)
 */            
@rout ATL_ptsyr ATL_ptspr ATL_pther ATL_pthpr
/*
@extract @(PURPOSE)
 *
@rout ATL_ptsyr ATL_ptspr
 * @(rname) performs the symmetric rank 1 operation
@rout ATL_pther ATL_pthpr
 * @(rname) performs the Hermitian rank 1 operation
@rout ATL_ptsyr ATL_ptspr ATL_pther ATL_pthpr
 *
@rout ATL_ptsyr ATL_ptspr
 *    A := alpha * x * x' + A,
@rout ATL_pther ATL_pthpr
 *    A := alpha* x * conjg( x' ) + A,
@rout ATL_ptsyr ATL_ptspr ATL_pther ATL_pthpr
 *
@rout ATL_ptsyr
 * where  alpha is a scalar, x is an n-element vector and A is an n by n
 * symmetric matrix.
@rout ATL_pther
 * where  alpha is a real scalar, x is an n-element vector and A is an n
 * by n Hermitian matrix.
@rout ATL_ptspr
 * where  alpha is a scalar, x is an n-element vector and A is an n by n
 * symmetric matrix, supplied in packed form.
@rout ATL_pthpr
 * where  alpha is a real scalar, x is an n-element vector and A is an n
 * by n Hermitian matrix, supplied in packed form.
@rout ATL_ptsyr ATL_ptspr ATL_pther ATL_pthpr
 *
@extract @(PTM_NOTES)
 *
@extract @(LINE)
 */
@rout ATL_ptsyr2 ATL_ptspr2 ATL_pther2 ATL_pthpr2
/*
@extract @(PURPOSE)
 *
@rout ATL_ptsyr2 ATL_ptspr2
 * @(rname) performs the symmetric rank 2 operation
@rout ATL_pther2 ATL_pthpr2
 * @(rname) performs the Hermitian rank 2 operation
@rout ATL_ptsyr2 ATL_ptspr2 ATL_pther2 ATL_pthpr2
 *
@rout ATL_ptsyr2 ATL_ptspr2
 *    A := alpha * x * y' + alpha * y * x' + A,
@rout ATL_pther2 ATL_pthpr2
 *    A := alpha * x * conjg( y' ) + y * conjg( alpha * x' ) + A,
@rout ATL_ptsyr2 ATL_ptspr2 ATL_pther2 ATL_pthpr2
 *
@rout ATL_ptsyr2
 * where  alpha is a scalar, x and y are n-element vectors and A is an n
 * by n symmetric matrix.
@rout ATL_ptspr2
 * where  alpha is a scalar, x and y are n-element vectors and A is an n
 * by n symmetric matrix, supplied in packed form.
@rout ATL_pther2
 * where  alpha is a scalar, x and y are n-element vectors and A is an n
 * by n Hermitian matrix.
@rout ATL_pthpr2
 * where  alpha is a scalar, x and y are n-element vectors and A is an n
 * by n Hermitian matrix, supplied in packed form.
@rout ATL_ptsyr2 ATL_ptspr2 ATL_pther2 ATL_pthpr2
 *
@extract @(PTM_NOTES)
 *
@extract @(LINE)
 */
@rout !
@skip
@skip
@undef PTM_NOTES
@skip
@skip
