#define movapd movaps
@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S
   @define mu @4@
   @define nu @4@
@ROUT ATL_dammm3x3x256_sse2.S
   @define mu @6@
   @define nu @3@
@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S ATL_dammm3x3x256_sse2.S
@extract -b @(topd)/gen.inc what=crsetup
@extract -b @(topd)/cw.inc lang=c -define cwdate 2012
#include "atlas_asm.h"
#ifdef DCPLX
   #define CMUL(arg_) 2*arg_
#else
   #define CMUL(arg_) arg_
#endif
#define nmu     %rdi
#define nnu     %rsi
#define nnu0    %r10
@ROUT ATL_dammm2x4x1_sse2.S
#define KK      %rdx
#define KK0     %r11
#define pA      %rcx
#define pB      %rax
#define pC      %r9
#define pf      %rbp
#define pB0     %r12
#define incPF   %rbx
#define pA0     %r13
#define incAm   %r14
#define pfB     %r15
@ROUT ATL_dammm2x4x256_sse2.S ATL_dammm3x3x256_sse2.S
#define pA      %rcx
#define pB      %rax
#define pC      %r9
#define pf      %rbp
#define pB0     %r12
#define incPF   %rbx
#define pfB     %rdx
#define incAm   %r11 
@ROUT ATL_dammm3x3x256_sse2.S

#define rA0     %xmm0
#define rA1     %xmm1
#define rA2     %xmm2
#define rB0     %xmm3
#define rB1     %xmm4
#define rB2     %xmm5
#define rC00    %xmm6
#define rC10    %xmm7
#define rC20    %xmm8
#define rC01    %xmm9
#define rC11    %xmm10
#define rC21    %xmm11
#define rC02    %xmm12
#define rC12    %xmm13
#define rC22    %xmm14
#define rm0     %xmm15
@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S

#define rA0     %xmm0
#define rA1     %xmm1
#define rB0     %xmm2
#define rB1     %xmm3
#define rB2     %xmm4
#define rB3     %xmm5
#define rC00    %xmm6
#define rC10    %xmm7
#define rC01    %xmm8
#define rC11    %xmm9
#define rC02    %xmm10
#define rC12    %xmm11
#define rC03    %xmm12
#define rC13    %xmm13
#define rm0     %xmm14
@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S ATL_dammm3x3x256_sse2.S
#ifndef pref
   #define pref prefetcht1
#endif
#ifndef prefB
   #define prefB prefetcht1
#endif
#ifndef prefC
   #ifdef ATL_3DNow
      #define prefC prefetchw
   #else
      #define prefC prefetcht0
   #endif
#endif
#ifdef BETAN1
   #define BETCOP subpd
#else
   #define BETCOP addpd
#endif
/*
                    rdi      rsi    rdx        rcx         r8        r9  
void ATL_USERMM(SZT nmu, SZT nnu, SZT K, CTYPE *pA, CTYPE *pB, TYPE *pC, 
                  8(%rsp)    16(%rsp)     24(%rsp)   
                CTYPE *pAn, CTYPE *pBn, CTYPE *pCn);
 */
.text
.global ATL_asmdecor(ATL_USERMM)
ALIGN16
ATL_asmdecor(ATL_USERMM):
/*
 * Save callee-saved iregs
 */
   movq    %rbp, -8(%rsp)
   movq    %rbx, -16(%rsp)
   movq    %r12, -24(%rsp)
@ROUT ATL_dammm2x4x1_sse2.S 
   movq    %r13, -32(%rsp)
   movq    %r14, -40(%rsp)
   movq    %r15, -48(%rsp)
@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S ATL_dammm3x3x256_sse2.S
/*
 * Load paramaters
 */
   movq %r8, pB
   mov nnu, nnu0
   movq 16(%rsp), pf
   cmp $0, pf
   je BADPFB
   cmp pf, pB
   je BADPFB
.local PFSETUP
PFSETUP:
   movq 8(%rsp), pfB
   cmp $0, pfB
   je BADPF_2
   cmp pf, pA
   je BADPF_2
PFSETUP_2:
   mov $8*@(mu)*@(nu), incPF
@ROUT ATL_dammm2x4x256_sse2.S ATL_dammm3x3x256_sse2.S
/*
 * Extend range of small operands by starting at -128
 */
@ROUT ATL_dammm3x3x256_sse2.S `         movddup (pB), rC00`
   sub $-128, pA
   sub $-128, pB
   mov $KB*@(mu)*8, incAm           /* incAm = KB*MU*size */
@ROUT ATL_dammm3x3x256_sse2.S
   sub $-128, pf
   sub $-128, pC
   sub $-128, pfB
@ROUT ATL_dammm2x4x1_sse2.S
   mov KK, incAm                /* incAm = K */
   shl $5, incAm                /* incAm = K*MU*size = K*4*8 = K*32 = K << 5 */
   mov KK, KK0
   mov pA, pA0
@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S ATL_dammm3x3x256_sse2.S
   movq pB, pB0

ALIGN8
   .local MNLOOP
   MNLOOP:
/*
 *       Peel first iteration of K-loop to handle init of C to 0
 */
@ROUT ATL_dammm3x3x256_sse2.S
         movapd  -128(pA), rA0
         movapd rC00, rC10
         mulpd rA0, rC00
         movapd rC10, rC20
         movapd  -112(pA), rA1
         mulpd rA1, rC10
         movapd  -96(pA), rA2
         mulpd rA2, rC20
         movddup -120(pB), rC01
         movapd rC01, rC11
         mulpd rA0, rC01
         movapd rC11, rC21
         mulpd rA1, rC11
         mulpd rA2, rC21
         movddup -112(pB), rC02
         movapd rC02, rC12
         mulpd rA0, rC02
         #if KB > 1
            movddup -104(pB), rB0
         #endif
         movapd rC12, rC22
         mulpd rA1, rC12
            prefC -128(pC)
         mulpd rA2, rC22

ALIGN8
@iexp ao -80 0 +
@iexp bo -96 0 +
@iexp k 1 0 +
@iwhile k < 256
         #if KB > @(k)
   @iexp k @(k) 1 +
            movapd @(ao)(pA), rA0
   @iexp ao @(ao) 16 +
            movapd rA0, rm0
            mulpd rB0, rm0
            addpd rm0, rC00
            movapd @(ao)(pA), rA1
   @iexp ao @(ao) 16 +
            movapd rA1, rm0
            mulpd rB0, rm0
            addpd rm0, rC10
            movapd @(ao)(pA), rA2
   @iexp ao @(ao) 16 +
            movapd rA2, rm0
            mulpd rA2, rB0
            addpd rB0, rC20
   
            movddup @(bo)(pB), rB1
   @iexp bo @(bo) 8 +
            movapd rA0, rm0
            mulpd rB1, rm0
            addpd rm0, rC01
            movddup @(bo)(pB), rB2
   @iexp bo @(bo) 8 +
            movapd rA1, rm0
            mulpd rB1, rm0
            addpd rm0, rC11
            #if KB > @(k)
               movddup @(bo)(pB), rB0
   @iexp bo @(bo) 8 +
            #endif
            mulpd rA2, rB1
            addpd rB1, rC21
   
   @iif k = 2
            prefC -64(pC)
   @endiif
   @iif k = 3
               pref -128(pf)
   @endiif
   @iif k = 4
               prefB -128(pfB)
   @endiif
            mulpd rB2, rA0
            addpd rA0, rC02
   @iif k = 3
@skip               pref 64-128(pf)
   @endiif
            mulpd rB2, rA1
            addpd rA1, rC12
   @iif k = 4
               prefB (pfB)
   @endiif
   @iif k = 3
               pref 128(pf)
   @endiif
            mulpd rB2, rA2
            addpd rA2, rC22
   @iif k = 2
            prefC (pC)
   @endiif
   @iif k = 3
               add incPF, pf
   @endiif
   @iif k = 4
               add incPF, pfB
   @endiif
         #endif
@endiwhile
/*
 *       Bring in C if necessary, and store out final answer
 */
         add $KB*@(nu)*8, pB
         #if defined(BETA1) || defined(BETAN1)
            BETCOP -128(pC), rC00
            movapd rC00, -128(pC)
               movddup -128(pB), rC00
            BETCOP 16-128(pC), rC10
            movapd rC10, 16-128(pC)
            BETCOP 32-128(pC), rC20
            movapd rC20, 32-128(pC)
            BETCOP 48-128(pC), rC01
            movapd rC01, 48-128(pC)
            BETCOP 64-128(pC), rC11
            movapd rC11, 64-128(pC)
            BETCOP 80-128(pC), rC21
            movapd rC21, 80-128(pC)
            BETCOP 96-128(pC), rC02
            movapd rC02, 96-128(pC)
            BETCOP 112-128(pC), rC12
            movapd rC12, 112-128(pC)
            BETCOP (pC), rC22
            movapd rC22, (pC)
         #else
            movapd rC00, -128(pC)
               movddup -128(pB), rC00
            movapd rC10, 16-128(pC)
            movapd rC20, 32-128(pC)
            movapd rC01, 48-128(pC)
            movapd rC11, 64-128(pC)
            movapd rC21, 80-128(pC)
            movapd rC02, 96-128(pC)
            movapd rC12, 112-128(pC)
            movapd rC22, (pC)
         #endif
         add $144, pC
      sub $1, nnu
      jnz MNLOOP
               movddup -128(pB0), rC00
      mov nnu0, nnu
      mov pB0, pB
      add incAm, pA
   sub $1, nmu
   jnz MNLOOP
@ROUT ATL_dammm2x4x256_sse2.S
         movapd -128(pB), rB1
         pshufd $0x44, rB1, rB0
         movapd -128(pA), rC00

         movapd rC00, rC01
         mulpd rB0, rC00
         unpckhpd rB1, rB1
         movapd -112(pA), rC10
         movapd rC10, rC11
         mulpd rB0, rC10

         movapd -112(pB), rB3
         pshufd $0x44, rB3, rB2
         movapd rC01, rC02
         mulpd rB1, rC01
         unpckhpd rB3, rB3
         movapd rC11, rC12
         mulpd rB1, rC11
         #if KB > 1
            movapd -96(pB), rB1
         #else
            pref (pf)
         #endif

         #if KB > 1
            movapd -96(pA), rA0
         #else
            pref 64(pf)
         #endif
         movapd rC02, rC03
         mulpd rB2, rC02
         movapd rC12, rC13
         mulpd rB2, rC12
         #if KB > 1
            pshufd $0x44, rB1, rB0
         #else
            add incPF, pf
         #endif

         mulpd rB3, rC03
         prefC (pC)
         mulpd rB3, rC13
         prefC 64(pC)
/*
 *       ==========================
 *       Completely unrolled K-loop
 *       ==========================
 */
@iexp ao -80 0 +
@iexp bo -80 0 +
@iexp k 1 0 +
@iwhile k < 256
         #if KB > @(k)
   @iexp k @(k) 1 +
            movapd rB0, rm0
            mulpd rA0, rm0
            addpd rm0, rC00
            movapd @(ao)(pA), rA1
   @iexp ao @(ao) 16 +
            mulpd rA1, rB0
            addpd rB0, rC10
            unpckhpd rB1, rB1

            movapd rB1, rm0
            mulpd rA0, rm0
            addpd rm0, rC01
            movapd @(bo)(pB), rB3
   @iexp bo @(bo) 16 +
            mulpd rA1, rB1
            addpd rB1, rC11
            pshufd $0x44, rB3, rB2

            movapd rB2, rm0
            mulpd rA0, rm0
            addpd rm0, rC02
            unpckhpd rB3, rB3
            mulpd rA1, rB2
            addpd rB2, rC12

            #if KB > @(k)
               movapd @(bo)(pB), rB1
   @iexp bo @(bo) 16 +
            #elif KB == @(k)
               pref (pf)
            #endif
            mulpd rB3, rA0
            addpd rA0, rC03
            #if KB > @(k)
               movapd @(ao)(pA), rA0
   @iexp ao @(ao) 16 +
            #elif KB == @(k)
               pref 64(pf)
            #endif
            mulpd rA1, rB3
            addpd rB3, rC13
            #if KB > @(k)
               pshufd $0x44, rB1, rB0
            #elif KB == @(k)
               add incPF, pf
            #endif
         #endif   
@endiwhile
@ROUT ATL_dammm2x4x1_sse2.S
         movapd (pB), rB1
         pshufd $0x44, rB1, rB0
         movapd (pA), rC00

         movapd rC00, rC01
         mulpd rB0, rC00
         unpckhpd rB1, rB1
         movapd 16(pA), rC10
         movapd rC10, rC11
         mulpd rB0, rC10

         movapd 16(pB), rB3
         pshufd $0x44, rB3, rB2
         movapd rC01, rC02
         mulpd rB1, rC01
         pref (pf)
         movapd rC11, rC12
         mulpd rB1, rC11
         unpckhpd rB3, rB3

         pref 64(pf)
         movapd rC02, rC03
         mulpd rB2, rC02
         movapd rC12, rC13
         mulpd rB2, rC12

         prefC (pC)
         mulpd rB3, rC03
         add $32, pB
         prefC 64(pC)
         mulpd rB3, rC13
         add incPF, pf
         add $32, pA
         sub $1, KK
         jz DONEK

         KLOOP:
            movapd (pB), rB1
            pshufd $0x44, rB1, rB0
            movapd (pA), rA0
            movapd rB0, rm0
            mulpd rA0, rm0
            addpd rm0, rC00
            movapd 16(pA), rA1
            movapd rB0, rm0
            mulpd rA1, rm0
            addpd rm0, rC10
            unpckhpd rB1, rB1

            movapd 16(pB), rB3
            movapd rB1, rm0
            mulpd rA0, rm0
            addpd rm0, rC01
            pshufd $0x44, rB3, rB2
            movapd rB1, rm0
            mulpd rA1, rm0
            addpd rm0, rC11
            unpckhpd rB3, rB3

            movapd rB2, rm0
            mulpd rA0, rm0
            addpd rm0, rC02
            add $32, pA
            movapd rB2, rm0
            mulpd rA1, rm0
            addpd rm0, rC12
            add $32, pB

            movapd rB3, rm0
            mulpd rA0, rm0
            addpd rm0, rC03
            movapd rB3, rm0
            mulpd rA1, rm0
            addpd rm0, rC13
         sub $1, KK
         jnz KLOOP
         DONEK:
@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S
         #if defined(BETA1) || defined(BETAN1)
            BETCOP (pC), rC00
            movapd rC00, (pC)
            BETCOP 16(pC), rC10
            movapd rC10, 16(pC)
            BETCOP 32(pC), rC01
            movapd rC01, 32(pC)
            BETCOP 48(pC), rC11
            movapd rC11, 48(pC)
            BETCOP 64(pC), rC02
            movapd rC02, 64(pC)
            BETCOP 80(pC), rC12
            movapd rC12, 80(pC)
            BETCOP 96(pC), rC03
            movapd rC03, 96(pC)
            BETCOP 112(pC), rC13
            movapd rC13, 112(pC)
         #else
            movapd rC00, (pC)
            movapd rC10, 16(pC)
            movapd rC01, 32(pC)
            movapd rC11, 48(pC)
            movapd rC02, 64(pC)
            movapd rC12, 80(pC)
            movapd rC03, 96(pC)
            movapd rC13, 112(pC)
         #endif
         sub $-128, pC
@ROUT ATL_dammm2x4x1_sse2.S 
         mov KK0, KK
         mov pA0, pA
@ROUT ATL_dammm2x4x256_sse2.S
         add $KB*4*8, pB
@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S
      sub $1, nnu
      jnz MNLOOP
      mov nnu0, nnu
      mov pB0, pB
@ROUT ATL_dammm2x4x1_sse2.S
      add incAm, pA0
      mov pA0, pA
@ROUT ATL_dammm2x4x256_sse2.S
      add incAm, pA
@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S
   sub $1, nmu
   jnz MNLOOP

@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S ATL_dammm3x3x256_sse2.S
/* DONE: */
   movq    -8(%rsp), %rbp
   movq    -16(%rsp), %rbx
   movq    -24(%rsp), %r12
@ROUT ATL_dammm2x4x1_sse2.S
   movq    -32(%rsp), %r13
   movq    -40(%rsp), %r14
   movq    -48(%rsp), %r15
@ROUT ATL_dammm2x4x1_sse2.S ATL_dammm2x4x256_sse2.S ATL_dammm3x3x256_sse2.S
   ret
/*
 * Can't use next B as pointer as usual, see if we can use next A
 */
.local BADPFB
BADPFB:
   movq 16(%rsp), pf
   cmp $0, pf
   je BADPFAB
   cmp pf, pA
   jne PFSETUP
/*
 * Can't use A or B as ptr, try C
 */
.local BADPFAB
BADPFAB:
   movq 24(%rsp), pf
   cmp $0, pf
   je BADPFABC
   cmp pf, pA
   jne PFSETUP
/*
 * No next block, so just fetch this time's A ahead
 */
.local BADPFABC
BADPFABC:
#ifndef KB
   #define KB 40
#endif
#ifndef MB
   #define MB KB
#endif
   lea KB*MB*4(pA), pf
   jmp PFSETUP
BADPF_2:
   movq 24(%rsp), pfB
   jmp PFSETUP_2
@ROUT ATL_dammm_nb8_avx.S
@extract -b @(topd)/gen.inc what=crsetup
@extract -b @(topd)/cw.inc lang=c -define cwdate 2012
#include "atlas_asm.h"

#define pA %rcx
#define pB %r8
#define pC %r9
#define rA00    %ymm0
#define rA10    %ymm1
#define rA01    %ymm2
#define rA11    %ymm3
#define rA02    %ymm4
#define rA12    %ymm5
#define rA03    %ymm6
#define rA13    %ymm7
#define rB0     %ymm8
#define rB1     %ymm9
#define rC00    %ymm10
#define rC10    %ymm11
#define rC01    %ymm12
#define rC11    %ymm13
#define rb0     %ymm14
#define rb0_x   %xmm14
#define rb1     %ymm15
#define rb1_x   %xmm15
/*
                    rdi      rsi    rdx        rcx         r8        r9
void ATL_USERMM(SZT nmu, SZT nnu, SZT K, CTYPE *pA, CTYPE *pB, TYPE *pC,
                  8(%rsp)    16(%rsp)     24(%rsp)
                CTYPE *pAn, CTYPE *pBn, CTYPE *pCn);
 */
.text
ALIGN16
.global ATL_asmdecor(ATL_USERMM)
ATL_asmdecor(ATL_USERMM):
   vmovapd (pA), rA00
   movapd 16(pA), rA10
   movapd 32(pA), rA01
   movapd 48(pA), rA11
   movapd 64(pA), rA02
   movapd 80(pA), rA12
   movapd 96(pA), rA03
   movapd 112(pA), rA13

/*
 * ======================================================
 * rC00 = rA00 * rB00 + rA01*rB10 + rA02*rB20 + rA03*rB30
 * rC10 = rA10 * rB00 + rA11*rB10 + rA12*rB20 + rA13*rB30
 * rC01 = rA00 * rB01 + rA01*rB11 + rA02*rB21 + rA03*rB31
 * rC11 = rA10 * rB01 + rA11*rB11 + rA12*rB21 + rA13*rB31
 * ======================================================
 */
/*
 * rC00 = rA00 * rB0
 * rC10 = rA10 * rB0
 * rC01 = rA00 * rB1
 * rC11 = rA10 * rB1
 */
   #if defined(BETA0) || defined(BETAN1)
      movddup (pB), rC10
      movapd rC10, rC00
      mulpd rA00, rC00
      movddup 32(pB), rC11
      mulpd rA10, rC10
      movapd rC11, rC01
      mulpd rA00, rC01
      mulpd rA10, rC11
   #else
      movddup (pB), rB0
      movddup 32(pB), rB1
      movapd rB0, m0
      mulpd rA00, m0
      movapd (pC), rC00
      addpd m0, rC00
      mulpd rA10, rB0
      movapd 16(pC), rC10
      addpd rB0, rC10
      movapd rB1, m0
      mulpd rA00, m0
      movapd 32(pC), rC01
      addpd m0, rC01
      mulpd rA10, rB1
      movapd 48(pC), rC11
      addpd rB1, rC11
   #endif
/*
 * rC00 = rA01*rB10 
 * rC10 = rA11*rB10 
 * rC01 = rA01*rB11 
 * rC11 = rA11*rB11 
 */
   movddup 8(pB), rB0
   movapd rB0, m0
   mulpd rA01, m0
   addpd m0, rC00
   mulpd rA11, rB0
   addpd rB0, rC10
   movddup 40(pB), rB1
   movapd rB1, m0
   mulpd rA01, m0
   addpd m0, rC01
   mulpd rA11, rB1
   addpd rB1, rC11
/*
 * rC00 = rA02*rB20
 * rC10 = rA12*rB20
 * rC01 = rA02*rB21
 * rC11 = rA12*rB21
 */
   movddup 16(pB), rB0
   movapd rA02, m0
   mulpd rB0, m0
   addpd m0, rC00
   mulpd rA12, rB0
   addpd rB0, rC10
   movapd rA02, m0
   movddup 48(pB), rB1
   mulpd rB1, m0
   addpd m0, rC01
   mulpd rA12, rB1
   addpd rB1, rC11
/*
 * rC00 = rA03*rB30
 * rC10 = rA13*rB30
 * rC01 = rA03*rB31
 * rC11 = rA13*rB31
 */
   movddup 24(pB), rB0
   movapd rA03, m0
   mulpd rB0, m0
   addpd m0, rC00
   #ifdef BETAN1
      subpd (pC), rC00
   #endif
   movapd rC00, (pC)
   mulpd rA13, rB0
   addpd rB0, rC10
   #ifdef BETAN1
      subpd 16(pC), rC10
   #endif
   movapd rC10, 16(pC)
   movapd rA03, m0
   movddup 56(pB), rB1
   mulpd rB1, m0
   addpd m0, rC01
   #ifdef BETAN1
      subpd 32(pC), rC01
   #endif
   movapd rC01, 32(pC)
   mulpd rA13, rB1
   addpd rB1, rC11
   #ifdef BETAN1
      subpd 48(pC), rC11
   #endif
   movapd rC11, 48(pC)

/*
 * rC00 = rA00 * rB0
 * rC10 = rA10 * rB0
 * rC01 = rA00 * rB1
 * rC11 = rA10 * rB1
 */
   #if defined(BETA0) || defined(BETAN1)
      movddup 64(pB), rC10
      movapd rC10, rC00
      mulpd rA00, rC00
      movddup 96(pB), rC11
      mulpd rA10, rC10
      movapd rC11, rC01
      mulpd rA00, rC01
      mulpd rA10, rC11
   #else
      movddup 64(pB), rB0
      movddup 96(pB), rB1
      movapd rB0, m0
      mulpd rA00, m0
      movapd 64(pC), rC00
      addpd m0, rC00
      mulpd rA10, rB0
      movapd 80(pC), rC10
      addpd rB0, rC10
      movapd rB1, m0
      mulpd rA00, m0
      movapd 96(pC), rC01
      addpd m0, rC01
      mulpd rA10, rB1
      movapd 112(pC), rC11
      addpd rB1, rC11
   #endif
/*
 * rC00 = rA01*rB10 
 * rC10 = rA11*rB10 
 * rC01 = rA01*rB11 
 * rC11 = rA11*rB11 
 */
   movddup 72(pB), rB0
   movapd rB0, m0
   mulpd rA01, m0
   addpd m0, rC00
   mulpd rA11, rB0
   addpd rB0, rC10
   movddup 104(pB), rB1
   movapd rB1, m0
   mulpd rB1, rA01
   addpd rA01, rC01
   mulpd rA11, rB1
   addpd rB1, rC11
/*
 * rC00 = rA02*rB20
 * rC10 = rA12*rB20
 * rC01 = rA02*rB21
 * rC11 = rA12*rB21
 */
   movddup 80(pB), rB0
   movapd rA02, m0
   mulpd rB0, m0
   addpd m0, rC00
   mulpd rA12, rB0
   addpd rB0, rC10
   movddup 112(pB), rB1
   mulpd rB1, rA02
   addpd rA02, rC01
   mulpd rA12, rB1
   addpd rB1, rC11
/*
 * rC00 = rA03*rB30
 * rC10 = rA13*rB30
 * rC01 = rA03*rB31
 * rC11 = rA13*rB31
 */
   movddup 88(pB), rB0
   movapd rA03, m0
   mulpd rB0, m0
   addpd m0, rC00
   #ifdef BETAN1
      subpd 64(pC), rC00
   #endif
   movapd rC00, 64(pC)
   mulpd rA13, rB0
   addpd rB0, rC10
   #ifdef BETAN1
      subpd 80(pC), rC10
   #endif
   movapd rC10, 80(pC)
   movddup 120(pB), rB1
   mulpd rB1, rA03
   addpd rA03, rC01
   #ifdef BETAN1
      subpd 96(pC), rC01
   #endif
   movapd rC01, 96(pC)
   mulpd rA13, rB1
   addpd rB1, rC11
   #ifdef BETAN1
      subpd 112(pC), rC11
   #endif
   movapd rC11, 112(pC)
   ret

@ROUT ATL_dammm_nb4_sse2.S
@extract -b @(topd)/gen.inc what=crsetup
@extract -b @(topd)/cw.inc lang=c -define cwdate 2012
#include "atlas_asm.h"

#define pA %rcx
#define pB %r8
#define pC %r9
#define m0      %xmm0
#define rA00    %xmm1
#define rA10    %xmm2
#define rA01    %xmm3
#define rA11    %xmm4
#define rA02    %xmm5
#define rA12    %xmm6
#define rA03    %xmm7
#define rA13    %xmm8
#define rB0     %xmm9
#define rB1     %xmm10
#define rC00    %xmm11
#define rC10    %xmm12
#define rC01    %xmm13
#define rC11    %xmm14
/*
                    rdi      rsi    rdx        rcx         r8        r9
void ATL_USERMM(SZT nmu, SZT nnu, SZT K, CTYPE *pA, CTYPE *pB, TYPE *pC,
                  8(%rsp)    16(%rsp)     24(%rsp)
                CTYPE *pAn, CTYPE *pBn, CTYPE *pCn);
 */
.text
ALIGN16
.global ATL_asmdecor(ATL_USERMM)
ATL_asmdecor(ATL_USERMM):
   movapd (pA), rA00
   movapd 16(pA), rA10
   movapd 32(pA), rA01
   movapd 48(pA), rA11
   movapd 64(pA), rA02
   movapd 80(pA), rA12
   movapd 96(pA), rA03
   movapd 112(pA), rA13

/*
 * ======================================================
 * rC00 = rA00 * rB00 + rA01*rB10 + rA02*rB20 + rA03*rB30
 * rC10 = rA10 * rB00 + rA11*rB10 + rA12*rB20 + rA13*rB30
 * rC01 = rA00 * rB01 + rA01*rB11 + rA02*rB21 + rA03*rB31
 * rC11 = rA10 * rB01 + rA11*rB11 + rA12*rB21 + rA13*rB31
 * ======================================================
 */
/*
 * rC00 = rA00 * rB0
 * rC10 = rA10 * rB0
 * rC01 = rA00 * rB1
 * rC11 = rA10 * rB1
 */
   #if defined(BETA0) || defined(BETAN1)
      movddup (pB), rC10
      movapd rC10, rC00
      mulpd rA00, rC00
      movddup 32(pB), rC11
      mulpd rA10, rC10
      movapd rC11, rC01
      mulpd rA00, rC01
      mulpd rA10, rC11
   #else
      movddup (pB), rB0
      movddup 32(pB), rB1
      movapd rB0, m0
      mulpd rA00, m0
      movapd (pC), rC00
      addpd m0, rC00
      mulpd rA10, rB0
      movapd 16(pC), rC10
      addpd rB0, rC10
      movapd rB1, m0
      mulpd rA00, m0
      movapd 32(pC), rC01
      addpd m0, rC01
      mulpd rA10, rB1
      movapd 48(pC), rC11
      addpd rB1, rC11
   #endif
/*
 * rC00 = rA01*rB10 
 * rC10 = rA11*rB10 
 * rC01 = rA01*rB11 
 * rC11 = rA11*rB11 
 */
   movddup 8(pB), rB0
   movapd rB0, m0
   mulpd rA01, m0
   addpd m0, rC00
   mulpd rA11, rB0
   addpd rB0, rC10
   movddup 40(pB), rB1
   movapd rB1, m0
   mulpd rA01, m0
   addpd m0, rC01
   mulpd rA11, rB1
   addpd rB1, rC11
/*
 * rC00 = rA02*rB20
 * rC10 = rA12*rB20
 * rC01 = rA02*rB21
 * rC11 = rA12*rB21
 */
   movddup 16(pB), rB0
   movapd rA02, m0
   mulpd rB0, m0
   addpd m0, rC00
   mulpd rA12, rB0
   addpd rB0, rC10
   movapd rA02, m0
   movddup 48(pB), rB1
   mulpd rB1, m0
   addpd m0, rC01
   mulpd rA12, rB1
   addpd rB1, rC11
/*
 * rC00 = rA03*rB30
 * rC10 = rA13*rB30
 * rC01 = rA03*rB31
 * rC11 = rA13*rB31
 */
   movddup 24(pB), rB0
   movapd rA03, m0
   mulpd rB0, m0
   addpd m0, rC00
   #ifdef BETAN1
      subpd (pC), rC00
   #endif
   movapd rC00, (pC)
   mulpd rA13, rB0
   addpd rB0, rC10
   #ifdef BETAN1
      subpd 16(pC), rC10
   #endif
   movapd rC10, 16(pC)
   movapd rA03, m0
   movddup 56(pB), rB1
   mulpd rB1, m0
   addpd m0, rC01
   #ifdef BETAN1
      subpd 32(pC), rC01
   #endif
   movapd rC01, 32(pC)
   mulpd rA13, rB1
   addpd rB1, rC11
   #ifdef BETAN1
      subpd 48(pC), rC11
   #endif
   movapd rC11, 48(pC)

/*
 * rC00 = rA00 * rB0
 * rC10 = rA10 * rB0
 * rC01 = rA00 * rB1
 * rC11 = rA10 * rB1
 */
   #if defined(BETA0) || defined(BETAN1)
      movddup 64(pB), rC10
      movapd rC10, rC00
      mulpd rA00, rC00
      movddup 96(pB), rC11
      mulpd rA10, rC10
      movapd rC11, rC01
      mulpd rA00, rC01
      mulpd rA10, rC11
   #else
      movddup 64(pB), rB0
      movddup 96(pB), rB1
      movapd rB0, m0
      mulpd rA00, m0
      movapd 64(pC), rC00
      addpd m0, rC00
      mulpd rA10, rB0
      movapd 80(pC), rC10
      addpd rB0, rC10
      movapd rB1, m0
      mulpd rA00, m0
      movapd 96(pC), rC01
      addpd m0, rC01
      mulpd rA10, rB1
      movapd 112(pC), rC11
      addpd rB1, rC11
   #endif
/*
 * rC00 = rA01*rB10 
 * rC10 = rA11*rB10 
 * rC01 = rA01*rB11 
 * rC11 = rA11*rB11 
 */
   movddup 72(pB), rB0
   movapd rB0, m0
   mulpd rA01, m0
   addpd m0, rC00
   mulpd rA11, rB0
   addpd rB0, rC10
   movddup 104(pB), rB1
   movapd rB1, m0
   mulpd rB1, rA01
   addpd rA01, rC01
   mulpd rA11, rB1
   addpd rB1, rC11
/*
 * rC00 = rA02*rB20
 * rC10 = rA12*rB20
 * rC01 = rA02*rB21
 * rC11 = rA12*rB21
 */
   movddup 80(pB), rB0
   movapd rA02, m0
   mulpd rB0, m0
   addpd m0, rC00
   mulpd rA12, rB0
   addpd rB0, rC10
   movddup 112(pB), rB1
   mulpd rB1, rA02
   addpd rA02, rC01
   mulpd rA12, rB1
   addpd rB1, rC11
/*
 * rC00 = rA03*rB30
 * rC10 = rA13*rB30
 * rC01 = rA03*rB31
 * rC11 = rA13*rB31
 */
   movddup 88(pB), rB0
   movapd rA03, m0
   mulpd rB0, m0
   addpd m0, rC00
   #ifdef BETAN1
      subpd 64(pC), rC00
   #endif
   movapd rC00, 64(pC)
   mulpd rA13, rB0
   addpd rB0, rC10
   #ifdef BETAN1
      subpd 80(pC), rC10
   #endif
   movapd rC10, 80(pC)
   movddup 120(pB), rB1
   mulpd rB1, rA03
   addpd rA03, rC01
   #ifdef BETAN1
      subpd 96(pC), rC01
   #endif
   movapd rC01, 96(pC)
   mulpd rA13, rB1
   addpd rB1, rC11
   #ifdef BETAN1
      subpd 112(pC), rC11
   #endif
   movapd rC11, 112(pC)
   ret
@ROUT ATL_dammm3x3x256MI_sse2.S
@extract -b @(topd)/gen.inc what=crsetup
@extract -b @(topd)/cw.inc lang=c -define cwdate 2012
#include "atlas_asm.h"
#if KB < 2
   #error This kernel demands K >= 2
#endif
#define nmu     %rdi
#define nnu     %rsi
#define nnu0    %r10
#define pA      %rcx
#define pB      %rax
#define pC      %r9
#define pf      %rbp
#define pB0     %r12
#define incPF   %rbx
#define pfB     %rdx
#define incAm   %r11 

#define rA0     %xmm0
#define rA1     %xmm1
#define rA2     %xmm2
#define rB0     %xmm3
#define rB1     %xmm4
#define rB2     %xmm5
#define rC00    %xmm6
#define rC10    %xmm7
#define rC20    %xmm8
#define rC01    %xmm9
#define rC11    %xmm10
#define rC21    %xmm11
#define rC02    %xmm12
#define rC12    %xmm13
#define rC22    %xmm14
#define rm0     %xmm15
#ifndef pref
   #define pref prefetcht1
#endif
#ifndef prefB
   #define prefB prefetcht1
#endif
#ifndef prefC
   #ifdef ATL_3DNow
      #define prefC prefetchw
   #else
      #define prefC prefetcht0
   #endif
#endif
#ifdef BETAN1
   #define BETCOP subpd
#else
   #define BETCOP addpd
#endif
/*
                    rdi      rsi    rdx        rcx         r8        r9  
void ATL_USERMM(SZT nmu, SZT nnu, SZT K, CTYPE *pA, CTYPE *pB, TYPE *pC, 
                  8(%rsp)    16(%rsp)     24(%rsp)   
                CTYPE *pAn, CTYPE *pBn, CTYPE *pCn);
 */
.text
.global ATL_asmdecor(ATL_USERMM)
ALIGN16
ATL_asmdecor(ATL_USERMM):
/*
 * Save callee-saved iregs
 */
   movq    %rbp, -8(%rsp)
   movq    %rbx, -16(%rsp)
   movq    %r12, -24(%rsp)
#if 0
   movq    %r13, -32(%rsp)
   movq    %r14, -40(%rsp)
   movq    %r15, -48(%rsp)
#endif
/*
 * Load paramaters
 */
   movq %r8, pB
   mov nnu, nnu0
   movq 16(%rsp), pf
   cmp $0, pf
   je BADPFB
   cmp pf, pB
   je BADPFB
.local PFSETUP
PFSETUP:
   movq 8(%rsp), pfB
   cmp $0, pfB
   je BADPF_2
   cmp pf, pA
   je BADPF_2
PFSETUP_2:
   mov $8*6*3, incPF
/*
 * Extend range of small operands by starting at -128
 */
   sub $-128, pA
   sub $-128, pB
   mov $KB*6*8, incAm           /* incAm = KB*MU*size */
   sub $-128, pf
   sub $-128, pC
   sub $-128, pfB
   movq pB, pB0

ALIGN8
   .local mLOOP
   MLOOP:
/*
 *       Peel first iteration of K-loop to handle init of C to 0
 */
         movddup -128(pB), rC00
         movapd  -128(pA), rA0
         movapd rC00, rC10
         mulpd rA0, rC00
         movapd rC10, rC20
         movapd  -112(pA), rA1
         mulpd rA1, rC10
         movapd  -96(pA), rA2
         mulpd rA2, rC20
         movddup -120(pB), rC01
         movapd rC01, rC11
         mulpd rA0, rC01
         movapd rC11, rC21
         mulpd rA1, rC11
         mulpd rA2, rC21
         movddup -112(pB), rC02
         movapd rC02, rC12
         mulpd rA0, rC02
         movapd rC12, rC22
         mulpd rA1, rC12
         #if KB > 1
            movddup -104(pB), rB0
         #endif
         mulpd rA2, rC22
ALIGN8
      .local NLOOP
      NLOOP:

@iexp ao -80 0 +
@iexp bo -96 0 +
@iexp k 1 0 +
@iwhile k < 257
         #if KB > @(k)
   @iexp k @(k) 1 +
            movapd @(ao)(pA), rA0
   @iexp ao @(ao) 16 +
            movapd rA0, rm0
            mulpd rB0, rm0
            addpd rm0, rC00
            movapd @(ao)(pA), rA1
   @iexp ao @(ao) 16 +
            movapd rA1, rm0
            mulpd rB0, rm0
            addpd rm0, rC10
            movapd @(ao)(pA), rA2
   @iexp ao @(ao) 16 +
            movapd rA2, rm0
            mulpd rA2, rB0
            addpd rB0, rC20
   
            movddup @(bo)(pB), rB1
   @iexp bo @(bo) 8 +
            movapd rA0, rm0
            mulpd rB1, rm0
            addpd rm0, rC01
            movddup @(bo)(pB), rB2
   @iexp bo @(bo) 8 +
            movapd rA1, rm0
            mulpd rB1, rm0
            addpd rm0, rC11
@skip            #if KB > @(k)
               movddup @(bo)(pB), rB0
   @iexp bo @(bo) 8 +
@skip            #endif
            mulpd rA2, rB1
            addpd rB1, rC21
   
   @iif k = 2
            prefC -64(pC)
   @endiif
   @iif k = 3
               pref -128(pf)
   @endiif
   @iif k = 4
               prefB -128(pfB)
   @endiif
            #if KB == @(k)
               movddup @(bo)(pB), rB1
            #endif
            mulpd rB2, rA0
            addpd rA0, rC02
   @iif k = 3
@skip               pref 64-128(pf)
   @endiif
            #if KB == @(k)
               movapd -128(pA), rA0
            #endif
            mulpd rB2, rA1
            addpd rA1, rC12
   @iif k = 4
               prefB (pfB)
   @endiif
   @iif k = 3
               pref 128(pf)
   @endiif
            #if KB == @(k)
               movapd -112(pA), rA1
            #endif
            mulpd rB2, rA2
            addpd rA2, rC22
   @iif k = 2
            prefC (pC)
   @endiif
   @iif k = 3
            prefC -128(pC)
   @endiif
   @iif k = 4
               add incPF, pf
   @endiif
   @iif k = 5
               add incPF, pfB
   @endiif
         #endif
@endiwhile
         add $KB*3*8, pB
/*
 *       Bring in C if necessary, and store out final answer while starting
 *       operations for the next N iteration.
 *       Upon loop exit, next N iteration's rA[0-1] and rB[0-1] are preloaded
 */
         #if defined(BETA1) || defined(BETAN1)
            BETCOP -128(pC), rC00
            movapd rC00, -128(pC)
               movapd rA0, rC00
               mulpd  rB0, rC00
            BETCOP -112(pC), rC10
            movapd rC10, 16-128(pC)
               movapd rA1, rC10
               mulpd  rB0, rC10
            BETCOP -96(pC), rC20
            movapd rC20, 32-128(pC)
               movapd -96(pA), rA2
               movapd rA2, rC20
               mulpd rB0, rC20
            BETCOP 48-128(pC), rC01
            movapd rC01, 48-128(pC)
               movapd rA0, rC01
               mulpd rB1, rC01
            BETCOP 64-128(pC), rC11
            movapd rC11, 64-128(pC)
               movapd rA1, rC11
               mulpd rB1, rC11
            BETCOP 80-128(pC), rC21
            movapd rC21, 80-128(pC)
               movapd rA2, rC21
               mulpd rB1, rC21
            BETCOP 96-128(pC), rC02
            movapd rC02, 96-128(pC)
               movddup -112(pB), rB2
               movapd rB2, rC02
               mulpd rA0, rC02
            BETCOP 112-128(pC), rC12
            movapd rC12, 112-128(pC)
               movapd rA1, rC12
               mulpd rB2, rC12
            BETCOP (pC), rC22
            movapd rC22, (pC)
               movapd rA2, rC22
               mulpd rB2, rC22
         #else
               movapd -96(pA), rA2
            movapd rC00, -128(pC)
               movapd rA0, rC00
               mulpd rB0, rC00
               movddup -112(pB), rB2
            movapd rC10, 16-128(pC)
               movapd rA1, rC10
               mulpd rB0, rC10
            movapd rC20, 32-128(pC)
               movapd rA2, rC20
               mulpd rB0, rC20
            movapd rC01, 48-128(pC)
               movapd rA0, rC01
               mulpd rB1, rC01
            movapd rC11, 64-128(pC)
               movapd rA1, rC11
               mulpd rB1, rC11
            movapd rC21, 80-128(pC)
               movapd rA2, rC21
               mulpd rB1, rC21
            movapd rC02, 96-128(pC)
               movapd rA0, rC02
               mulpd rB2, rC02
            movapd rC12, 112-128(pC)
               movapd rA1, rC12
               mulpd rB2, rC12
            movapd rC22, (pC)
               movapd rA2, rC22
               mulpd rB2, rC22
         #endif
         add $144, pC
      sub $1, nnu
         #if KB > 1
            movddup -104(pB), rB0
         #endif
      jnz NLOOP
      mov nnu0, nnu
      mov pB0, pB
      add incAm, pA
   sub $1, nmu
   jnz MLOOP
/* DONE: */
   movq    -8(%rsp), %rbp
   movq    -16(%rsp), %rbx
   movq    -24(%rsp), %r12
#if 0
   movq    -32(%rsp), %r13
   movq    -40(%rsp), %r14
   movq    -48(%rsp), %r15
#endif
   ret
/*
 * Can't use next B as pointer as usual, see if we can use next A
 */
.local BADPFB
BADPFB:
   movq 16(%rsp), pf
   cmp $0, pf
   je BADPFAB
   cmp pf, pA
   jne PFSETUP
/*
 * Can't use A or B as ptr, try C
 */
.local BADPFAB
BADPFAB:
   movq 24(%rsp), pf
   cmp $0, pf
   je BADPFABC
   cmp pf, pA
   jne PFSETUP
/*
 * No next block, so just fetch this time's A ahead
 */
.local BADPFABC
BADPFABC:
#ifndef KB
   #define KB 40
#endif
#ifndef MB
   #define MB KB
#endif
   lea KB*MB*4(pA), pf
   jmp PFSETUP
BADPF_2:
   movq 24(%rsp), pfB
   jmp PFSETUP_2
