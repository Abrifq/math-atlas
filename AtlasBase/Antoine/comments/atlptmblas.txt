@skip
@skip Comments of the ATLAS multi-threaded BLAS implementation         AP00
@skip
@skip Last modification : 08/31/00
@skip
@skip      C      V                      D                             V12345678
@skip
@skip
@define PTM_NOTES          @@(ATLAS_PTM_COMMENT) rout=ptm_notes@
@skip
@skip
@rout ptm_notes
 * For a  more  detailed description of  the arguments of this function,
 * see the reference implementation in the  ATLAS/src/blas/reference di-
 * rectory.
@skip
@skip
@rout ATL_1dsplit
/*
@extract @(PURPOSE)
 *
 * @(rname) splits  a  problem  dimension  N  within NT threads. This
 * function returns whether or not the problem size N should be split.
 *
@extract @(ARGUMENTS)
 *
 * NT      (input)                       const unsigned int
 *         On entry, NT specifies the initial total number of threads.
 *
 * N       (input)                       const int
 *         On entry, N specifies the problem dimension to be split.
 *
 * NB      (input)                       const int
 *         On entry,  NB  specifies the blocking factor to be used along
 *         this dimension N.
 *
 * NT1     (output)                      unsigned int *
 *         On exit,  NT1  specifies the number of threads to be used for
 *         the first part of the problem size N1.
 *
 * NT2     (output)                      unsigned int *
 *         On exit,  NT2  specifies the number of threads to be used for
 *         the second part of the problem size N2.
 *
 * N1      (output)                      int *
 *         On exit,  N1  specifies  the length of the problem size to be
 *         run on the NT1 threads.
 *
 * N2      (output)                      int *
 *         On exit,  N2  specifies  the length of the problem size to be
 *         run on the NT2 threads.
 *
 * RATIO   (output)                      double *
 *         On exit, RATIO specifies the relative work distribution ratio
 *         namely | ( N1 / NT1 ) - ( N2 / NT2 ) | / ( N / NT ).
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_tzsplit
/*
@extract @(PURPOSE)
 *
 * @(rname) splits a trapezoidal matrix into two matrices of the same
 * kind. The initial input matrix sizes are specified by M, N and K:
 *
 *              K       N                           N       K
 *             ______________                 _____________
 *            |   |          |               |            |\ 
 *          M |   |          |             K |            | \
 *            | __|__________|               |____________|__\
 *             \  |          |               |            |  | 
 *          K   \ |          |             M |            |  |
 *               \|__________|               |____________|__|
 *
 *           UPLO = AtlasLower               UPLO = AtlasUpper
 *
 * This function returns which dimension should be split if any, as well
 * as the number of threads to be used for each submtrix.
 *
@extract @(ARGUMENTS)
 *
 * UPLO    (input)                       const enum ATLAS_UPLO
 *         On entry,  UPLO  specifies  whether  the  matrix  is upper or
 *         lower trapezoidal.
 *
 * NT      (input)                       const unsigned int
 *         On entry, NT specifies the initial total number of threads.
 *
 * M       (input)                       const int
 *         On entry, M  specifies  the  number  of  complete rows of the
 *         trapezoidal matrix.
 *
 * N       (input)                       const int
 *         On entry, N  specifies  the number of complete columns of the
 *         trapezoidal matrix.
 *
 * K       (input)                       const int
 *         On entry, K specifies the size of the triangular submatrix.
 *
 * NB      (input)                       const int
 *         On entry,  NB  specifies the blocking factor to be used along
 *         this dimension N.
 *
 * NT1     (output)                      unsigned int *
 *         On exit,  NT1  specifies the number of threads to be used for
 *         the first part of the problem size MNK1.
 *
 * NT2     (output)                      unsigned int *
 *         On exit,  NT2  specifies the number of threads to be used for
 *         the second part of the problem size MNK2.
 *
 * MNK1    (output)                      int *
 *         On exit, MNK1 specifies  the length of the problem size to be
 *         run on the NT1 threads.
 *
 * MNK1    (output)                      int *
 *         On exit, MNK2 specifies  the length of the problem size to be
 *         run on the NT2 threads.
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_init_node
/*
@extract @(PURPOSE)
 *
 * ATL_init_node creates and returns a node of the recursion tree.
 *
@extract @(ARGUMENTS)
 *
 * NODE    (input)                       unsigned int
 *         On entry, NODE specifies the node number.
 *
 * LEFT    (input)                       PT_TREE_T
 *         On entry, LEFT specifies the left child of the current node.
 *
 * RIGHT   (input)                       PT_TREE_T
 *         On entry, RIGHT specifies  the  right  child  of the  current
 *         node.
 *
 * DATA    (input)                       PT_DATA_T
 *         On entry, DATA  is a pointer to the data associated with this
 *         current node.
 *
 * VAL     (input)                       PT_FUN_VAL_T
 *         On entry, VAL  is  a pointer to the memory location where the
 *         the  function  associated  with  this  node should return its
 *         value.
 *
 * FUN     (input)                       PT_FUN_T
 *         On entry, FUN  is  a  pointer to the function associated with 
 *         this current node.
 *
 * ARG     (input)                       PT_FUN_ARG_T
 *         On entry, ARG  is  a  pointer to  data  structure  containing 
 *         the arguments to be passed to the function FUN.
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_traverse_tree
/*
@extract @(PURPOSE)
 *
 * ATL_traverse_tree  traverses  the  binary  tree  from  left to right.
 * Each node function is called during this traversing phase.
 *
@extract @(ARGUMENTS)
 *
 * ROOT    (input)                       PT_TREE_T
 *         On entry, ROOT specifies the tree to be traversed.
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_apply_tree
/*
@extract @(PURPOSE)
 *
 * ATL_apply_tree traverses the binary tree from left to right and calls
 * the function FUN during this traversing phase on each node.
 *
@extract @(ARGUMENTS)
 *
 * ROOT    (input)                       PT_TREE_T
 *         On entry, ROOT specifies the tree to be traversed.
 *
 * FUN     (input)                       PT_APPLY_FUN_T
 *         On entry, FUN  specifies  the  function to be applied on each
 *         node of the tree.
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_thread_init
/*
@extract @(PURPOSE)
 *
 * ATL_thread_init initializes the pthread library.
 *
 * By default, threads are created joinable and scheduled within  system
 * scope. From "Pthreads Programming", B. Nichols & al., O Reilly, 1996:
 *
 * A  thread  detached state can be joinable  (PTHREAD_CREATE_JOINABLE),
 * or it can be detached (PTHREAD_CREATE_DETACHED).  The following  call
 * to the   pthread_attr_setdetachstate  function  adjusts  the detached
 * state of a thread.
 *
 * A thread can use system-scope scheduling  (PTHREAD_SCOPE_SYSTEM),  in
 * which  case  the  operating  system  compares  the  priorities of all
 * runnable  threads of all processes systemwide to select a  thread  to
 * run  on an available CPU.  Alternatively,  it  can  use process-scope
 * scheduling (PTHREAD_SCOPE_PROCESS),  in  which  case only the highest
 * priority runnable  thread  in a  process competes against the highest
 * priority   threads  of  other  processes  in  the  system  scheduling
 * activity. The following function call adjusts the scheduling scope of
 * a thread.
 *
@extract @(ARGUMENTS)
 *
 * ATTR    (output)                      pthread_attr_t *
 *         On exit,  ATTR  specifies  the  thread attribute object to be
 *         initialized.
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_thread_exit
/*
@extract @(PURPOSE)
 *
 * ATL_thread_exit destroys the thread attribute object.
 *
@extract @(ARGUMENTS)
 *
 * ATTR    (output)                      pthread_attr_t *
 *         On exit,  ATTR  specifies  the  thread attribute object to be
 *         destroyed.
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_thread_tree
/*
@extract @(PURPOSE)
 *
 * ATL_thread_tree  traverses  the  binary  tree  from left to right and
 * creates the threads associated with each node of the tree.
 *
@extract @(ARGUMENTS)
 *
 * ROOT    (input)                       PT_TREE_T
 *         On entry, ROOT specifies the tree to be traversed.
 *
 * ATTR    (input)                       pthread_attr_t *
 *         On entry,  ATTR  specifies the thread attribute object of the
 *         binary tree.
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_wait_tree
/*
@extract @(PURPOSE)
 *
 * ATL_wait_tree  synchronizes  the  node functions that have previously
 * been threaded (created).  Each node waits for its left and then right
 * child.
 * 
@extract @(ARGUMENTS)
 *
 * ROOT    (input)                       PT_TREE_T
 *         On entry, ROOT specifies the node to be synchronized.
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_signal_tree
/*
@extract @(PURPOSE)
 *
 * ATL_signal_tree signals the end of the node function to its peer.
 *
@extract @(ARGUMENTS)
 *
 * ROOT    (input)                       PT_TREE_T
 *         On entry, ROOT specifies the node emitting the signal.
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_join_tree
/*
@extract @(PURPOSE)
 *
 * ATL_join_tree  traverses  the  binary  tree  from  left  to right and
 * joins the threads associated with each node of the tree.
 *
@extract @(ARGUMENTS)
 *
 * ROOT    (input)                       PT_TREE_T
 *         On entry, ROOT specifies the tree to be traversed.
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_free_node
/*
@extract @(PURPOSE)
 *
 * ATL_free_node releases the resources associated with a node.
 *
@extract @(ARGUMENTS)
 *
 * ROOT    (input/output)                PT_TREE_T
 *         On entry,  ROOT specifies the node of the tree to be operated
 *         on.
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_print_node_id
/*
@extract @(PURPOSE)
 *
 * ATL_print_node_id prints on stdout the node number.
 *
@extract @(ARGUMENTS)
 *
 * ROOT    (input)                       PT_TREE_T
 *         On entry,  ROOT specifies the node of the tree to be operated
 *         on.
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_free_tree
/*
@extract @(PURPOSE)
 *
 * ATL_free_tree releases the resources of a binary tree.
 *
@extract @(ARGUMENTS)
 *
 * ROOT    (input/output)                PT_TREE_T
 *         On entry, ROOT specifies the tree to be traversed.
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_create_tree
/*
@extract @(PURPOSE)
 *
 * ATL_create_tree  creates a binary tree of size  PARTSIZE, setting the
 * node numbers to the contents of the array PART.
 *
@extract @(ARGUMENTS)
 *
 * PART    (input)                       unsigned int *
 *         On entry, PART points to an array of size PARTSIZE containing
 *         the numbers to be attributed to each node.
 *
 * IPART   (input)                       const int
 *         On entry,  IPART  is  the index into the array  PART  of  the
 *         current node. IPART must be at least zero.
 *
 * PSIZE   (input)                       const int
 *         On entry, PSIZE specifies the total length of the array PART.
 *         PSIZE must be at least zero.
 * 
@extract @(LINE)
 */
@skip
@skip
@rout ATL_Sgeadd
/*
@extract @(PURPOSE)
 *
 * ATL_Sgeadd  recursively  builds  the binary tasks tree to be threaded
 * for the matrix add operation.
 *
@extract @(ARGUMENTS)
 *
 * PTYPE   (input)                       const PT_MISC_TYPE_T *
 *         On entry, PTYPE  points  to the data structure containing the
 *         type information.
 *
 * NODE    (input)                       const unsigned int
 *         On entry, NODE specifies the current node number.
 *
 * THREADS (input)                       const unsigned int
 *         On entry, THREADS  specifies the number of threads to be used
 *         for the current operation.
 *
 * ATTR    (input)                       pthread_attr_t *
 *         On entry, ATTR  specifies  the  thread attribute object to be
 *         used for the node functions to be threaded.
 *
 * NB      (input)                       const int
 *         On entry, NB  specifies  the  blocksize  to  be  used for the 
 *         problem size partitioning.
 *
 * M       (input)                       const int
 * N       (input)                       const int
 * ALPHA   (input)                       const void *
 * A       (input)                       const void *
 * LDA     (input)                       const int
 * BETA    (input)                       const void *
 * C       (input/output)                void *
 * LDC     (input)                       const int
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_ptgeadd
/*
@extract @(PURPOSE)
 *
 * @(rname) adds an m-by-n matrix A to the matrix B.
 *
 * This is a multi-threaded version of the algorithm.
 *
@extract @(ARGUMENTS)
 *
 * PTYPE   (input)                       const PT_MISC_TYPE_T *
 *         On entry, PTYPE  points  to the data structure containing the
 *         type information.
 *
 * NODE    (input)                       const unsigned int
 *         On entry, NODE specifies the current node number.
 *
 * THREADS (input)                       const unsigned int
 *         On entry, THREADS  specifies the number of threads to be used
 *         for the current operation.
 *
 * ATTR    (input)                       pthread_attr_t *
 *         On entry, ATTR  specifies  the  thread attribute object to be
 *         used for the node functions to be threaded.
 *
 * NB      (input)                       const int
 *         On entry, NB  specifies  the  blocksize  to  be  used for the 
 *         problem size partitioning.
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_Sgescal
/*
@extract @(PURPOSE)
 *
 * ATL_Sgescal recursively  builds  the binary tasks tree to be threaded
 * for the matrix scale operation.
 *
@extract @(ARGUMENTS)
 *
 * PTYPE   (input)                       const PT_MISC_TYPE_T *
 *         On entry, PTYPE  points  to the data structure containing the
 *         type information.
 *
 * NODE    (input)                       const unsigned int
 *         On entry, NODE specifies the current node number.
 *
 * THREADS (input)                       const unsigned int
 *         On entry, THREADS  specifies the number of threads to be used
 *         for the current operation.
 *
 * ATTR    (input)                       pthread_attr_t *
 *         On entry, ATTR  specifies  the  thread attribute object to be
 *         used for the node functions to be threaded.
 *
 * NB      (input)                       const int
 *         On entry, NB  specifies  the  blocksize  to  be  used for the 
 *         problem size partitioning.
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_ptgescal
/*
@extract @(PURPOSE)
 *
 * @(rname) scales an m-by-n matrix A by the scalar alpha.
 *
 * This is a multi-threaded version of the algorithm.
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_Sgezero
/*
@extract @(PURPOSE)
 *
 * ATL_Sgezero recursively  builds  the binary tasks tree to be threaded
 * for the matrix zero operation.
 *
@extract @(ARGUMENTS)
 *
 * PTYPE   (input)                       const PT_MISC_TYPE_T *
 *         On entry, PTYPE  points  to the data structure containing the
 *         type information.
 *
 * NODE    (input)                       const unsigned int
 *         On entry, NODE specifies the current node number.
 *
 * THREADS (input)                       const unsigned int
 *         On entry, THREADS  specifies the number of threads to be used
 *         for the current operation.
 *
 * ATTR    (input)                       pthread_attr_t *
 *         On entry, ATTR  specifies  the  thread attribute object to be
 *         used for the node functions to be threaded.
 *
 * NB      (input)                       const int
 *         On entry, NB  specifies  the  blocksize  to  be  used for the 
 *         problem size partitioning.
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_ptgezero
/*
@extract @(PURPOSE)
 *
 * @(rname) zeroes an m-by-n matrix A.
 *
 * This is a multi-threaded version of the algorithm.
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_Strscal
/*
@extract @(PURPOSE)
 *
 * ATL_Strscal recursively  builds  the binary tasks tree to be threaded
 * for the trapezoidal matrix scale operation.
 *
@extract @(ARGUMENTS)
 *
 * PTYPE   (input)                       const PT_MISC_TYPE_T *
 *         On entry, PTYPE  points  to the data structure containing the
 *         type information.
 *
 * NODE    (input)                       const unsigned int
 *         On entry, NODE specifies the current node number.
 *
 * THREADS (input)                       const unsigned int
 *         On entry, THREADS  specifies the number of threads to be used
 *         for the current operation.
 *
 * ATTR    (input)                       pthread_attr_t *
 *         On entry, ATTR  specifies  the  thread attribute object to be
 *         used for the node functions to be threaded.
 *
 * NB      (input)                       const int
 *         On entry, NB  specifies  the  blocksize  to  be  used for the 
 *         problem size partitioning.
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_pttrscal
/*
@extract @(PURPOSE)
 *
 * @(rname)  scales  a trapezoidal m-by-n matrix A by the
 * scalar alpha.
 *
 * This is a multi-threaded version of the algorithm.
 *
@extract @(LINE)
 */
@skip
@skip
@rout ATL_pthescal
/*
@extract @(PURPOSE)
 *
 * @(rname)  scales a trapezoidal Hermitian m-by-n matrix
 * A by the real scalar alpha.  The imaginary parts of the diagonal ele-
 * ments of A need not be set on input, they are assumed to be zero, and
 * on exit they are set to zero.
 *
 * This is a multi-threaded version of the algorithm.
 *
@extract @(LINE)
 */
@skip
@skip
@rout !
@skip
@skip
@undef PTM_NOTES
@skip
@skip
