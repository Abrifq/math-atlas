@skip
@skip Comments of the ATLAS recursive BLAS implementation              AP99
@skip
@skip Last modification : 11/15/99
@skip
@skip      C      V                      D                             V12345678
@skip
@rout ATL_rsymmLL ATL_rhemmLL ATL_rsymmLU ATL_rhemmLU ATL_rsymmRL ATL_rhemmRL ATL_rsymmRU ATL_rhemmRU
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-matrix operation
 *
@rout ATL_rsymmLL ATL_rhemmLL ATL_rsymmLU ATL_rhemmLU
 *    C := alpha * A * B + beta * C,
@rout ATL_rsymmRL ATL_rhemmRL ATL_rsymmRU ATL_rhemmRU
 *    C := alpha * B * A + beta * C,
@rout ATL_rsymmLL ATL_rhemmLL ATL_rsymmLU ATL_rhemmLU ATL_rsymmRL ATL_rhemmRL ATL_rsymmRU ATL_rhemmRU
 *
@rout ATL_rsymmLL ATL_rsymmRL
 * where alpha and beta are scalars, A is a (lower) symmetric matrix and
@rout ATL_rhemmLL ATL_rhemmRL
 * where alpha and beta are scalars, A is a (lower) Hermitian matrix and
@rout ATL_rsymmLU ATL_rsymmRU
 * where alpha and beta are scalars, A is a (upper) symmetric matrix and
@rout ATL_rhemmLU ATL_rhemmRU
 * where alpha and beta are scalars, A is a (upper) Hermitian matrix and
@rout ATL_rsymmLL ATL_rhemmLL ATL_rsymmLU ATL_rhemmLU ATL_rsymmRL ATL_rhemmRL ATL_rsymmRU ATL_rhemmRU
 * B and C are m by n matrices.
 *
 * This is a type-less recursive version of the algorithm.
 *
@extract @(LINE)
 */
@rout ATL_rsyr2kLN ATL_rsyr2kLT ATL_rher2kLC ATL_rher2kLN ATL_rsyr2kUN ATL_rsyr2kUT ATL_rher2kUC ATL_rher2kUN
/*
@extract @(PURPOSE)
 *
@rout ATL_rsyr2kLN ATL_rsyr2kUN ATL_rsyr2kLT ATL_rsyr2kUT
 * @(rname) performs the following symmetric rank-2k operation
@rout ATL_rher2kLN ATL_rher2kUN ATL_rher2kLC ATL_rher2kUC
 * @(rname) performs the following Hermitian rank-2k operation
@rout ATL_rsyr2kLN ATL_rsyr2kLT ATL_rher2kLC ATL_rher2kLN ATL_rsyr2kUN ATL_rsyr2kUT ATL_rher2kUC ATL_rher2kUN
 *
@rout ATL_rsyr2kLN ATL_rsyr2kUN
 *    C := alpha * A * B' + alpha * B * A' + beta * C,
@rout ATL_rher2kLN ATL_rher2kUN
 *    C := alpha * A * conjg( B )' + conjg( alpha ) * B * conjg( A )' +
 *         beta * C,
@rout ATL_rsyr2kLT ATL_rsyr2kUT
 *    C := alpha * A' * B + alpha * B' * A + beta * C,
@rout ATL_rher2kLC ATL_rher2kUC
 *    C := alpha * conjg( A' ) * B + conjg( alpha ) * conjg( B' ) * A +
 *         beta * C,
@rout ATL_rsyr2kLN ATL_rsyr2kLT ATL_rher2kLC ATL_rher2kLN ATL_rsyr2kUN ATL_rsyr2kUT ATL_rher2kUC ATL_rher2kUN
 *
@rout ATL_rsyr2kLN
 * where  alpha and beta  are scalars,  C is an n by n (lower) symmetric 
 * matrix and A and B are n by k matrices.
@rout ATL_rsyr2kUN
 * where  alpha and beta  are scalars,  C is an n by n (upper) symmetric
 * matrix and A and B are n by k matrices.
@rout ATL_rsyr2kLT
 * where  alpha and beta  are scalars,  C is an n by n (lower) symmetric 
 * matrix and A and B are k by n matrices.
@rout ATL_rsyr2kUT
 * where  alpha and beta  are scalars,  C is an n by n (upper) symmetric
 * matrix and A and B are k by n matrices.
@rout ATL_rher2kLN
 * where  alpha  and  beta are scalars with  beta  real,  C is an n by n
 * (lower) Hermitian matrix and  A  and  B are n by k matrices.
@rout ATL_rher2kUN
 * where  alpha  and  beta are scalars with  beta  real,  C is an n by n
 * (upper) Hermitian matrix and  A  and  B are n by k matrices.
@rout ATL_rher2kLC
 * where  alpha  and  beta are scalars with  beta  real,  C is an n by n
 * (lower) Hermitian matrix and  A  and  B are k by n matrices.
@rout ATL_rher2kUC
 * where  alpha  and  beta are scalars with  beta  real,  C is an n by n
 * (upper) Hermitian matrix and  A  and  B are k by n matrices.
@rout ATL_rsyr2kLN ATL_rsyr2kLT ATL_rher2kLC ATL_rher2kLN ATL_rsyr2kUN ATL_rsyr2kUT ATL_rher2kUC ATL_rher2kUN
 *
 * This is a type-less recursive version of the algorithm.
 *
@extract @(LINE)
 */
@rout ATL_rsyrkLN ATL_rsyrkLT ATL_rsyrkUN ATL_rsyrkUT ATL_rherkLC ATL_rherkLN ATL_rherkUC ATL_rherkUN
/*
@extract @(PURPOSE)
 *
@rout ATL_rsyrkLN ATL_rsyrkUN ATL_rsyrkLT ATL_rsyrkUT
 * @(rname) performs the following symmetric rank-k operation
@rout ATL_rherkLN ATL_rherkUN ATL_rherkLC ATL_rherkUC
 * @(rname) performs the following Hermitian rank-k operation
@rout ATL_rsyrkLN ATL_rsyrkLT ATL_rsyrkUN ATL_rsyrkUT ATL_rherkLC ATL_rherkLN ATL_rherkUC ATL_rherkUN
 *
@rout ATL_rsyrkLN ATL_rsyrkUN
 *    C := alpha * A * A' + beta * C,
@rout ATL_rherkLN ATL_rherkUN
 *    C := alpha * A * conjg( A' ) + beta * C,
@rout ATL_rsyrkLT ATL_rsyrkUT
 *    C := alpha * A' * A + beta * C,
@rout ATL_rherkLC ATL_rherkUC
 *    C := alpha * conjg( A' ) * A + beta * C,
@rout ATL_rsyrkLN ATL_rsyrkLT ATL_rsyrkUN ATL_rsyrkUT ATL_rherkLC ATL_rherkLN ATL_rherkUC ATL_rherkUN
 *
@rout ATL_rsyrkLN
 * where  alpha and beta  are scalars, C  is an n by n (lower) symmetric
 * matrix and A is an  n by k  matrix.
@rout ATL_rsyrkUN
 * where  alpha and beta  are scalars, C  is an n by n (upper) symmetric
 * matrix and A is an  n by k  matrix.
@rout ATL_rsyrkLT
 * where  alpha and beta  are scalars, C  is an n by n (lower) symmetric
 * matrix and A is an  k by n  matrix.
@rout ATL_rsyrkUT
 * where  alpha and beta  are scalars, C  is an n by n (upper) symmetric
 * matrix and A is an  k by n  matrix.
@rout ATL_rherkLN
 * where alpha and beta are real scalars,  C is an n by n (lower) Hermi-
 * tian matrix and  A is an n by k matrix.
@rout ATL_rherkUN
 * where alpha and beta are real scalars,  C is an n by n (upper) Hermi-
 * tian matrix and  A is an n by k matrix.
@rout ATL_rherkLC
 * where alpha and beta are real scalars,  C is an n by n (lower) Hermi-
 * tian matrix and  A is an k by n matrix.
@rout ATL_rherkUC
 * where alpha and beta are real scalars,  C is an n by n (upper) Hermi-
 * tian matrix and  A is an k by n matrix.
@rout ATL_rsyrkLN ATL_rsyrkLT ATL_rsyrkUN ATL_rsyrkUT ATL_rherkLC ATL_rherkLN ATL_rherkUC ATL_rherkUN
 *
 * This is a type-less recursive version of the algorithm.
 *
@extract @(LINE)
 */
@rout ATL_rtrmmLLC ATL_rtrmmLLN ATL_rtrmmLLT ATL_rtrmmLUC ATL_rtrmmLUN ATL_rtrmmLUT
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-matrix operation
 *
@rout ATL_rtrmmLLC ATL_rtrmmLUC
 *    B := alpha * conjg( A' ) * B
@rout ATL_rtrmmLLN ATL_rtrmmLUN
 *    B := alpha * A * B
@rout ATL_rtrmmLLT ATL_rtrmmLUT
 *    B := alpha * A' * B
@rout ATL_rtrmmLLC ATL_rtrmmLLN ATL_rtrmmLLT ATL_rtrmmLUC ATL_rtrmmLUN ATL_rtrmmLUT
 *
@rout ATL_rtrmmLLC ATL_rtrmmLLN ATL_rtrmmLLT
 * where alpha is a scalar, B is an m by n matrix, A is a unit,  or non-
 * unit, lower triangular matrix.
@rout ATL_rtrmmLUC ATL_rtrmmLUN ATL_rtrmmLUT
 * where alpha is a scalar, B is an m by n matrix, A is a unit,  or non-
 * unit, upper triangular matrix.
@rout ATL_rtrmmLLC ATL_rtrmmLLN ATL_rtrmmLLT ATL_rtrmmLUC ATL_rtrmmLUN ATL_rtrmmLUT
 *
 * This is a type-less recursive version of the algorithm.
 *
@extract @(LINE)
 */
@rout ATL_rtrmmRLC ATL_rtrmmRLN ATL_rtrmmRLT ATL_rtrmmRUC ATL_rtrmmRUN ATL_rtrmmRUT
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-matrix operation
 *
@rout ATL_rtrmmRLC ATL_rtrmmRUC
 *    B := alpha * B * conjg( A' ),
@rout ATL_rtrmmRLN ATL_rtrmmRUN
 *    B := alpha * B * A,
@rout ATL_rtrmmRLT ATL_rtrmmRUT
 *    B := alpha * B * A',
@rout ATL_rtrmmRLC ATL_rtrmmRLN ATL_rtrmmRLT ATL_rtrmmRUC ATL_rtrmmRUN ATL_rtrmmRUT
 *
@rout ATL_rtrmmRLC ATL_rtrmmRLN ATL_rtrmmRLT
 * where alpha is a scalar, B is an m by n matrix, A is a unit,  or non-
 * unit, lower triangular matrix.
@rout ATL_rtrmmRUC ATL_rtrmmRUN ATL_rtrmmRUT
 * where alpha is a scalar, B is an m by n matrix, A is a unit,  or non-
 * unit, upper triangular matrix.
@rout ATL_rtrmmRLC ATL_rtrmmRLN ATL_rtrmmRLT ATL_rtrmmRUC ATL_rtrmmRUN ATL_rtrmmRUT
 *
 * This is a type-less recursive version of the algorithm.
 *
@extract @(LINE)
 */
@rout ATL_rtrsmLLC ATL_rtrsmLLN ATL_rtrsmLLT ATL_rtrsmLUC ATL_rtrsmLUN ATL_rtrsmLUT
/*
@extract @(PURPOSE)
 *
 * @(rname) solves the matrix equation
 *
@rout ATL_rtrsmLLC ATL_rtrsmLUC
 *    conjg( A' ) * X = alpha * B,
@rout ATL_rtrsmLLN ATL_rtrsmLUN
 *    A * X = alpha * B,
@rout ATL_rtrsmLLT ATL_rtrsmLUT
 *    A' * X = alpha * B,
@rout ATL_rtrsmLLC ATL_rtrsmLLN ATL_rtrsmLLT ATL_rtrsmLUC ATL_rtrsmLUN ATL_rtrsmLUT
 *
@rout ATL_rtrsmLLC ATL_rtrsmLLN ATL_rtrsmLLT
 * where alpha is a scalar, X and B are m by n matrices, A is a unit, or
 * non-unit, lower triangular matrix. The matrix X is overwritten on B.
@rout ATL_rtrsmLUC ATL_rtrsmLUN ATL_rtrsmLUT
 * where alpha is a scalar, X and B are m by n matrices, A is a unit, or
 * non-unit, upper triangular matrix. The matrix X is overwritten on B.
@rout ATL_rtrsmLLC ATL_rtrsmLLN ATL_rtrsmLLT ATL_rtrsmLUC ATL_rtrsmLUN ATL_rtrsmLUT
 *
 * This is a type-less recursive version of the algorithm.
 *
@extract @(LINE)
 */
@rout ATL_rtrsmRLC ATL_rtrsmRLN ATL_rtrsmRLT ATL_rtrsmRUC ATL_rtrsmRUN ATL_rtrsmRUT
/*
@extract @(PURPOSE)
 *
 * @(rname) solves the matrix equation
 *
@rout ATL_rtrsmRLC ATL_rtrsmRUC
 *    X * conjg( A' ) = alpha * B,
@rout ATL_rtrsmRLN ATL_rtrsmRUN
 *    X * A = alpha * B,
@rout ATL_rtrsmRLT ATL_rtrsmRUT
 *    X * A' = alpha * B,
@rout ATL_rtrsmRLC ATL_rtrsmRLN ATL_rtrsmRLT ATL_rtrsmRUC ATL_rtrsmRUN ATL_rtrsmRUT
 *
@rout ATL_rtrsmRLC ATL_rtrsmRLN ATL_rtrsmRLC
 * where alpha is a scalar, X and B are m by n matrices, A is a unit, or
 * non-unit, lower triangular matrix. The matrix X is overwritten on B.
@rout ATL_rtrsmRUC ATL_rtrsmRUN ATL_rtrsmRUT
 * where alpha is a scalar, X and B are m by n matrices, A is a unit, or
 * non-unit, upper triangular matrix. The matrix X is overwritten on B.
@rout ATL_rtrsmRLC ATL_rtrsmRLN ATL_rtrsmRLT ATL_rtrsmRUC ATL_rtrsmRUN ATL_rtrsmRUT
 *
 * This is a type-less recursive version of the algorithm.
 *
@extract @(LINE)
 */
@rout ATL_trscal
/*
@extract @(PURPOSE)
 *
 * ATL_trscal scales a trapezoidal m-by-n matrix A by the scalar alpha.
 *
@extract @(LINE)
 */
@rout ATL_hescal
/*
@extract @(PURPOSE)
 *
 * ATL_hescal  scales a (trapezoidal)  Hermitian  m-by-n matrix A by the
 * real scalar alpha.  The imaginary parts of the diagonal elements of A
 * need not be set on input,  they are assumed to be zero,  and  on exit
 * they are set to zero.
 *
@extract @(LINE)
 */
@rout !
