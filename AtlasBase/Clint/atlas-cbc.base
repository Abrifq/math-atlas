@ROUT atlas_cbc.h
#ifndef ATLAS_CBC_H
#define ATLAS_CBC_H
#include "atlas_misc.h"
/*
 ******************************************************************************
 * This file prototypes cache-based communication (CBC) routines.
 * The idea is exploit cache coherence mechanisms for thread synchronization
 * (barrier operations) and communication (combine/reduction operations).
 * In the best case, this improves performance from software levels to hardware.
 * If the call being replaced doesn't require real OS intervention (eg., mutex)
 * and is implemented by a reasonable intelligent OS (eg., Linux, not OS X),
 * then the speed improvement is still large due to the difference between
 * cache coherence speed and the speed of explicit mutex calls.
 * 
 * The routines prototyped in this file come into two classes:
 * (1) Those with _cbc_ in the name enforce strong memory ordering in order
 *     to allow the primitive to guarantee that at the end of the sync, all
 *     cores have seen all the writes that preceeded the sync.
 * (2) Those without the _cbc_ just perform the sync/combine, but don't
 *     use a memory fence.
 *
 * Imagine you have a set of threads copying some data into a new format,
 * and another (possibly overlapping) set of threads that need to wait
 * until this copy is complete before they use the produced/copied data.
 * In this case, the sync will need to guarantee that the writes done by
 * the producing (copying) threads can be seen by consuming threads, so
 * the _cbc_ version of the routine must be used.
 *
 * Imagine a producing core copies a large amount of data, and then posts
 * to a boolean sync variable that he has produced the required data.  If
 * the data and sync variable are on the same cacheline, then as far as I
 * know this works correctly on all systems (this is how the scalar combines
 * work without using memory fences).
 *
 * In the more general case where the produced data is on independent cache
 * lines, then the sync will not work on systems with weakly-ordered caches.
 * Coherence protocols can be split into two types:
 * (1) STRONGLY ORDERED CACHES: guarantee that if a thread writes to cachelines
 *     A and then B, no other core can "see" the write of B before they see
 *     the write of A, since that's the order the producing thread wrote them.
 * (2) WEAKLY ORDERED CACHES: if a producing thread writes A and then B,
 *     other cores may see these writes in any order.  This means the fact
 *     that you have seen the change of B (eg. our sync variable saying we are
 *     are done producing data) does not mean it is safe to begin reading A!
 *
 * Weak ordering allows caches to retain data in private write buffers until
 * another core *writes* them (who cares if they read the stale value?), which
 * allows for less delays on write buffer flushes.
 * 
 * In order to make CBC work when the data and sync variable are on separate
 * cachelines, weakly-ordered systems must use memory barriers to ensure that
 * seeing the change in B ensures that all prior writes can be seen.
 *
 * AMD64/IA32 have strongly-ordered caches, as long as you don't use the
 * special weakly-ordered stores.  I believe ATLAS does not use weakly-ordered
 * stores on x86 (I think this instructions were brought in with the PHI),
 * so presently the _cbc_ routines are simply aliased to their non-cbc
 * brethren on x86
 *
 * POWERPC/ARM64 feature weakly-ordered cache systems, and so we need _cbc_
 * routs with the correct memory and OOE fences to guarantee correct behavior.
 *
 * This file also provides macros for barriers that can be used:
 * ATL_membar : force all prior local stores globally visible before executing 
 *              any following local stores, and do not allow any local loads 
 *              to be hoisted above membar.
 * ATL_rmembar: do not allow any local loads to be hoisted above rmembar
 * ATL_wmembar: force all prior local stores globally visible before executing
 *              any following local stores
 *
 ******************************************************************************
 */
/*
 * All known x86 use strongly-ordered caches, so CBC is safe.  
 * There are some instructions on the PHI that seem to violate strong ordering,
 * but ATLAS does not presently use them.  If these inst become important,
 * we may need to define the barriers
 */
#if defined(ATL_GAS_x8664) || defined(ATL_GAS_x8632)
   #define ATL_CBC_HANDLED 1
   #define ATL_USE_CBC 1
   #define ATL_ALIAS_CBC 1
   #ifdef ATL_ALIAS_CBC
      #define ATL_membar
   #else
      #define ATL_membar __asm__ __volatile__ ("mfence" : : : "memory")
      #define ATL_rmembar __asm__ __volatile__ ("lfence" : : : "memory")
      #define ATL_wmembar __asm__ __volatile__ ("sfence" : : : "memory")
   #endif
/*
 * ARM64 has weakly-ordered cache, so CBC must use explicit membarrier to work.
 * This memory barrier code provided by David Nuechterlein, who has gotten
 * CBC-based codes to work based on it.
 */
#elif defined ATL_ARCH_ARM64
   #if __GNUC__
      #define ATL_CBC_HANDLED 1
      #define ATL_USE_CBC 1
      #define ATL_membar __asm__ __volatile__ ("dmb sy" : : : "memory")
      #define ATL_rmembar __asm__ __volatile__ ("isb sy" : : : "memory")
      #define ATL_wmembar __asm__ __volatile__ ("dmb st" : : : "memory")
   #endif
/*
 * CBC came about after Itanium was essentially dead, so it has never been
 * tested there, so don't enable it.  We have this code here in case Itanium
 * becomes important enough to test.
 */
#elif defined(ATL_ARCH_IA64Itan) || defined(ATL_ARCH_IA64Itan2)
   #ifdef __GNUC__
      #define ATL_membarrier __asm__ __volatile__ ("mf")
   #endif
/*
 * On PowerPC and POWER I've never succeeded in getting any memory barrier
 * to work correctly.  IBM docs I've seen essentially say "here's how it should
 * work, but it doesn't, and we aren't going to tell you how it does work".
 * So, this code is just as a starting point if we find some docs or want
 * to do some experimentation later.
 */
#elif defined(ATL_ARCH_PPCG4) || defined(ATL_ARCH_PPCG5)
   #ifdef __GNUC__
      #define ATL_membarrier __asm__ __volatile__ ("sync")
   #endif
#elif defined(ATL_ARCH_POWER3) || defined(ATL_ARCH_POWER4) || \
      defined(ATL_ARCH_POWER5) || defined(ATL_ARCH_POWER6) || \
      defined(ATL_ARCH_POWER7)
   #ifdef __GNUC__
      #define ATL_membarrier __asm__ __volatile__ ("dcs")
   #endif
#endif
#ifdef ATL_CBC_HANDLED
   #undef ATL_CBC_HANDLED
#else
   #ifdef ATL_USE_CBC
      #undef ATL_USE_CBC
   #endif
   #ifdef ATL_membarrier
      #undef ATL_membarrier
   #endif
   #define ATL_membarrier
#endif
/*
 * If read/write membarrier not defined, defined them as global membarrier
 */
#ifndef ATL_rmembar
   #define ATL_rmembar ATL_membar
#endif
#ifndef ATL_wmembar
   #define ATL_wmembar ATL_membar
#endif
void ATL_barrier(ATL_CUINT P, ATL_CUINT IAM, void*);
void ATL_barrier_nopost0(ATL_CUINT P, ATL_CUINT IAM, void*);
#ifdef ATL_ALIAS_CBC
   #define ATL_cbc_barrier ATL_barrier
   #define ATL_cbc_barrier_npost0 ATL_barrier_nopost0
#else
   void ATL_cbc_barrier(ATL_CUINT P, ATL_CUINT IAM, void*);
   void ATL_cbc_barrier_nopost0(ATL_CUINT P, ATL_CUINT IAM, void*);
#endif
@multidef pre d      s     i
@whiledef typ double float int
   @whiledef cmb min max sum
@(typ) ATL_@(pre)comb_@(cmb)(ATL_CUINT P, ATL_CUINT IAM, @(typ) val, void*);
   @endwhile

   @undef pre
@endwhile
@multidef pre z      c
@whiledef typ double float
   @whiledef cmb min max sum
void ATL_@(pre)comb_@(cmb)(ATL_CUINT P, ATL_CUINT IAM, @(typ) *val, void*);
   @endwhile
   @undef pre
@endwhile

@multidef pre      z     c      d    s
@whiledef typ double float double float
int ATL_@(pre)comb_iamax(ATL_CUINT P, ATL_CUINT iam, int idx, 
                    @(typ) *val, void *vchk);
int ATL_@(pre)comb_iamax_nopost0(ATL_CUINT P, ATL_CUINT iam, int *idx, 
                            @(typ) *val, void *vchk);
#ifdef ATL_ALIAS_CBC
   #define ATL_@(pre)cbc_comb_iamax_nopost0 ATL_@(pre)comb_iamax_nopost0
#else
   int ATL_@(pre)cbc_comb_iamax_nopost0(ATL_CUINT P, ATL_CUINT iam, int *idx, 
                                   @(typ) *val, void *vchk);
#endif
   @undef pre
@endwhile

/*
 * Reverse my entry in boolean sync array: RETURNS: new boolean value
 */
char ATL_post(ATL_CUINT rank, void *vchk);
#ifdef ATL_ALIAS_CBC
   #define ATL_cbc_post ATL_post
#else
   char ATL_cbc_post(ATL_CUINT rank, void *vchk);
#endif
@skip void ATL_cbc_wait(ATL_CUINT hisrank, const char val, void *vchk);
#endif /* end ifndef ATL_CBC_H */
@ROUT ATL_barrier
#include "atlas_threads.h"
#include "atlas_cbc.h"
#include "atlas_misc.h"
/*
 * Use cache-based communication to perform a barrier for P threads.
 * This code works on any system with coherent caches (weakly-ordered OK).
 * For weakly-ordered caches, if this barrier is protecting memory, you
 * need to use the DOFENCE (cbc_) variant.
 */
#ifdef DOFENCE
   #ifdef ATL_cbc_barrier
      #undef ATL_cbc_barrier
   #endif
   #ifdef DOPOST
      #define mybarr ATL_cbc_barrier
   #else
      #define mybarr ATL_cbc_barrier_nopost0
   #endif
#else
   #ifdef DOPOST
      #define mybarr ATL_barrier
   #else
      #define mybarr ATL_barrier_nopost0
   #endif
#endif
void mybarr
(
   ATL_CUINT P,     /* # of threads to barrier */
   ATL_CUINT iam,   /* rank of calling thread in barrier */
   void *vchk
)
{
   volatile char *bchk = (vchk) ? (volatile char*)vchk : ATL_TP_PTR->bchkin;
   ATL_CUINT II = iam<<ATL_chksh;
   const char newv = !bchk[II];

   if (iam)
   {
      bchk[II] = newv;
      #ifdef DOFENCE
         ATL_membar;
      #endif
      while (*bchk != newv);
   }
   else
   {
      int i;
      for (i=1; i < P; i++)
      {
         ATL_CUINT d = i<<ATL_chksh;
         while (bchk[d] != newv);
      }
      #ifdef DOPOST
         #ifdef DOFENCE
            ATL_membar;
         #endif
         *bchk = newv;
      #endif
   }
}
@ROUT ATL_comb1 ATL_comb_iamax ATL_comb_iamax_nopost0
#include "atlas_threads.h"
#include "atlas_misc.h"
#include "atlas_cbc.h"
@ROUT ATL_comb1
#if defined(TCPLX) && (defined(COMBMIN) || defined(COMBMAX))
   #include <math.h>  /* for fabs */
#endif
@ROUT ATL_comb_iamax ATL_comb_iamax_nopost0
#include <math.h>  /* for fabs */
@ROUT ATL_comb1 ATL_comb_iamax ATL_comb_iamax_nopost0
/*
 * Use cache-based comm to perform a scalar combine for P threads.
 * This code works on any system with coherent caches (weakly-ordered OK)
 * because the data and boolean sync variables are on the same cache line.
 * We guarantee this by separating each region by ATL_chkgap, which should
 * always be >= cache line size (default value 128).  Then, as long as
 * we can fit all data being combined into the same cache line, coherence
 * will guarantee we have the sync boolean and the data regardless of
 * weakly- or strongly-ordered caches.  At least on the ARM, however,
 * we must memory barrier to prevent OOE from advancing loads above the
 * sync.
 */
@ROUT ATL_comb1
#if defined(COMBMIN)
   #define COMB Mjoin(PATL,comb_min)
   #define combvals(v1_, v2_) ((v1_) <= (v2_)) ? (v1_) : (v2_)
#elif defined(COMBMAX)
   #define COMB Mjoin(PATL,comb_max)
   #define combvals(v1_, v2_) ((v1_) >= (v2_)) ? (v1_) : (v2_)
#elif defined(COMBSUM)
   #define COMB Mjoin(PATL,comb_sum)
   #define combvals(v1_, v2_) (v1_) + (v2_)
#else
   #error "Unknown combine!"
#endif
#ifdef TCPLX
   void COMB
   (
      ATL_CUINT P,     /* # of threads in combine */
      ATL_CUINT iam,   /* rank of calling thread in combine */
      TYPE *val,       /* local min */
      void *vchk
   )
#else
   TYPE COMB
   (
      ATL_CUINT P,     /* # of threads in combine */
      ATL_CUINT iam,   /* rank of calling thread in combine */
      TYPE val,        /* local min */
      void *vchk
   )
#endif
@ROUT ATL_comb1
{
   volatile char *bchk = vchk ? (volatile char*) vchk : ATL_TP_PTR->bchkin;
   volatile char *mybool = bchk + (iam<<ATL_chksh);
   volatile TYPE *myval = (volatile TYPE*)(mybool + ATL_sizeof);
   const char newv = !(*mybool);

   if (iam)
   {
      volatile TYPE *ans = (volatile TYPE*) (bchk + ATL_sizeof);
      #ifdef TCPLX
         *myval = *val;
         myval[1] = val[1];
      #else
         *myval = val;
      #endif
      *mybool = newv;
      while (*bchk != newv);
      #ifdef TCPLX
         *val = *ans;
         val[1] = ans[1];
      #else
         val = *ans;
      #endif
   }
   else
   {
      int i;
      #if defined(TCPLX) && !defined(COMBSUM)
         TYPE mv = fabs(*val) + fabs(val[1]);
      #endif
      for (i=1; i < P; i++)
      {
         ATL_CUINT d = i<<ATL_chksh;
         volatile TYPE *hisval = (volatile TYPE*)(bchk+d+ATL_sizeof);
         TYPE hv;

         while (bchk[d] != newv);  /* wait for his answer to appear */
         #ifdef TCPLX
            #if defined(COMBSUM)
               *val += *hisval;
               val[1] += hisval[1];
            #else
               hv = fabs(*hisval) + fabs(hisval[1]);
               #if defined(COMBMAX)
               if (hv > mv)
               #else /* COMBMIN */
               if (hv < mv)
               #endif
               {
                  mv = hv;
                  *val = *hisval;
                  val[1] = hisval[1];
               }
            #endif
         #else
            hv = *hisval;
            val = combvals(val, hv);
         #endif
      }
      #ifdef TCPLX
         *myval = *val;      /* provide global answer for real */
         myval[1] = val[1];  /* and for imaginary */
      #else
         *myval = val;       /* provide global answer */
      #endif
      *bchk = newv;          /* signal answer is ready */
   }
   #ifndef TCPLX
      return(val);
   #endif
}
@ROUT ATL_comb_iamax_nopost0
/*
 * This routine is used in LU, and it is different from comb_iamax in that
 * rank==0 does post its "we're done" to its sync array before exiting.
 * This means all threads except 0 remain blocked in this routine while 0
 * exits it with the global answer.  In this way we can keep other cores
 * waiting until after core 0 performs pivoting, which avoids doubling the
 * number of syncs required for unblkd LU.
 *
 * It is also different in that we return the global index using a pointer,
 * and the function return is the value to post to the sync array
 */
#ifdef DOFENCE
   #ifdef ATL_dcbc_comb_iamax_nopost0
      #undef ATL_dcbc_comb_iamax_nopost0
      #undef ATL_scbc_comb_iamax_nopost0
      #undef ATL_ccbc_comb_iamax_nopost0
      #undef ATL_zcbc_comb_iamax_nopost0
   #endif
   int Mjoin(PATL,cbc_comb_iamax_nopost0)/* RETURNS: global sync post value */
#else
   int Mjoin(PATL,comb_iamax_nopost0)    /* RETURNS: global sync post value */
#endif
(
   ATL_CUINT P,     /* # of threads in combine */
   ATL_CUINT iam,   /* rank of calling thread in combine */
   int *IDX,        /* INPUT: local index, OUTPUT: global idx */
   TYPE *val,       /* INPUT: local max, OUTPUT: global max */
   void *vchk
)
@ROUT ATL_comb_iamax
int Mjoin(PATL,comb_iamax)  /* RETURNS: global index */
(
   ATL_CUINT P,     /* # of threads in combine */
   ATL_CUINT iam,   /* rank of calling thread in combine */
   int idx,         /* index of max val */
   TYPE *val,       /* INPUT: local max, OUTPUT: global max */
   void *vchk
)
@ROUT ATL_comb_iamax ATL_comb_iamax_nopost0
{
   volatile char *bchk = vchk ? (volatile char*) vchk : ATL_TP_PTR->bchkin;
   volatile char *mybool = bchk + (iam<<ATL_chksh);
   const int mysize = Mmax(ATL_isize, ATL_sizeof);
   volatile TYPE *myval = (volatile TYPE*)(mybool + mysize);
   volatile int *myidx = (volatile int*)(mybool + mysize + (mysize SHIFT));
   const char newv = !(*mybool);
@ROUT ATL_comb_iamax_nopost0 `   int idx = *IDX;`

   if (iam)
   {
      volatile TYPE *ans = (volatile TYPE*) (bchk + mysize);
      volatile int *hisidx = (volatile int*) (bchk + mysize + (mysize SHIFT));
      *myidx = idx;
      #ifdef TCPLX
         myval[1] = val[1];
      #endif
      *myval = *val;
      #ifdef DOFENCE
         ATL_membar;
      #endif
      *mybool = newv;
      while (*bchk != newv);
      *val = *ans;
      #ifdef TCPLX
         val[1] = ans[1];
      #endif
      idx = *hisidx;
   }
   else
   {
      int i;
      #if defined(TCPLX)
         TYPE mv = fabs(*val) + fabs(val[1]);
      #else
         TYPE mv = fabs(*val);
      #endif
      for (i=1; i < P; i++)
      {
         ATL_CUINT d = i<<ATL_chksh;
         volatile TYPE *hisval = (volatile TYPE*)(bchk+d+mysize);
         volatile int *hisidx = (volatile int*) (bchk+d+mysize+(mysize SHIFT));
         TYPE hv;
         int hidx;

         while (bchk[d] != newv);  /* wait for his answer to appear */
         hv = fabs(*hisval);
         hidx = *hisidx;
         #ifdef TCPLX
            hv += fabs(hisval[1]);
         #endif
         if (hv > mv || (hv == mv && hidx < idx))
         {
            idx = hidx;
            mv = hv;
            *val = *hisval;
            #ifdef TCPLX
               val[1] = hisval[1];
            #endif
         }
      }
      *myidx = idx;          /* provide global answer for index */
      *myval = *val;         /* and real value */
      #ifdef TCPLX
         myval[1] = val[1];  /* and for imaginary value */
      #endif
@ROUT ATL_comb_iamax
      *bchk = newv;          /* signal answer is ready */
   }
   return(idx);
@ROUT ATL_comb_iamax_nopost0
   }
   *IDX = idx;
   return(newv);
@ROUT ATL_comb_iamax ATL_comb_iamax_nopost0
}
@ROUT ATL_post
#include "atlas_cbc.h"
#include "atlas_threads.h"
/*
 * Used to post done to boolean sync array, by reversing present condition.
 * should only be called by the thread given by rank.
 * RETURNS: new value of post variable
 */
#ifdef DOFENCE
   #undef ATL_cbc_post
   char ATL_cbc_post(ATL_CUINT rank, void *vchk)
#else
   char ATL_post(ATL_CUINT rank, void *vchk)
#endif
@ROUT ATL_post
{
   volatile char *bchk = (vchk) ? (volatile char*)vchk : ATL_TP_PTR->bchkin;
   ATL_CUINT II = rank<<ATL_chksh;
   const char newv = !bchk[II];
   #ifdef DOFENCE
      ATL_membar;
   #endif
   bchk[II] = newv;
   return(newv);
}
@ROUT ATL_cbc_wait
#include "atlas_cbc.h"
#include "atlas_threads.h"
void ATL_cbc_wait
(
   ATL_CUINT hisrank,  /* rank to wait on */
   const char val,     /* value he will write to signal end of wait */
   void *vchk          /* optional boolean sync array */
)
{
   volatile char *bchk = (vchk) ? (volatile char*)vchk : ATL_TP_PTR->bchkin;
   ATL_CUINT ih = hisrank<<ATL_chksh;
   while (bchk[ih] != val);
}
