@skip
@skip Comments of the ATLAS Level 3 BLAS implementation                AP99
@skip
@skip Last modification : 11/15/99
@skip
@skip      C      V                      D                             V12345678
@skip
@rout ATL_symm ATL_hemm
/*
@extract @(PURPOSE)
 *
 * @(rname)  performs one of the matrix-matrix operations
 *
 *    C := alpha * A * B + beta * C,
 *
 * or
 *
 *    C := alpha * B * A + beta * C,
 *
@rout ATL_symm
 * where alpha and beta are scalars,  A  is a symmetric matrix and B and
@rout ATL_hemm 
 * where alpha and beta are scalars,  A  is a Hermitian matrix and B and
@rout ATL_symm ATL_hemm
 * C are m by n matrices.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_syrk ATL_herk
/*
@extract @(PURPOSE)
 *
 * @(rname)  performs one of the @(syhe_comm) rank k operations
 *
@rout ATL_syrk
 *    C := alpha * A * A' + beta * C,
@rout ATL_herk
 *    C := alpha * A * conjg( A' ) + beta * C,
@rout ATL_syrk ATL_herk
 *
 * or
 *
@rout ATL_syrk
 *    C := alpha * A' * A + beta * C,
@rout ATL_herk
 *    C := alpha * conjg( A' ) * A + beta * C,
@rout ATL_syrk ATL_herk
 *
@rout ATL_syrk
 * where alpha and beta are scalars, C is an n by n @(syhe_comm) matrix and
 * A is an  n by k  matrix in the first case and a  k by n matrix in the
 * second case.
@rout ATL_herk
 * where alpha and beta are  real  scalars, C is an n by n @(syhe_comm) ma-
 * trix and  A is an n by k matrix in the first case and a k by n matrix
 * in the second case.
@rout ATL_syrk ATL_herk
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_syr2k ATL_her2k
/*
@extract @(PURPOSE)
 *
 * @(rname)  performs one of the @(syhe_comm) rank 2k operations
 *
@rout ATL_syr2k
 *    C := alpha * A * B' + alpha * B * A' + beta * C,
@rout ATL_her2k
 *    C := alpha * A * conjg( B )' + conjg( alpha ) * B * conjg( A )' +
 *         beta * C,
@rout ATL_syr2k ATL_her2k
 *
 * or
 *
@rout ATL_syr2k
 *    C := alpha * A' * B + alpha * B' * A + beta * C,
@rout ATL_her2k
 *    C := alpha * conjg( A' ) * B + conjg( alpha ) * conjg( B' ) * A +
 *         beta * C,
@rout ATL_syr2k ATL_her2k
 *
@rout ATL_syr2k
 * where alpha and beta are scalars, C is an n by n @(syhe_comm) matrix and
 * A and B are n by k matrices in the first case and k by n  matrices in
 * the second case.
@rout ATL_her2k
 * where  alpha  and  beta are scalars with  beta  real,  C is an n by n
 * @(syhe_comm) matrix and  A  and  B are n by k matrices in the first case
 * and k by n matrices in the second case.
@rout ATL_syr2k ATL_her2k
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_trmm
/*
@extract @(PURPOSE)
 *
 * @(rname)  performs one of the matrix-matrix operations
 *
 *    B := alpha * op( A ) * B,   or    B := alpha * B * op( A ),
 *
 * where alpha is a scalar, B is an m by n matrix, A is a unit,  or non-
 * unit, upper or lower triangular matrix and op( X ) is one of
 *
 *    op( X ) = X   or   op( X ) = X'   or   op( X ) = conjg( X' ).
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_trsm        
/*
@extract @(PURPOSE)
 *
 * @(rname)  solves one of the matrix equations
 *
 *    op( A ) * X = alpha * B,   or  X * op( A ) = alpha * B,
 *
 * where alpha is a scalar, X and B are m by n matrices, A is a unit, or
 * non-unit, upper or lower triangular matrix and op( A ) is one of
 *
 *    op( A ) = A   or   op( A ) = A'   or   op( A ) = conjg( A' ).
 *
 * The matrix X is overwritten on B.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout !
