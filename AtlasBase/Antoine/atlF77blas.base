@skip ==================================================================
@skip F77 BLAS / ATLAS interface                                    AP00
@skip Last modification : 12/05/00
@skip Modified by rcw on 06/12/01 to add axpby and set to makefile
@skip ==================================================================
@skip File layout:
@skip
@skip param_side, param_uplo, param_tran, param_diag, lsame,      xerbla,
@skip dcabs1,     rotg,       rotmg,      nrm2,       asum,       amax,
@skip scal,       axpy,       copy,       swap,       rot,        rotm,
@skip dot,        dsdot,      sdsdot,
@skip gemv,       symv,       trmv,       trsv,       ger,        syr,
@skip syr2,       spmv,       spr,        spr2,       tpmv,       tpsv,
@skip gbmv,       sbmv,       tbmv,       tbsv,
@skip gemm,       symm,       syr2k,      syrk,       trmm,       trsm,
@skip Make.f77blas.
@skip ==================================================================
@skip Global define statements
@skip
@extract -addkeys -b @(BASEdir)include/atlas.inc lan=F
@skip ==================================================================
@skip Specific define statements
@skip
@define BLAS_PARAM_SIDE @-addkeys -b @(srcdir)/atlF77blas.base rout=param_side@
@define BLAS_PARAM_UPLO @-addkeys -b @(srcdir)/atlF77blas.base rout=param_uplo@
@define BLAS_PARAM_TRAN @-addkeys -b @(srcdir)/atlF77blas.base rout=param_tran@
@define BLAS_PARAM_DIAG @-addkeys -b @(srcdir)/atlF77blas.base rout=param_diag@
@skip ==================================================================
@skip
@rout param_side
      INTEGER            ILEFT, IRIGHT
      PARAMETER          ( ILEFT = 141, IRIGHT = 142 )
@skip
@skip ==================================================================
@skip
@rout param_uplo
      INTEGER            ILOWER, IUPPER
      PARAMETER          ( IUPPER = 121, ILOWER = 122 )
@skip
@skip ==================================================================
@skip
@rout param_tran
      INTEGER            ICOTRAN, INOTRAN, ITRAN
      PARAMETER          ( INOTRAN = 111, ITRAN = 112, ICOTRAN = 113 )
@skip
@skip ==================================================================
@skip
@rout param_diag
      INTEGER            INONUNIT, IUNIT
      PARAMETER          ( INONUNIT = 131, IUNIT = 132 )
@skip
@skip ==================================================================
@skip
@rout lsame
@define rname @LSAME@
      LOGICAL          FUNCTION @(rname)( CA, CB )
@extract @(VER_ATLAS_F77_SRC) -def author "LAPACK (version 3.0)"
@extract @(SCALAR_ARGUMENT)
      CHARACTER          CA, CB
@extract @(DOTS)
 
@extract @(ATLAS_F77_SRC_COMMENT)
 
@extract @(LOCAL_SCALAR)
      INTEGER            INTA, INTB, ZCODE
@extract @(DOTS)
@extract @(INTRINSIC_FUNCTION)
      INTRINSIC          ICHAR
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      @(rname) = ( CA.EQ.CB )
*
      IF( @(rname) )
     $   RETURN
*
      ZCODE = ICHAR( 'Z' )
      INTA  = ICHAR( CA  )
      INTB  = ICHAR( CB  )
*
      IF(      ( ZCODE.EQ.90  ).OR.( ZCODE.EQ.122 ) ) THEN
*
         IF( ( INTA.GE.97 ).AND.( INTA.LE.122 ) )
     $      INTA = INTA - 32
         IF( ( INTB.GE.97 ).AND.( INTB.LE.122 ) )
     $      INTB = INTB - 32
*
      ELSE IF( ( ZCODE.EQ.233 ).OR.( ZCODE.EQ.169 ) ) THEN
*
         IF( ( INTA.GE.129 ).AND.( INTA.LE.137 ).OR.
     $       ( INTA.GE.145 ).AND.( INTA.LE.153 ).OR.
     $       ( INTA.GE.162 ).AND.( INTA.LE.169 ) )
     $      INTA = INTA + 64
*
         IF( ( INTB.GE.129 ).AND.( INTB.LE.137 ).OR.
     $       ( INTB.GE.145 ).AND.( INTB.LE.153 ).OR.
     $       ( INTB.GE.162 ).AND.( INTB.LE.169 ) )
     $      INTB = INTB + 64
*
      ELSE IF( ( ZCODE.EQ.218 ).OR.( ZCODE.EQ.250 ) ) THEN
*
         IF( ( INTA.GE.225 ).AND.( INTA.LE.250 ) )
     $      INTA = INTA - 32
         IF( ( INTB.GE.225 ).AND.( INTB.LE.250 ) )
     $      INTB = INTB - 32
*
      END IF
*
      @(rname) = ( INTA.EQ.INTB )
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout xerbla
@define rname @XERBLA@
      SUBROUTINE @(rname)( SRNAME, INFO )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      INTEGER            INFO
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      CHARACTER*6        SRNAME
@extract @(DOTS)
 
@extract @(ATLAS_F77_SRC_COMMENT) -def author "LAPACK (version 3.0)"
 
@extract @(EXECUTABLE_STATEMENT)
      WRITE( *, FMT = 9999 ) SRNAME, INFO
*
      STOP
*
 9999 FORMAT( ' ** On entry to ', A6, ' parameter number ', I2, ' had ',
     $        'an illegal value' )
*
*     End of XERBLA
*
      END
@undef rname
@skip
@skip ==================================================================
@skip
@rout dcabs1
@define rname @DCABS1@
      DOUBLE PRECISION FUNCTION DCABS1( Z )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      DOUBLE COMPLEX     Z
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)
 
@extract @(LOCAL_SCALAR)
      DOUBLE COMPLEX     ZZ
@extract @(DOTS)
@extract @(LOCAL_ARRAY)
      DOUBLE PRECISION   T( 2 )
@extract @(DOTS)
@extract @(EQUIVALENCE_STATEMENT)
      EQUIVALENCE        ( ZZ, T( 1 ) )
@extract @(DOTS)
@extract @(INTRINSIC_FUNCTION)
@declare @(INTRINSIC)
      DABS
@enddeclare
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      ZZ = Z
      @(rname) = DABS( T( 1 ) ) + DABS( T( 2 ) )
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout rotg
@define rname @@(pre)ROTG@
      SUBROUTINE @(rname)( A, B, C, S )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
@type real dble
      @(type_decl) C, A, B, S
@type cplx zplx
      @(utyp_decl) C
      @(type_decl) A, B, S
@type real dble cplx zplx
@extract @(DOTS)
 
@extract @(ATLAS_F77_SRC_COMMENT)
 
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname)
@enddeclare
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      CALL ATL_F77WRAP_@(rname)( A, B, C, S )
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout rotmg
@define rname @@(upr)ROTMG@
      SUBROUTINE @(rname)( D1, D2, X1, Y1, PARAM )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      @(utyp_decl) D1, D2, X1, Y1
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(utyp_decl) PARAM( * )
@extract @(DOTS)
 
@extract @(ATLAS_F77_SRC_COMMENT)
 
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname)
@enddeclare
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      CALL ATL_F77WRAP_@(rname)( D1, D2, X1, Y1, PARAM )
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout nrm2
@type real dble
@define rname @@(pre)NRM2@
@type cplx zplx
@define rname @@(upr)@(pre)NRM2@
@type real dble cplx zplx
      @(utyp_decl) FUNCTION @(rname)( N, X, INCX )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      INTEGER            INCX, N
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) X( * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)
 
@extract @(PARAMETER)
      @(utyp_decl) ZERO
@type real cplx
      PARAMETER          ( ZERO = 0.0E+0 )
@type dble zplx
      PARAMETER          ( ZERO = 0.0D+0 )
@type real dble cplx zplx
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      @(utyp_decl) NORM2
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname)
@enddeclare
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      IF( N.GT.0 ) THEN
         CALL ATL_F77WRAP_@(rname)( N, X, INCX, NORM2 )
         @(rname) = NORM2
      ELSE
         @(rname) = ZERO
      END IF
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout asum
@type real dble
@define rname @@(pre)ASUM@
@type cplx zplx
@define rname @@(upr)@(pre)ASUM@
@type real dble cplx zplx
      @(utyp_decl) FUNCTION @(rname)( N, X, INCX )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      INTEGER            INCX, N
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) X( * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)
 
@extract @(PARAMETER)
      @(utyp_decl) ZERO
@type real cplx
      PARAMETER          ( ZERO = 0.0E+0 )
@type dble zplx
      PARAMETER          ( ZERO = 0.0D+0 )
@type real dble cplx zplx
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      @(utyp_decl) ASUM
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname)
@enddeclare
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      IF( N.GT.0 ) THEN
         CALL ATL_F77WRAP_@(rname)( N, X, INCX, ASUM )
         @(rname) = ASUM
      ELSE
         @(rname) = ZERO
      END IF
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout amax
@define rname @I@(pre)AMAX@
      INTEGER FUNCTION @(rname)( N, X, INCX )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      INTEGER            INCX, N
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) X( * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)
 
@extract @(LOCAL_SCALAR) 
      INTEGER            INDX
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname)
@enddeclare
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      IF( N.GT.0 ) THEN
         CALL ATL_F77WRAP_@(rname)( N, X, INCX, INDX )
         @(rname) = INDX + 1
      ELSE
         @(rname) = 0
      END IF
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout scal
@type real dble cplx zplx
@define rname @@(pre)SCAL@
@type chex zhex
@define rname @@(pre)@(upr)SCAL@
@type real dble cplx zplx chex zhex
      SUBROUTINE @(rname)( N, ALPHA, X, INCX )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      INTEGER            INCX, N
@type real dble cplx zplx
      @(type_decl) ALPHA
@type chex zhex
      @(utyp_decl) ALPHA
@type real dble cplx zplx chex zhex
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) X( * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname)
@enddeclare
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      IF( N.GT.0 ) THEN
         CALL ATL_F77WRAP_@(rname)( N, ALPHA, X, INCX )
      END IF
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout axpy
@define rname @@(pre)AXPY@
      SUBROUTINE @(rname)( N, ALPHA, X, INCX, Y, INCY )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      INTEGER            INCX, INCY, N
      @(type_decl) ALPHA
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) X( * ), Y( * )
@extract @(DOTS)
 
@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname)
@enddeclare
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      IF( N.GT.0 ) THEN
         CALL ATL_F77WRAP_@(rname)( N, ALPHA, X, INCX, Y, INCY )
      END IF
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout copy
@define rname @@(pre)COPY@
      SUBROUTINE @(rname)( N, X, INCX, Y, INCY )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      INTEGER            INCX, INCY, N
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) X( * ), Y( * )
@extract @(DOTS)
 
@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname)
@enddeclare
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      IF( N.GT.0 ) THEN
         CALL ATL_F77WRAP_@(rname)( N, X, INCX, Y, INCY )
      END IF
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout swap
@define rname @@(pre)SWAP@
      SUBROUTINE @(rname)( N, X, INCX, Y, INCY )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      INTEGER            INCX, INCY, N
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) X( * ), Y( * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)
 
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname)
@enddeclare
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      IF( N.GT.0 ) THEN
         CALL ATL_F77WRAP_@(rname)( N, X, INCX, Y, INCY )
      END IF
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout rot
@type real dble
@define rname @@(pre)ROT@
@type cplx zplx
@define rname @@(pre)@(upr)ROT@
@type real dble cplx zplx
      SUBROUTINE @(rname)( N, X, INCX, Y, INCY, C, S )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      INTEGER            INCX, INCY, N
      @(utyp_decl) C, S
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) X( * ), Y( * )
@extract @(DOTS)
 
@extract @(ATLAS_F77_SRC_COMMENT)
 
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname)
@enddeclare
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      IF( N.GT.0 ) THEN
         CALL ATL_F77WRAP_@(rname)( N, X, INCX, Y, INCY, C, S )
      END IF
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout rotm
@define rname @@(upr)ROTM@
      SUBROUTINE @(rname)( N, X, INCX, Y, INCY, PARAM )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      INTEGER            INCX, INCY, N
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(utyp_decl) PARAM( * ), X( * ), Y( * )
@extract @(DOTS)
 
@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname)
@enddeclare
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      IF( N.GT.0 ) THEN
         CALL ATL_F77WRAP_@(rname)( N, X, INCX, Y, INCY, PARAM )
      END IF
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout dot
@define rname @@(pre)DOT@(uc)@
      @(type_decl) FUNCTION @(rname)( N, X, INCX, Y, INCY )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      INTEGER            INCX, INCY, N
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) X( * ), Y( * )
@extract @(DOTS)
 
@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(PARAMETER)
      @(type_decl) ZERO
@type real
      PARAMETER          ( ZERO = 0.0E+0 )
@type dble
      PARAMETER          ( ZERO = 0.0D+0 )
@type cplx chex
      PARAMETER          ( ZERO = ( 0.0E+0, 0.0E+0 ) )
@type zplx zhex 
      PARAMETER          ( ZERO = ( 0.0D+0, 0.0D+0 ) )
@type real dble cplx zplx chex zhex
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      @(type_decl) DOT
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname)
@enddeclare
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      IF( N.GT.0 ) THEN
         CALL ATL_F77WRAP_@(rname)( N, X, INCX, Y, INCY, DOT )
         @(rname) = DOT
      ELSE
         @(rname) = ZERO
      END IF
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout dsdot
@define rname @DSDOT@
      DOUBLE PRECISION FUNCTION @(rname)( N, X, INCX, Y, INCY )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      INTEGER            INCX, INCY, N
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      REAL               X( * ), Y( * )
@extract @(DOTS)
 
@extract @(ATLAS_F77_SRC_COMMENT)
 
@extract @(PARAMETER)
      DOUBLE PRECISION   ZERO
      PARAMETER          ( ZERO = 0.0D+0 )
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      DOUBLE PRECISION   DOT
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname)
@enddeclare
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      IF( N.GT.0 ) THEN
         CALL ATL_F77WRAP_@(rname)( N, X, INCX, Y, INCY, DOT )
         @(rname) = DOT
      ELSE
         @(rname) = ZERO
      END IF
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout sdsdot
@define rname @SDSDOT@
      REAL FUNCTION @(rname)( N, B, X, INCX, Y, INCY )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      INTEGER            INCX, INCY, N
      REAL               B
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      REAL               X( * ), Y( * )
@extract @(DOTS)
 
@extract @(ATLAS_F77_SRC_COMMENT)
 
@extract @(LOCAL_SCALAR)
      REAL               DOT
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname)
@enddeclare
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      IF( N.GT.0 ) THEN
         CALL ATL_F77WRAP_@(rname)( N, B, X, INCX, Y, INCY, DOT )
         @(rname) = DOT
      ELSE
         @(rname) = B
      END IF
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout gemv
@define rname @@(pre)GEMV@
      SUBROUTINE @(rname)( TRANS, M, N, ALPHA, A, LDA, X, INCX,
     $                  BETA, Y, INCY )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      CHARACTER*1        TRANS
      INTEGER            INCX, INCY, LDA, M, N
      @(type_decl) ALPHA, BETA
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) A( LDA, * ), X( * ), Y( * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(PARAMETER) 
@extract @(BLAS_PARAM_TRAN)
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      INTEGER            INFO, ITRANS
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname), XERBLA
@enddeclare
@extract @(DOTS)
@extract @(EXTERNAL_FUNCTION)
      EXTERNAL           LSAME
      LOGICAL            LSAME
@extract @(DOTS)
@extract @(INTRINSIC_FUNCTION)
      INTRINSIC          MAX
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      INFO = 0
*
      IF(      LSAME( TRANS, 'N' ) ) THEN
         ITRANS = INOTRAN
      ELSE IF( LSAME( TRANS, 'T' ) ) THEN
         ITRANS = ITRAN
      ELSE IF( LSAME( TRANS, 'C' ) ) THEN
         ITRANS = ICOTRAN
      ELSE IF( INFO.EQ.0 ) THEN
         INFO  = 1
      END IF

      IF( INFO.EQ.0 ) THEN
         IF( M.LT.0 ) THEN
            INFO = 2
         ELSE IF( N.LT.0 ) THEN
            INFO = 3
         ELSE IF( LDA.LT.MAX( 1, M ) ) THEN
            INFO = 6
         ELSE IF( INCX.EQ.0 ) THEN
            INFO = 8
         ELSE IF( INCY.EQ.0 ) THEN
            INFO = 11
         END IF
      END IF
*
      IF( INFO.NE.0 ) THEN
         CALL XERBLA( '@6l@(rname)', INFO )
         RETURN
      END IF
*
      CALL ATL_F77WRAP_@(rname)( ITRANS, M, N, ALPHA, A, LDA, X, INCX,
     $                        BETA, Y, INCY )
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout symv
@define rname @@(pre)@(syhe)MV@
      SUBROUTINE @(rname)( UPLO, N, ALPHA, A, LDA, X, INCX,
     $                  BETA, Y, INCY )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      CHARACTER*1        UPLO
      INTEGER            INCX, INCY, LDA, N
      @(type_decl) ALPHA, BETA
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) A( LDA, * ), X( * ), Y( * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(PARAMETER) 
@extract @(BLAS_PARAM_UPLO)
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      INTEGER            INFO, IUPLO
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname), XERBLA
@enddeclare
@extract @(DOTS)
@extract @(EXTERNAL_FUNCTION)
      EXTERNAL           LSAME
      LOGICAL            LSAME
@extract @(DOTS)
@extract @(INTRINSIC_FUNCTION)
      INTRINSIC          MAX
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      INFO = 0
*
      IF(      LSAME( UPLO  , 'U' ) ) THEN
         IUPLO = IUPPER
      ELSE IF( LSAME( UPLO  , 'L' ) ) THEN
         IUPLO = ILOWER
      ELSE IF( INFO.EQ.0 ) THEN
         INFO  = 1
      END IF

      IF( INFO.EQ.0 ) THEN
         IF(      N.LT.0 ) THEN
            INFO = 2
         ELSE IF( LDA.LT.MAX( 1, N ) ) THEN
            INFO = 5
         ELSE IF( INCX.EQ.0 ) THEN
            INFO = 7
         ELSE IF( INCY.EQ.0 ) THEN
            INFO = 10
         END IF
      END IF
*
      IF( INFO.NE.0 ) THEN
         CALL XERBLA( '@6l@(rname)', INFO )
         RETURN
      END IF
*
      CALL ATL_F77WRAP_@(rname)( IUPLO, N, ALPHA, A, LDA, X, INCX,
     $                        BETA, Y, INCY ) 
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout trmv
@define rname @@(pre)TRMV@
@rout trsv
@define rname @@(pre)TRSV@
@rout trmv trsv
      SUBROUTINE @(rname)( UPLO, TRANS, DIAG, N, A, LDA, X, INCX )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      CHARACTER*1        DIAG, TRANS, UPLO
      INTEGER            INCX, LDA, N
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) A( LDA, * ), X( * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(PARAMETER) 
@extract @(BLAS_PARAM_UPLO)
@extract @(BLAS_PARAM_TRAN)
@extract @(BLAS_PARAM_DIAG)
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      INTEGER            IDIAG, INFO, ITRANS, IUPLO
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname), XERBLA
@enddeclare
@extract @(DOTS)
@extract @(EXTERNAL_FUNCTION)
      EXTERNAL           LSAME
      LOGICAL            LSAME
@extract @(DOTS)
@extract @(INTRINSIC_FUNCTION)
      INTRINSIC          MAX
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      INFO = 0
*
      IF(      LSAME( UPLO , 'U' ) ) THEN
         IUPLO = IUPPER
      ELSE IF( LSAME( UPLO , 'L' ) ) THEN
         IUPLO = ILOWER
      ELSE IF( INFO.EQ.0 ) THEN
         INFO  = 1
      END IF
*
      IF(      LSAME( TRANS, 'N' ) ) THEN
         ITRANS = INOTRAN
      ELSE IF( LSAME( TRANS, 'T' ) ) THEN
         ITRANS = ITRAN
      ELSE IF( LSAME( TRANS, 'C' ) ) THEN
         ITRANS = ICOTRAN
      ELSE IF( INFO.EQ.0 ) THEN
         INFO   = 2
      END IF
*
      IF(      LSAME( DIAG , 'N' ) ) THEN
         IDIAG = INONUNIT
      ELSE IF( LSAME( DIAG , 'U' ) ) THEN
         IDIAG = IUNIT
      ELSE IF( INFO.EQ.0 ) THEN
         INFO  = 3
      END IF
*
      IF( INFO.EQ.0 ) THEN
         IF( N.LT.0 ) THEN
            INFO = 4
         ELSE IF( LDA.LT.MAX( 1, N ) ) THEN
            INFO = 6
         ELSE IF( INCX.EQ.0 ) THEN
            INFO = 8
         END IF
      END IF
*
      IF( INFO.NE.0 ) THEN
         CALL XERBLA( '@6l@(rname)', INFO )
         RETURN
      END IF
*
      CALL ATL_F77WRAP_@(rname)( IUPLO, ITRANS, IDIAG, N, A, LDA,
     $                        X, INCX )
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ger2
@define rname @@(pre)GER2@(uc)@
      SUBROUTINE @(rname)( M, N, ALPHA, X, INCX, Y, INCY, BETA, 
     $                  W, INCW, Z, INCZ, A, LDA )
@extract @(VER_ATLAS_F77_SRC) -def author "R. Clint Whaley" -def year 2010
@extract @(SCALAR_ARGUMENT)
      INTEGER            INCX, INCY, INCW, INCZ, LDA, M, N
      @(type_decl) ALPHA, BETA
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) A( LDA, * ), X( * ), Y( * ), W( * ), Z( * )
@ROUT ger
@define rname @@(pre)GER@(uc)@
      SUBROUTINE @(rname)( M, N, ALPHA, X, INCX, Y, INCY, A, LDA )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      INTEGER            INCX, INCY, LDA, M, N
      @(type_decl) ALPHA
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) A( LDA, * ), X( * ), Y( * )      
@ROUT ger ger2
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)
 
@extract @(LOCAL_SCALAR)
      INTEGER            INFO
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname), XERBLA
@enddeclare
@extract @(DOTS)
@extract @(INTRINSIC_FUNCTION)
      INTRINSIC          MAX
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      INFO = 0
*
      IF(      M.LT.0 ) THEN
         INFO = 1
      ELSE IF( N.LT.0 ) THEN
         INFO = 2
      ELSE IF( INCX.EQ.0 ) THEN
         INFO = 5
      ELSE IF( INCY.EQ.0 ) THEN
         INFO = 7
@ROUT ger2
      ELSE IF( INCW.EQ.0 ) THEN
         INFO = 10
      ELSE IF( INCZ.EQ.0 ) THEN
         INFO = 12
@ROUT ger ger2
      ELSE IF( LDA.LT.MAX( 1, M ) ) THEN
@ROUT ger `         INFO = 9`
@ROUT ger2 `         INFO = 14`
      END IF
*
      IF( INFO.NE.0 ) THEN
         CALL XERBLA( '@6l@(rname)', INFO )
         RETURN
      END IF
*
@ROUT ger2
      CALL ATL_F77WRAP_@(rname)( M, N, ALPHA, X, INCX, Y, INCY, 
     $                        BETA, W, INCW, Z, INCZ, A, LDA )
@ROUT ger
      CALL ATL_F77WRAP_@(rname)( M, N, ALPHA, X, INCX, Y, INCY, A, LDA )
@ROUT ger ger2
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout syr
@define rname @@(pre)@(syhe)R@
      SUBROUTINE @(rname)( UPLO, N, ALPHA, X, INCX, A, LDA )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      CHARACTER*1        UPLO
      INTEGER            INCX, LDA, N
@type real dble cplx zplx
      @(type_decl) ALPHA
@type chex zhex
      @(utyp_decl) ALPHA
@type real dble cplx zplx chex zhex
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) A( LDA, * ), X( * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)
 
@extract @(PARAMETER)
@extract @(BLAS_PARAM_UPLO)
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      INTEGER            INFO, IUPLO
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname), XERBLA
@enddeclare
@extract @(DOTS)
@extract @(EXTERNAL_FUNCTION)
      EXTERNAL           LSAME
      LOGICAL            LSAME
@extract @(DOTS)
@extract @(INTRINSIC_FUNCTION)
      INTRINSIC          MAX
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      INFO = 0
*
      IF(      LSAME( UPLO  , 'U' ) ) THEN
         IUPLO = IUPPER
      ELSE IF( LSAME( UPLO  , 'L' ) ) THEN
         IUPLO = ILOWER
      ELSE IF( INFO.EQ.0 ) THEN
         INFO  = 1
      END IF
*
      IF( INFO.EQ.0 ) THEN
         IF( N.LT.0 ) THEN
            INFO = 2
         ELSE IF( INCX.EQ.0 ) THEN
            INFO = 5
         ELSE IF( LDA.LT.MAX( 1, N ) ) THEN
            INFO = 7
         END IF
      END IF
*
      IF( INFO.NE.0 ) THEN
         CALL XERBLA( '@6l@(rname)', INFO )
         RETURN
      END IF
*
      CALL ATL_F77WRAP_@(rname)( IUPLO, N, ALPHA, X, INCX, A, LDA )
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout syr2
@define rname @@(pre)@(syhe)R2@
      SUBROUTINE @(rname)( UPLO, N, ALPHA, X, INCX, Y, INCY, A, LDA )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      CHARACTER*1        UPLO
      INTEGER            INCX, INCY, LDA, N
      @(type_decl) ALPHA
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) A( LDA, * ), X( * ), Y( * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(PARAMETER) 
@extract @(BLAS_PARAM_UPLO)
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      INTEGER            INFO, IUPLO
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname), XERBLA
@enddeclare
@extract @(DOTS)
@extract @(EXTERNAL_FUNCTION)
      EXTERNAL           LSAME
      LOGICAL            LSAME
@extract @(DOTS)
@extract @(INTRINSIC_FUNCTION)
      INTRINSIC          MAX
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      INFO = 0
*
      IF(      LSAME( UPLO  , 'U' ) ) THEN
         IUPLO = IUPPER
      ELSE IF( LSAME( UPLO  , 'L' ) ) THEN
         IUPLO = ILOWER
      ELSE IF( INFO.EQ.0 ) THEN
         INFO  = 1
      END IF
*
      IF( INFO.EQ.0 ) THEN
         IF( N.LT.0 ) THEN
            INFO = 2
         ELSE IF( INCX.EQ.0 ) THEN
            INFO = 5
         ELSE IF( INCY.EQ.0 ) THEN
            INFO = 7
         ELSE IF( LDA.LT.MAX( 1, N ) ) THEN
            INFO = 9
         END IF
      END IF
*
      IF( INFO.NE.0 ) THEN
         CALL XERBLA( '@6l@(rname)', INFO )
         RETURN
      END IF
*
      CALL ATL_F77WRAP_@(rname)( IUPLO, N, ALPHA, X, INCX, Y, INCY, A,
     $                        LDA )
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout spmv
@define rname @@(pre)@(sphp)MV@
      SUBROUTINE @(rname)( UPLO, N, ALPHA, A, X, INCX, BETA, Y, INCY )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      CHARACTER*1        UPLO
      INTEGER            INCX, INCY, N
      @(type_decl) ALPHA, BETA
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) A( * ), X( * ), Y( * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(PARAMETER) 
@extract @(BLAS_PARAM_UPLO)
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      INTEGER            INFO, IUPLO
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname), XERBLA
@enddeclare
@extract @(DOTS)
@extract @(EXTERNAL_FUNCTION)
      EXTERNAL           LSAME
      LOGICAL            LSAME
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      INFO = 0
*
      IF(      LSAME( UPLO  , 'U' ) ) THEN
         IUPLO = IUPPER
      ELSE IF( LSAME( UPLO  , 'L' ) ) THEN
         IUPLO = ILOWER
      ELSE IF( INFO.EQ.0 ) THEN
         INFO  = 1
      END IF
*
      IF( INFO.EQ.0 ) THEN
         IF( N.LT.0 ) THEN
            INFO = 2
         ELSE IF( INCX.EQ.0 ) THEN
            INFO = 6
         ELSE IF( INCY.EQ.0 ) THEN
            INFO = 9
         END IF
      END IF
*
      IF( INFO.NE.0 ) THEN
         CALL XERBLA( '@6l@(rname)', INFO )
         RETURN
      END IF
*
      CALL ATL_F77WRAP_@(rname)( IUPLO, N, ALPHA, A, X, INCX, BETA,
     $                        Y, INCY )
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout spr
@define rname @@(pre)@(sphp)R@
      SUBROUTINE @(rname)( UPLO, N, ALPHA, X, INCX, A )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      CHARACTER*1        UPLO
      INTEGER            INCX, N
@type real dble cplx zplx
      @(type_decl) ALPHA
@type chex zhex
      @(utyp_decl) ALPHA
@type real dble cplx zplx chex zhex
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) A( * ), X( * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(PARAMETER) 
@extract @(BLAS_PARAM_UPLO)
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      INTEGER            INFO, IUPLO
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname), XERBLA
@enddeclare
@extract @(DOTS)
@extract @(EXTERNAL_FUNCTION)
      EXTERNAL           LSAME
      LOGICAL            LSAME
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      INFO = 0
*
      IF(      LSAME( UPLO  , 'U' ) ) THEN
         IUPLO = IUPPER
      ELSE IF( LSAME( UPLO  , 'L' ) ) THEN
         IUPLO = ILOWER
      ELSE IF( INFO.EQ.0 ) THEN
         INFO  = 1
      END IF
*
      IF( INFO.EQ.0 ) THEN
         IF( N.LT.0 ) THEN
            INFO = 2
         ELSE IF( INCX.EQ.0 ) THEN
            INFO = 5
         END IF
      END IF
*
      IF( INFO.NE.0 ) THEN
         CALL XERBLA( '@6l@(rname)', INFO )
         RETURN
      END IF
*
      CALL ATL_F77WRAP_@(rname)( IUPLO, N, ALPHA, X, INCX, A )
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout spr2
@define rname @@(pre)@(sphp)R2@
      SUBROUTINE @(rname)( UPLO, N, ALPHA, X, INCX, Y, INCY, A )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      CHARACTER*1        UPLO
      INTEGER            INCX, INCY, N
      @(type_decl) ALPHA
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) A( * ), X( * ), Y( * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(PARAMETER) 
@extract @(BLAS_PARAM_UPLO)
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      INTEGER            INFO, IUPLO
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname), XERBLA
@enddeclare
@extract @(DOTS)
@extract @(EXTERNAL_FUNCTION)
      EXTERNAL           LSAME
      LOGICAL            LSAME
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      INFO = 0
*
      IF(      LSAME( UPLO  , 'U' ) ) THEN
         IUPLO = IUPPER
      ELSE IF( LSAME( UPLO  , 'L' ) ) THEN
         IUPLO = ILOWER
      ELSE IF( INFO.EQ.0 ) THEN
         INFO  = 1
      END IF
*
      IF( INFO.EQ.0 ) THEN
         IF( N.LT.0 ) THEN
            INFO = 2
         ELSE IF( INCX.EQ.0 ) THEN
            INFO = 5
         ELSE IF( INCY.EQ.0 ) THEN
            INFO = 7
         END IF
      END IF
*
      IF( INFO.NE.0 ) THEN
         CALL XERBLA( '@6l@(rname)', INFO )
         RETURN
      END IF
*
      CALL ATL_F77WRAP_@(rname)( IUPLO, N, ALPHA, X, INCX, Y, INCY, A )
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout tpmv
@define rname @@(pre)TPMV@
@rout tpsv
@define rname @@(pre)TPSV@
@rout tpmv tpsv
      SUBROUTINE @(rname)( UPLO, TRANS, DIAG, N, A, X, INCX )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      CHARACTER*1        DIAG, TRANS, UPLO
      INTEGER            INCX, N
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) A( * ), X( * ) 
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(PARAMETER) 
@extract @(BLAS_PARAM_UPLO)
@extract @(BLAS_PARAM_TRAN)
@extract @(BLAS_PARAM_DIAG)
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      INTEGER            IDIAG, INFO, ITRANS, IUPLO
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname), XERBLA
@enddeclare
@extract @(DOTS)
@extract @(EXTERNAL_FUNCTION)
      EXTERNAL           LSAME
      LOGICAL            LSAME
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      INFO = 0
*
      IF(      LSAME( UPLO , 'U' ) ) THEN
         IUPLO = IUPPER
      ELSE IF( LSAME( UPLO , 'L' ) ) THEN
         IUPLO = ILOWER
      ELSE IF( INFO.EQ.0 ) THEN
         INFO  = 1
      END IF
*
      IF(      LSAME( TRANS, 'N' ) ) THEN
         ITRANS = INOTRAN
      ELSE IF( LSAME( TRANS, 'T' ) ) THEN
         ITRANS = ITRAN
      ELSE IF( LSAME( TRANS, 'C' ) ) THEN
         ITRANS = ICOTRAN
      ELSE IF( INFO.EQ.0 ) THEN
         INFO   = 2
      END IF
*
      IF(      LSAME( DIAG , 'N' ) ) THEN
         IDIAG = INONUNIT
      ELSE IF( LSAME( DIAG , 'U' ) ) THEN
         IDIAG = IUNIT
      ELSE IF( INFO.EQ.0 ) THEN
         INFO  = 3
      END IF
*
      IF( INFO.EQ.0 ) THEN
         IF( N.LT.0 ) THEN
            INFO = 4
         ELSE IF( INCX.EQ.0 ) THEN
            INFO = 7
         END IF
      END IF
*
      IF( INFO.NE.0 ) THEN
         CALL XERBLA( '@6l@(rname)', INFO )
         RETURN
      END IF
*
      CALL ATL_F77WRAP_@(rname)( IUPLO, ITRANS, IDIAG, N, A, X, INCX )
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout gbmv
@define rname @@(pre)GBMV@
      SUBROUTINE @(rname)( TRANS, M, N, KL, KU, ALPHA, A, LDA, X, INCX,
     $                  BETA, Y, INCY )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      CHARACTER*1        TRANS
      INTEGER            INCX, INCY, KL, KU, LDA, M, N
      @(type_decl) ALPHA, BETA
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) A( LDA, * ), X( * ), Y( * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(PARAMETER) 
@extract @(BLAS_PARAM_TRAN)
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      INTEGER            INFO, ITRANS
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname), XERBLA
@enddeclare
@extract @(DOTS)
@extract @(EXTERNAL_FUNCTION)
      EXTERNAL           LSAME
      LOGICAL            LSAME
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      INFO = 0
*
      IF(      LSAME( TRANS, 'N' ) ) THEN
         ITRANS = INOTRAN
      ELSE IF( LSAME( TRANS, 'T' ) ) THEN
         ITRANS = ITRAN
      ELSE IF( LSAME( TRANS, 'C' ) ) THEN
         ITRANS = ICOTRAN
      ELSE IF( INFO.EQ.0 ) THEN
         INFO  = 1
      END IF
*
      IF( INFO.EQ.0 ) THEN
         IF( M.LT.0 ) THEN
            INFO = 2
         ELSE IF( N.LT.0 ) THEN
            INFO = 3
         ELSE IF( KL.LT.0 ) THEN
            INFO = 4
         ELSE IF( KU.LT.0 ) THEN
            INFO = 5
         ELSE IF( LDA.LT.( KL + KU + 1 ) ) THEN
            INFO = 8
         ELSE IF( INCX.EQ.0 ) THEN
            INFO = 10
         ELSE IF( INCY.EQ.0 ) THEN
            INFO = 13
         END IF
      END IF
*
      IF( INFO.NE.0 ) THEN
         CALL XERBLA( '@6l@(rname)', INFO )
         RETURN
      END IF 
*
      CALL ATL_F77WRAP_@(rname)( ITRANS, M, N, KL, KU, ALPHA, A, LDA,
     $                        X, INCX, BETA, Y, INCY )
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout sbmv
@define rname @@(pre)@(sbhb)MV@
      SUBROUTINE @(rname)( UPLO, N, K, ALPHA, A, LDA, X, INCX,
     $                  BETA, Y, INCY )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      CHARACTER*1        UPLO
      INTEGER            INCX, INCY, K, LDA, N
      @(type_decl) ALPHA, BETA
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) A( LDA, * ), X( * ), Y( * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(PARAMETER) 
@extract @(BLAS_PARAM_UPLO)
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      INTEGER            INFO, IUPLO
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname), XERBLA
@enddeclare
@extract @(DOTS)
@extract @(EXTERNAL_FUNCTION)
      EXTERNAL           LSAME
      LOGICAL            LSAME
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      INFO = 0
*
      IF(      LSAME( UPLO  , 'U' ) ) THEN
         IUPLO = IUPPER
      ELSE IF( LSAME( UPLO  , 'L' ) ) THEN
         IUPLO = ILOWER
      ELSE IF( INFO.EQ.0 ) THEN
         INFO  = 1
      END IF
*
      IF( INFO.EQ.0 ) THEN
         IF( N.LT.0 ) THEN
            INFO = 2
         ELSE IF( K.LT.0 ) THEN
            INFO = 3
         ELSE IF( LDA.LT.( K + 1 ) ) THEN
            INFO = 6
         ELSE IF( INCX.EQ.0 ) THEN
            INFO = 8
         ELSE IF( INCY.EQ.0 ) THEN
            INFO = 11
         END IF
      END IF
*
      IF( INFO.NE.0 ) THEN
         CALL XERBLA( '@6l@(rname)', INFO )
         RETURN
      END IF
*
      CALL ATL_F77WRAP_@(rname)( IUPLO, N, K, ALPHA, A, LDA, X, INCX,
     $                        BETA, Y, INCY ) 
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout tbmv
@define rname @@(pre)TBMV@
@rout tbsv
@define rname @@(pre)TBSV@
@rout tbmv tbsv
      SUBROUTINE @(rname)( UPLO, TRANS, DIAG, N, K, A, LDA, X, INCX )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      CHARACTER*1        DIAG, TRANS, UPLO
      INTEGER            INCX, K, LDA, N
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) A( LDA, * ), X( * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(PARAMETER) 
@extract @(BLAS_PARAM_UPLO)
@extract @(BLAS_PARAM_TRAN)
@extract @(BLAS_PARAM_DIAG)
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      INTEGER            IDIAG, INFO, ITRANS, IUPLO
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname), XERBLA
@enddeclare
@extract @(DOTS)
@extract @(EXTERNAL_FUNCTION)
      EXTERNAL           LSAME
      LOGICAL            LSAME
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      INFO = 0
*
      IF(      LSAME( UPLO , 'U' ) ) THEN
         IUPLO = IUPPER
      ELSE IF( LSAME( UPLO , 'L' ) ) THEN
         IUPLO = ILOWER
      ELSE IF( INFO.EQ.0 ) THEN
         INFO  = 1
      END IF
*
      IF(      LSAME( TRANS, 'N' ) ) THEN
         ITRANS = INOTRAN
      ELSE IF( LSAME( TRANS, 'T' ) ) THEN
         ITRANS = ITRAN
      ELSE IF( LSAME( TRANS, 'C' ) ) THEN
         ITRANS = ICOTRAN
      ELSE IF( INFO.EQ.0 ) THEN
         INFO   = 2
      END IF
*
      IF(      LSAME( DIAG , 'N' ) ) THEN
         IDIAG = INONUNIT
      ELSE IF( LSAME( DIAG , 'U' ) ) THEN
         IDIAG = IUNIT
      ELSE IF( INFO.EQ.0 ) THEN
         INFO  = 3
      END IF
*
      IF( INFO.EQ.0 ) THEN
         IF(      N.LT.0 ) THEN
            INFO = 4
         ELSE IF( K.LT.0 ) THEN
            INFO = 5
         ELSE IF( LDA.LT.( K + 1 ) ) THEN
            INFO = 7
         ELSE IF( INCX.EQ.0 ) THEN
            INFO = 9
         END IF
      END IF
*
      IF( INFO.NE.0 ) THEN
         CALL XERBLA( '@6l@(rname)', INFO )
         RETURN
      END IF
*
      CALL ATL_F77WRAP_@(rname)( IUPLO, ITRANS, IDIAG, N, K, A, LDA,
     $                        X, INCX )
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout gemm
@define rname @@(pre)GEMM@
      SUBROUTINE @(rname)( TRANSA, TRANSB, M, N, K, ALPHA, A, LDA, B, LDB,
     $                  BETA, C, LDC )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      CHARACTER*1        TRANSA, TRANSB
      INTEGER            M, N, K, LDA, LDB, LDC
      @(type_decl) ALPHA, BETA
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) A( LDA, * ), B( LDB, * ), C( LDC, * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(PARAMETER) 
@extract @(BLAS_PARAM_TRAN)
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      INTEGER            INFO, ITRANSA, ITRANSB, NROWA, NROWB
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname), XERBLA
@enddeclare
@extract @(DOTS)
@extract @(EXTERNAL_FUNCTION)
      EXTERNAL           LSAME
      LOGICAL            LSAME
@extract @(DOTS)
@extract @(INTRINSIC_FUNCTION)
      INTRINSIC          MAX
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      INFO = 0
*
      IF(      LSAME( TRANSA, 'N' ) ) THEN
         ITRANSA = INOTRAN
         NROWA   = M
      ELSE IF( LSAME( TRANSA, 'T' ) ) THEN
         ITRANSA = ITRAN
         NROWA   = K
      ELSE IF( LSAME( TRANSA, 'C' ) ) THEN
         ITRANSA = ICOTRAN
         NROWA   = K
      ELSE
         ITRANSA = INOTRAN
         NROWA   = 0
         INFO    = 1
      END IF
*
      IF(      LSAME( TRANSB, 'N' ) ) THEN
         ITRANSB = INOTRAN
         NROWB   = K
      ELSE IF( LSAME( TRANSB, 'T' ) ) THEN
         ITRANSB = ITRAN
         NROWB   = N
      ELSE IF( LSAME( TRANSB, 'C' ) ) THEN
         ITRANSB = ICOTRAN
         NROWB   = N
      ELSE IF( INFO.EQ.0 ) THEN
         ITRANSB = INOTRAN
         NROWB   = 0
         INFO    = 2
      END IF
*
      IF( INFO.EQ.0 ) THEN
         IF(      M  .LT.0               ) THEN
            INFO = 3
         ELSE IF( N  .LT.0               ) THEN
            INFO = 4
         ELSE IF( K  .LT.0               ) THEN
            INFO = 5
         ELSE IF( LDA.LT.MAX( 1, NROWA ) ) THEN
            INFO = 8
         ELSE IF( LDB.LT.MAX( 1, NROWB ) ) THEN
            INFO = 10
         ELSE IF( LDC.LT.MAX( 1, M     ) ) THEN
            INFO = 13
         END IF
      END IF
*
      IF( INFO.NE.0 ) THEN
         CALL XERBLA( '@6l@(rname)', INFO )
         RETURN
      END IF
*
      CALL ATL_F77WRAP_@(rname)( ITRANSA, ITRANSB, M, N, K, ALPHA, A, LDA,
     $                        B, LDB, BETA, C, LDC )
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout symm
@define rname @@(pre)@(syhe)MM@
      SUBROUTINE @(rname)( SIDE, UPLO, M, N, ALPHA, A, LDA, B, LDB,
     $                  BETA, C, LDC )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      CHARACTER*1        SIDE, UPLO
      INTEGER            M, N, LDA, LDB, LDC
      @(type_decl) ALPHA, BETA
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) A( LDA, * ), B( LDB, * ), C( LDC, * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(PARAMETER) 
@extract @(BLAS_PARAM_SIDE)
@extract @(BLAS_PARAM_UPLO)
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      INTEGER            INFO, ISIDE, IUPLO, NROWA
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname), XERBLA
@enddeclare
@extract @(DOTS)
@extract @(EXTERNAL_FUNCTION)
      EXTERNAL           LSAME
      LOGICAL            LSAME
@extract @(DOTS)
@extract @(INTRINSIC_FUNCTION)
      INTRINSIC          MAX
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      INFO = 0
*
      IF(      LSAME( SIDE  , 'L' ) ) THEN
         ISIDE = ILEFT
         NROWA = M
      ELSE IF( LSAME( SIDE  , 'R' ) ) THEN
         ISIDE = IRIGHT
         NROWA = N
      ELSE
         ISIDE = ILEFT
         NROWA = 0
         INFO  = 1
      END IF
*
      IF(      LSAME( UPLO  , 'U' ) ) THEN
         IUPLO = IUPPER
      ELSE IF( LSAME( UPLO  , 'L' ) ) THEN
         IUPLO = ILOWER
      ELSE IF( INFO.EQ.0 ) THEN
         IUPLO = IUPPER
         INFO  = 2
      END IF
*
      IF( INFO.EQ.0 ) THEN
         IF(      M  .LT.0               ) THEN
            INFO = 3
         ELSE IF( N  .LT.0               ) THEN
            INFO = 4
         ELSE IF( LDA.LT.MAX( 1, NROWA ) ) THEN
            INFO = 7
         ELSE IF( LDB.LT.MAX( 1, M     ) ) THEN
            INFO = 9
         ELSE IF( LDC.LT.MAX( 1, M     ) ) THEN
            INFO = 12
         END IF
      END IF
*
      IF( INFO.NE.0 ) THEN
         CALL XERBLA( '@6l@(rname)', INFO )
         RETURN
      END IF
*
      CALL ATL_F77WRAP_@(rname)( ISIDE, IUPLO, M, N, ALPHA, A, LDA,
     $                        B, LDB, BETA, C, LDC )
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout syr2k
@define rname @@(pre)@(syhe)R2K@
      SUBROUTINE @(rname)( UPLO, TRANS, N, K, ALPHA, A, LDA, B, LDB,
     $                   BETA, C, LDC )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      CHARACTER*1        UPLO, TRANS
      INTEGER            N, K, LDA, LDB, LDC
@type real dble cplx zplx
      @(type_decl) ALPHA, BETA
@type chex zhex
      @(utyp_decl) BETA
      @(type_decl) ALPHA
@type real dble cplx zplx chex zhex
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) A( LDA, * ), B( LDB, * ), C( LDC, * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(PARAMETER) 
@extract @(BLAS_PARAM_UPLO)
@extract @(BLAS_PARAM_TRAN)
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      INTEGER            INFO, ITRANS, IUPLO, NROWA
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname), XERBLA
@enddeclare
@extract @(DOTS)
@extract @(EXTERNAL_FUNCTION)
      EXTERNAL           LSAME
      LOGICAL            LSAME
@extract @(DOTS)
@extract @(INTRINSIC_FUNCTION)
      INTRINSIC          MAX
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      INFO = 0
*
      IF(      LSAME( UPLO , 'L' ) ) THEN
         IUPLO = ILOWER
      ELSE IF( LSAME( UPLO , 'U' ) ) THEN
         IUPLO = IUPPER
      ELSE
         IUPLO = ILOWER
         INFO  = 1
      END IF
*
      IF(      LSAME( TRANS, 'N' ) ) THEN
         ITRANS = INOTRAN
         NROWA  = N
@type real dble cplx zplx
      ELSE IF( LSAME( TRANS, 'T' ) ) THEN
         ITRANS = ITRAN
         NROWA  = K
@type real dble chex zhex
      ELSE IF( LSAME( TRANS, 'C' ) ) THEN
         ITRANS = ICOTRAN
         NROWA  = K
@type real dble cplx zplx chex zhex
      ELSE IF( INFO.EQ.0 ) THEN
         ITRANS = INOTRAN
         NROWA  = 0
         INFO   = 2
      END IF
*
      IF( INFO.EQ.0 ) THEN
         IF(      N  .LT.0               ) THEN
            INFO = 3
         ELSE IF( K  .LT.0               ) THEN
            INFO = 4
         ELSE IF( LDA.LT.MAX( 1, NROWA ) ) THEN
            INFO = 7
         ELSE IF( LDB.LT.MAX( 1, NROWA ) ) THEN
            INFO = 9
         ELSE IF( LDC.LT.MAX( 1, N     ) ) THEN
            INFO = 12
         END IF
      END IF
*
      IF( INFO.NE.0 ) THEN
         CALL XERBLA( '@6l@(rname)', INFO )
         RETURN
      END IF
*
      CALL ATL_F77WRAP_@(rname)( IUPLO, ITRANS, N, K, ALPHA, A, LDA,
     $                         B, LDB, BETA, C, LDC )
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout syrk
@define rname @@(pre)@(syhe)RK@
      SUBROUTINE @(rname)( UPLO, TRANS, N, K, ALPHA, A, LDA, BETA,
     $                  C, LDC )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      CHARACTER*1        UPLO, TRANS
      INTEGER            N, K, LDA, LDC
@type real dble cplx zplx
      @(type_decl) ALPHA, BETA
@type chex zhex
      @(utyp_decl) ALPHA, BETA
@type real dble cplx zplx chex zhex
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) A( LDA, * ), C( LDC, * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(PARAMETER) 
@extract @(BLAS_PARAM_UPLO)
@extract @(BLAS_PARAM_TRAN)
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      INTEGER            INFO, ITRANS, IUPLO, NROWA
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname), XERBLA
@enddeclare
@extract @(DOTS)
@extract @(EXTERNAL_FUNCTION)
      EXTERNAL           LSAME
      LOGICAL            LSAME
@extract @(DOTS)
@extract @(INTRINSIC_FUNCTION)
      INTRINSIC          MAX
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      INFO = 0
*
      IF(      LSAME( UPLO , 'L' ) ) THEN
         IUPLO = ILOWER
      ELSE IF( LSAME( UPLO , 'U' ) ) THEN
         IUPLO = IUPPER
      ELSE
         IUPLO = ILOWER
         INFO  = 1
      END IF
*
      IF(      LSAME( TRANS, 'N' ) ) THEN
         ITRANS = INOTRAN
         NROWA  = N
@type real dble cplx zplx
      ELSE IF( LSAME( TRANS, 'T' ) ) THEN
         ITRANS = ITRAN
         NROWA  = K
@type real dble chex zhex
      ELSE IF( LSAME( TRANS, 'C' ) ) THEN
         ITRANS = ICOTRAN
         NROWA  = K
@type real dble cplx zplx chex zhex
      ELSE IF( INFO.EQ.0 ) THEN
         ITRANS = INOTRAN
         NROWA  = 0
         INFO   = 2 
      END IF
*
      IF( INFO.EQ.0 ) THEN
         IF(      N  .LT.0               ) THEN
            INFO = 3
         ELSE IF( K  .LT.0               ) THEN
            INFO = 4
         ELSE IF( LDA.LT.MAX( 1, NROWA ) ) THEN
            INFO = 7
         ELSE IF( LDC.LT.MAX( 1, N     ) ) THEN
            INFO = 10
         END IF
      END IF
*
      IF( INFO.NE.0 ) THEN
         CALL XERBLA( '@6l@(rname)', INFO )
         RETURN
      END IF
*
      CALL ATL_F77WRAP_@(rname)( IUPLO, ITRANS, N, K, ALPHA, A, LDA, 
     $                        BETA, C, LDC )
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout trmm
@define rname @@(pre)TRMM@
@rout trsm
@define rname @@(pre)TRSM@
@rout trmm trsm
      SUBROUTINE @(rname)( SIDE, UPLO, TRANSA, DIAG, M, N, ALPHA, A, LDA,
     $                  B, LDB )
@extract @(VER_ATLAS_F77_SRC)
@extract @(SCALAR_ARGUMENT)
      CHARACTER*1        SIDE, UPLO, TRANSA, DIAG
      INTEGER            M, N, LDA, LDB
      @(type_decl) ALPHA
@extract @(DOTS)
@extract @(ARRAY_ARGUMENT)
      @(type_decl) A( LDA, * ), B( LDB, * )
@extract @(DOTS)

@extract @(ATLAS_F77_SRC_COMMENT)

@extract @(PARAMETER) 
@extract @(BLAS_PARAM_SIDE)
@extract @(BLAS_PARAM_UPLO)
@extract @(BLAS_PARAM_TRAN)
@extract @(BLAS_PARAM_DIAG)
@extract @(DOTS)
@extract @(LOCAL_SCALAR)
      INTEGER            IDIAG, INFO, ISIDE, IUPLO, ITRANS, NROWA
@extract @(DOTS)
@extract @(EXTERNAL_SUBROUTINE)
@declare @(EXTERNAL)
      ATL_F77WRAP_@(rname), XERBLA
@enddeclare
@extract @(DOTS)
@extract @(EXTERNAL_FUNCTION)
      EXTERNAL           LSAME
      LOGICAL            LSAME
@extract @(DOTS)
@extract @(INTRINSIC_FUNCTION)
      INTRINSIC          MAX
@extract @(DOTS)
@extract @(EXECUTABLE_STATEMENT)
      INFO = 0
*
      IF(      LSAME( SIDE  , 'L' ) ) THEN
         ISIDE = ILEFT
         NROWA = M
      ELSE IF( LSAME( SIDE  , 'R' ) ) THEN
         ISIDE = IRIGHT
         NROWA = N
      ELSE
         ISIDE = ILEFT
         NROWA = 0
         INFO  = 1
      END IF
*
      IF(      LSAME( UPLO  , 'U' ) ) THEN
         IUPLO = IUPPER
      ELSE IF( LSAME( UPLO  , 'L' ) ) THEN
         IUPLO = ILOWER
      ELSE IF( INFO.EQ.0 ) THEN
         IUPLO = IUPPER
         INFO  = 2
      END IF
*
      IF(      LSAME( TRANSA, 'N' ) ) THEN
         ITRANS = INOTRAN
      ELSE IF( LSAME( TRANSA, 'T' ) ) THEN
         ITRANS = ITRAN
      ELSE IF( LSAME( TRANSA, 'C' ) ) THEN
         ITRANS = ICOTRAN
      ELSE IF( INFO.EQ.0 ) THEN
         ITRANS = INOTRAN
         INFO   = 3
      END IF
*
      IF(      LSAME( DIAG  , 'N' ) ) THEN
         IDIAG = INONUNIT
      ELSE IF( LSAME( DIAG  , 'U' ) ) THEN
         IDIAG = IUNIT
      ELSE IF( INFO.EQ.0 ) THEN
         INFO  = 4
      END IF
*
      IF( INFO.EQ.0 ) THEN
         IF(      M  .LT.0               ) THEN
            INFO = 5
         ELSE IF( N  .LT.0               ) THEN
            INFO = 6
         ELSE IF( LDA.LT.MAX( 1, NROWA ) ) THEN
            INFO = 9
         ELSE IF( LDB.LT.MAX( 1, M     ) ) THEN
            INFO = 11
         END IF
      END IF
*
      IF( INFO.NE.0 ) THEN
         CALL XERBLA( '@6l@(rname)', INFO )
         RETURN
      END IF
*
      CALL ATL_F77WRAP_@(rname)( ISIDE, IUPLO, ITRANS, IDIAG, M, N,
     $                        ALPHA, A, LDA, B, LDB )
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout Make.f77blas
@SKIP Modified by RCW to use parallel make
@extract @(VER_ATLAS_MAK)
#
include Make.inc
mySRCdir = $(SRCdir)/interfaces/blas/F77/src
#
########################################################################
#
INCdep = \
   $(INCSdir)/atlas_enum.h        $(INCSdir)/atlas_f77.h       \
   $(INCSdir)/atlas_refalias1.h   $(INCSdir)/atlas_refalias2.h \
   $(INCSdir)/atlas_refalias3.h   $(INCSdir)/atlas_ptalias1.h  \
   $(INCSdir)/atlas_ptalias2.h    $(INCSdir)/atlas_ptalias3.h  \
   $(INCSdir)/atlas_level1.h      $(INCSdir)/atlas_level2.h    \
   $(INCSdir)/atlas_level3.h
#
## Object files ########################################################
# 
aobj     = \
@declare "   " y y
   @multidef rout_
      xerbla lsame dcabs1
   @endmultidef
   @whiledef rout_
      @(rout_).o
   @endwhile
@enddeclare
#
@multidef upr_ d s d s
@whiledef pre_ z c d s
   @addkeys ptyp_=@(pre_)
@(pre_)lvl1obj = \
   @declare "   " y n 
      @ptyp_ s
         @multidef rout_ 
            sdsdot       dsdot        @(pre_)dot   @(pre_)rotm
            @(pre_)rot   @(pre_)swap  @(pre_)copy  @(pre_)axpy
            i@(pre_)amax @(pre_)asum  @(pre_)nrm2  @(pre_)scal
            @(pre_)rotmg @(pre_)rotg
         @endmultidef
      @ptyp_ d
         @multidef rout_ 
            @(pre_)dot   @(pre_)rotm  @(pre_)rot   @(pre_)swap
            @(pre_)copy  @(pre_)axpy  i@(pre_)amax @(pre_)asum
            @(pre_)nrm2  @(pre_)scal  @(pre_)rotmg @(pre_)rotg
         @endmultidef
      @ptyp_ c z
         @multidef rout_ 
            @(pre_)dotu  @(pre_)dotc  @(pre_)@(upr_)rot 
            @(pre_)swap  @(pre_)copy  @(pre_)axpy  i@(pre_)amax
            @(upr_)@(pre_)asum        @(upr_)@(pre_)nrm2
            @(pre_)@(upr_)scal        @(pre_)scal  @(pre_)rotg
         @endmultidef
      @ptyp_ !
      @whiledef rout_
         @(rout_).o
      @endwhile
   @enddeclare
   @killkeys ptyp_
   @undef upr_
#
@endwhile
@whiledef pre_ z c d s
   @addkeys ptyp_=@(pre_)
@(pre_)lvl2obj = \
   @declare "   " y y
      @ptyp_ s d
         @multidef rout_
            trsv  tpsv  tbsv  trmv  tpmv  tbmv  syr2  spr2  syr
            spr   symv  spmv  sbmv  ger ger2  gemv  gbmv
         @endmultidef
      @ptyp_ c z
         @multidef rout_
            trsv  tpsv  tbsv  trmv  tpmv  tbmv  her2  hpr2  her
            hpr   hemv  hpmv  hbmv  geru  gerc  ger2u ger2c gemv  gbmv
         @endmultidef
      @ptyp_ !
      @whiledef rout_
         @(pre_)@(rout_).o
      @endwhile
   @enddeclare
   @killkeys ptyp_
#
@endwhile
@whiledef pre_ z c d s
   @addkeys ptyp_=@(pre_)
@(pre_)lvl3obj = \
   @declare "   " y y
      @ptyp_ s d
         @multidef rout_
            trsm trmm syr2k syrk symm gemm
         @endmultidef
      @ptyp_ c z
         @multidef rout_
            trsm trmm syr2k syrk symm her2k herk hemm gemm
         @endmultidef
      @ptyp_ !
      @whiledef rout_
         @(pre_)@(rout_).o
      @endwhile
   @enddeclare
   @killkeys ptyp_
#
@endwhile
@multidef upr_ d s d s
@whiledef pre_ z c d s
   @addkeys ptyp_=@(pre_)
ATL_@(pre_)lvl1obj = \
   @declare "   " y n
      @ptyp_ s
         @multidef rout_ 
            sdsdot       dsdot        @(pre_)dot   @(pre_)rotm
            @(pre_)rot   @(pre_)swap  @(pre_)copy  @(pre_)axpy
            i@(pre_)amax @(pre_)asum  @(pre_)nrm2  @(pre_)scal
            @(pre_)rotmg @(pre_)rotg
         @endmultidef
      @ptyp_ d
         @multidef rout_ 
            @(pre_)dot   @(pre_)rotm  @(pre_)rot   @(pre_)swap
            @(pre_)copy  @(pre_)axpy  i@(pre_)amax @(pre_)asum
            @(pre_)nrm2  @(pre_)scal  @(pre_)rotmg @(pre_)rotg
         @endmultidef
      @ptyp_ c z
         @multidef rout_ 
            @(pre_)dotu  @(pre_)dotc  @(pre_)@(upr_)rot 
            @(pre_)swap  @(pre_)copy  @(pre_)axpy  i@(pre_)amax
            @(upr_)@(pre_)asum        @(upr_)@(pre_)nrm2
            @(pre_)@(upr_)scal        @(pre_)scal  @(pre_)rotg
         @endmultidef
      @ptyp_ !
      @whiledef rout_
         ATL_F77wrap_@(rout_).o
      @endwhile
      fatlas_@(pre_)axpby.o fatlas_@(pre_)set.o
   @enddeclare
   @killkeys ptyp_
   @undef upr_
#
@endwhile
@multidef upr_ d s d s
@whiledef pre_ z c d s
   @addkeys ptyp_=@(pre_)
ATL_@(pre_)ptlvl1obj = \
   @declare "   " y n
      @ptyp_ s
         @multidef rout_
            sdsptdot       dsptdot        @(pre_)ptdot   @(pre_)ptrotm
            @(pre_)ptrot   @(pre_)ptswap  @(pre_)ptcopy  @(pre_)ptaxpy
            i@(pre_)ptamax @(pre_)ptasum  @(pre_)ptnrm2  @(pre_)ptscal
            @(pre_)ptrotmg @(pre_)ptrotg
         @endmultidef
      @ptyp_ d
         @multidef rout_
            @(pre_)ptdot   @(pre_)ptrotm  @(pre_)ptrot   @(pre_)ptswap
            @(pre_)ptcopy  @(pre_)ptaxpy  i@(pre_)ptamax @(pre_)ptasum
            @(pre_)ptnrm2  @(pre_)ptscal  @(pre_)ptrotmg @(pre_)ptrotg
         @endmultidef
      @ptyp_ c z
         @multidef rout_
            @(pre_)ptdotu  @(pre_)ptdotc  @(pre_)@(upr_)ptrot
            @(pre_)ptswap  @(pre_)ptcopy  @(pre_)ptaxpy  i@(pre_)ptamax
            @(upr_)@(pre_)ptasum          @(upr_)@(pre_)ptnrm2
            @(pre_)@(upr_)ptscal          @(pre_)ptscal  @(pre_)ptrotg
         @endmultidef
      @ptyp_ !
      @whiledef rout_
         ATL_F77wrap_@(rout_).o
      @endwhile
      fatlas_@(pre_)ptaxpby.o fatlas_@(pre_)ptset.o
   @enddeclare
   @killkeys ptyp_
   @undef upr_
#
@endwhile
@whiledef pre_ zpt cpt dpt spt z c d s
   @addkeys ptyp_=@(pre_)
ATL_@(pre_)lvl2obj = \
   @declare "   " y y
      @ptyp_ s d spt dpt
         @multidef rout_
            trsv  tpsv  tbsv  trmv  tpmv  tbmv  syr2  spr2  syr
            spr   symv  spmv  sbmv  ger ger2  gemv  gbmv
         @endmultidef
      @ptyp_ c z cpt zpt
         @multidef rout_
            trsv  tpsv  tbsv  trmv  tpmv  tbmv  her2  hpr2  her
            hpr   hemv  hpmv  hbmv  geru  gerc  ger2u ger2c gemv  gbmv
         @endmultidef
      @ptyp_ !
      @whiledef rout_
         ATL_F77wrap_@(pre_)@(rout_).o
      @endwhile
   @enddeclare
   @killkeys ptyp_
#
@endwhile
@whiledef pre_ zpt cpt dpt spt z c d s
   @addkeys ptyp_=@(pre_)
ATL_@(pre_)lvl3obj = \
   @declare "   " y y
      @ptyp_ s d spt dpt
         @multidef rout_
            trsm trmm syr2k syrk symm gemm
         @endmultidef
      @ptyp_ c z cpt zpt
         @multidef rout_
            trsm trmm syr2k syrk symm her2k herk hemm gemm
         @endmultidef
      @ptyp_ !
      @whiledef rout_
         ATL_F77wrap_@(pre_)@(rout_).o
      @endwhile
   @enddeclare
   @killkeys ptyp_
#
@endwhile
## Targets #############################################################
#
all              : lib
#
lib              : slib dlib clib zlib
#
lvl1             : slvl1 dlvl1 clvl1 zlvl1
lvl2             : slvl2 dlvl2 clvl2 zlvl2
lvl3             : slvl3 dlvl3 clvl3 zlvl3
#
@whiledef pre_ z c d s
@(pre_)lib             : @(pre_)lvl1 @(pre_)lvl2 @(pre_)lvl3
@endwhile
#
ptall            : ptlib
#
ptlib            : sptlib dptlib cptlib zptlib
#
ptlvl1           : sptlvl1 dptlvl1 cptlvl1 zptlvl1
ptlvl2           : sptlvl2 dptlvl2 cptlvl2 zptlvl2
ptlvl3           : sptlvl3 dptlvl3 cptlvl3 zptlvl3
#
@whiledef pre_ zpt cpt dpt spt
@(pre_)lib         : @(pre_)lvl1 @(pre_)lvl2 @(pre_)lvl3
#  @(pre_)lib           : @(pre_)lvl3
@endwhile
#
########################################################################
#
@whiledef lvl_ 3 2 1
   @whiledef pre_ z c d s
@(pre_)lvl@(lvl_)            : 
	$(PMAKE) @(pre_)lvl@(lvl_).grd
   @endwhile
#
@endwhile
@whiledef lvl_ 3 2 1
   @whiledef pre_ z c d s
@(pre_)ptlvl@(lvl_)          : 
	$(PMAKE) @(pre_)ptlvl@(lvl_).grd
   @endwhile
#
@endwhile
@whiledef l_ 3 2 1
   @whiledef p_ z c d s
@(p_)lvl@(l_).grd        : $(@(p_)lvl@(l_)obj) $(ATL_@(p_)lvl@(l_)obj) $(aobj)
	@(arch) @(archflgs) @(f77lib) $(@(p_)lvl@(l_)obj) \
        $(ATL_@(p_)lvl@(l_)obj) $(aobj)
	@(ranlib) @(f77lib)
	touch @(p_)lvl@(l_).grd
#
   @endwhile
@endwhile
#
@whiledef l_ 3 2 1
   @whiledef p_ z c d s
@(p_)ptlvl@(l_).grd      : $(@(p_)lvl@(l_)obj) $(ATL_@(p_)ptlvl@(l_)obj) $(aobj)
	@(arch) @(archflgs) @(ptf77lib) $(@(p_)lvl@(l_)obj) \
        $(ATL_@(p_)ptlvl@(l_)obj) $(aobj)
	@(ranlib) @(ptf77lib)
	touch @(p_)ptlvl@(l_).grd
#  
   @endwhile
@endwhile
########################################################################
#
@multidef rout_
   lsame xerbla dcabs1
@endmultidef
@whiledef rout_
   @define rpre_ @@(rout_)@
   @define rsrc_ @$(mySRCdir)/@(rpre_).f@
   @define robj_ @@(rpre_).o@
@20l@(robj_) : @23l@(rsrc_)
@(F77comp) @23l@(rsrc_)
   @undef rpre_
   @undef rsrc_
   @undef robj_
@endwhile
#
@multidef upr_ d s d s
@whiledef pre_ z c d s
   @addkeys ptyp_=@(pre_)
   @ptyp_ s
      @multidef rout_
         sdsdot       dsdot        @(pre_)dot   @(pre_)rotm
         @(pre_)rot   @(pre_)swap  @(pre_)copy  @(pre_)axpy
         i@(pre_)amax @(pre_)asum  @(pre_)nrm2  @(pre_)scal
         @(pre_)rotmg @(pre_)rotg
      @endmultidef
   @ptyp_ d
      @multidef rout_
         @(pre_)dot   @(pre_)rotm  @(pre_)rot   @(pre_)swap
         @(pre_)copy  @(pre_)axpy  i@(pre_)amax @(pre_)asum
         @(pre_)nrm2  @(pre_)scal  @(pre_)rotmg @(pre_)rotg
      @endmultidef
   @ptyp_ c z
      @multidef rout_
         @(pre_)dotu  @(pre_)dotc  @(pre_)@(upr_)rot
         @(pre_)swap  @(pre_)copy  @(pre_)axpy  i@(pre_)amax
         @(upr_)@(pre_)asum        @(upr_)@(pre_)nrm2
         @(pre_)@(upr_)scal        @(pre_)scal  @(pre_)rotg
      @endmultidef
   @ptyp_ !
   @whiledef rout_
      @define rpre_ @@(rout_)@
      @define rsrc_ @$(mySRCdir)/@(rpre_).f@
      @define robj_ @@(rpre_).o@
@20l@(robj_) : @23l@(rsrc_)
@(F77comp) @23l@(rsrc_)
      @undef rpre_
      @undef rsrc_
      @undef robj_
   @endwhile
   @killkeys ptyp_
   @undef upr_
#
@endwhile
@multidef upr_ d s d s
@whiledef pre_ z c d s
   @addkeys ptyp_=@(pre_)
   @ptyp_ s d
      @multidef rout_
         trsv  tpsv  tbsv  trmv  tpmv  tbmv  syr2  spr2  syr
         spr   symv  spmv  sbmv  ger ger2  gemv  gbmv
      @endmultidef
   @ptyp_ c z
      @multidef rout_
         trsv  tpsv  tbsv  trmv  tpmv  tbmv  her2  hpr2  her
         hpr   hemv  hpmv  hbmv  geru  gerc ger2u ger2c gemv  gbmv
      @endmultidef
   @ptyp_ !
   @whiledef rout_
      @define rpre_ @@(pre_)@(rout_)@
      @define rsrc_ @$(mySRCdir)/@(rpre_).f@
      @define robj_ @@(rpre_).o@
@20l@(robj_) : @23l@(rsrc_)
@(F77comp) @23l@(rsrc_)
      @undef rpre_
      @undef rsrc_
      @undef robj_
   @endwhile
   @killkeys ptyp_
   @undef upr_
#
@endwhile
@multidef upr_ d s d s
@whiledef pre_ z c d s
   @addkeys ptyp_=@(pre_)
   @ptyp_ s d
      @multidef rout_
         trsm trmm syr2k syrk symm gemm
      @endmultidef
   @ptyp_ c z
      @multidef rout_
         trsm trmm syr2k syrk symm her2k herk hemm gemm
      @endmultidef
   @ptyp_ !
   @whiledef rout_
      @define rpre_ @@(pre_)@(rout_)@
      @define rsrc_ @$(mySRCdir)/@(rpre_).f@
      @define robj_ @@(rpre_).o@
@20l@(robj_) : @23l@(rsrc_)
@(F77comp) @23l@(rsrc_)
      @undef rpre_
      @undef rsrc_
      @undef robj_
   @endwhile
   @killkeys ptyp_
   @undef upr_
#
@endwhile
@multidef upr_ d s d s
@whiledef pre_ z c d s
   @addkeys ptyp_=@(pre_)
   @ptyp_ s
      @multidef rout_
         sdsdot dsdot dot   rotm  rot    swap  copy  axpy
         amax   asum  nrm2  scal  rotmg  rotg
      @endmultidef
      @define cdefs @-D@up@(upr_)REAL@
   @ptyp_ d
      @multidef rout_
         dot    rotm  rot   swap  copy  axpy   amax   asum
         nrm2   scal  rotmg rotg
      @endmultidef
      @define cdefs @-D@up@(upr_)REAL@
   @ptyp_ c z
      @multidef rout_
         dotu   dotc  rot   swap  copy  axpy   amax   asum
         nrm2   rscal scal  rotg
      @endmultidef
      @define cdefs @-D@up@(upr_)CPLX@
   @ptyp_ !
   @whiledef rout_
      @addkeys prou_=@(rout_)
      @prou_ sdsdot dsdot
         @define rpre_ @ATL_F77wrap_@(rout_)@
         @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
         @define robj_ @ATL_F77wrap_@(rout_).o@
      @prou_ dot rotm swap  copy axpy scal rotmg rotg dotu dotc
         @define rpre_ @ATL_F77wrap_@(rout_)@
         @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
         @define robj_ @ATL_F77wrap_@(pre_)@(rout_).o@
      @prou_ rot
         @ptyp_ s d
            @define rpre_ @ATL_F77wrap_@(rout_)@
            @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
            @define robj_ @ATL_F77wrap_@(pre_)@(rout_).o@
         @ptyp_ c z
            @define rpre_ @ATL_F77wrap_@(rout_)@
            @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
            @define robj_ @ATL_F77wrap_@(pre_)@(upr_)@(rout_).o@
         @ptyp_ !
      @prou_ nrm2 asum
         @ptyp_ s d
            @define rpre_ @ATL_F77wrap_@(rout_)@
            @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
            @define robj_ @ATL_F77wrap_@(pre_)@(rout_).o@
         @ptyp_ c z
            @define rpre_ @ATL_F77wrap_@(rout_)@
            @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
            @define robj_ @ATL_F77wrap_@(upr_)@(pre_)@(rout_).o@
         @ptyp_ !
      @prou_ amax
         @define rpre_ @ATL_F77wrap_@(rout_)@
         @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
         @define robj_ @ATL_F77wrap_i@(pre_)@(rout_).o@
      @prou_ rscal
         @define rpre_ @ATL_F77wrap_@(rout_)@
         @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
         @define robj_ @ATL_F77wrap_@(pre_)@(upr_)scal.o@
      @prou_ !
@24l@(robj_) : @(rsrc_) $(INCdep)
@(CCcomp) @(cdefs) @(rsrc_)
      @undef rpre_
      @undef rsrc_
      @undef robj_
      @killkeys prou_
   @endwhile
   @undef cdefs
   @killkeys ptyp_
   @undef upr_
#
@endwhile
@multidef upr_ d s d s
@whiledef pre_ z c d s
   @addkeys ptyp_=@(pre_)
   @ptyp_ s
      @multidef rout_
         sdsdot dsdot dot   rotm  rot    swap  copy  axpy
         amax   asum  nrm2  scal  rotmg  rotg
      @endmultidef
      @define cdefs @-D@up@(upr_)REAL@
   @ptyp_ d
      @multidef rout_
         dot    rotm  rot   swap  copy  axpy   amax   asum
         nrm2   scal  rotmg rotg
      @endmultidef
      @define cdefs @-D@up@(upr_)REAL@
   @ptyp_ c z
      @multidef rout_
         dotu   dotc  rot   swap  copy  axpy   amax   asum
         nrm2   rscal scal  rotg
      @endmultidef
      @define cdefs @-D@up@(upr_)CPLX@
   @ptyp_ !
   @whiledef rout_
      @addkeys prou_=@(rout_)
      @prou_ sdsdot
         @define rpre_ @ATL_F77wrap_@(rout_)@
         @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
         @define robj_ @ATL_F77wrap_sdsptdot.o@
      @prou_ dsdot
         @define rpre_ @ATL_F77wrap_@(rout_)@
         @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
         @define robj_ @ATL_F77wrap_dsptdot.o@
      @prou_ dot rotm swap copy axpy scal rotmg rotg dotu dotc
         @define rpre_ @ATL_F77wrap_@(rout_)@
         @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
         @define robj_ @ATL_F77wrap_@(pre_)pt@(rout_).o@
      @prou_ rot
         @ptyp_ s d
            @define rpre_ @ATL_F77wrap_@(rout_)@
            @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
            @define robj_ @ATL_F77wrap_@(pre_)pt@(rout_).o@
         @ptyp_ c z
            @define rpre_ @ATL_F77wrap_@(rout_)@
            @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
            @define robj_ @ATL_F77wrap_@(pre_)@(upr_)pt@(rout_).o@
         @ptyp_ !
      @prou_ nrm2 asum
         @ptyp_ s d
            @define rpre_ @ATL_F77wrap_@(rout_)@
            @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
            @define robj_ @ATL_F77wrap_@(pre_)pt@(rout_).o@
         @ptyp_ c z
            @define rpre_ @ATL_F77wrap_@(rout_)@
            @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
            @define robj_ @ATL_F77wrap_@(upr_)@(pre_)pt@(rout_).o@
         @ptyp_ !
      @prou_ amax
         @define rpre_ @ATL_F77wrap_@(rout_)@
         @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
         @define robj_ @ATL_F77wrap_i@(pre_)pt@(rout_).o@
      @prou_ rscal
         @define rpre_ @ATL_F77wrap_@(rout_)@
         @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
         @define robj_ @ATL_F77wrap_@(pre_)@(upr_)ptscal.o@
      @prou_ !
@24l@(robj_) : @(rsrc_) $(INCdep)
@(CCptcomp) @(cdefs) @(rsrc_)
      @undef rpre_
      @undef rsrc_
      @undef robj_
      @killkeys prou_
   @endwhile
   @undef cdefs
   @killkeys ptyp_
   @undef upr_
#
@endwhile
@multidef upr_ d s d s
@whiledef pre_ z c d s
   @addkeys ptyp_=@(pre_)
   @ptyp_ s d
      @multidef rout_
         trsv  tpsv  tbsv  trmv  tpmv  tbmv  syr2  spr2  syr
         spr   symv  spmv  sbmv  ger ger2   gemv  gbmv
      @endmultidef
      @define cdefs @-D@up@(upr_)REAL@
   @ptyp_ c z
      @multidef rout_
         trsv  tpsv  tbsv  trmv  tpmv  tbmv  her2  hpr2  her
         hpr   hemv  hpmv  hbmv  geru  gerc  ger2u ger2c gemv  gbmv
      @endmultidef
      @define cdefs @-D@up@(upr_)CPLX@
   @ptyp_ !
   @whiledef rout_
      @define rpre_ @ATL_F77wrap_@(rout_)@
      @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
      @define robj_ @ATL_F77wrap_@(pre_)@(rout_).o@
@24l@(robj_) : @(rsrc_) $(INCdep)
@(CCcomp) @(cdefs) @(rsrc_)
      @undef rpre_
      @undef rsrc_
      @undef robj_
   @endwhile
   @undef cdefs
   @killkeys ptyp_
   @undef upr_
#
@endwhile
@multidef upr_ d s d s
@whiledef pre_ z c d s
   @addkeys ptyp_=@(pre_)
   @ptyp_ s d
      @multidef rout_
         trsv  tpsv  tbsv  trmv  tpmv  tbmv  syr2  spr2  syr
         spr   symv  spmv  sbmv  ger ger2  gemv  gbmv
      @endmultidef
      @define cdefs @-D@up@(upr_)REAL@
   @ptyp_ c z
      @multidef rout_
         trsv  tpsv  tbsv  trmv  tpmv  tbmv  her2  hpr2  her
         hpr   hemv  hpmv  hbmv  geru  gerc ger2u ger2c  gemv  gbmv
      @endmultidef
      @define cdefs @-D@up@(upr_)CPLX@
   @ptyp_ !
   @whiledef rout_
      @define rpre_ @ATL_F77wrap_@(rout_)@
      @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
      @define robj_ @ATL_F77wrap_@(pre_)pt@(rout_).o@
@24l@(robj_) : @(rsrc_) $(INCdep)
@(CCptcomp) @(cdefs) @(rsrc_)
      @undef rpre_
      @undef rsrc_
      @undef robj_
   @endwhile
   @undef cdefs
   @killkeys ptyp_
   @undef upr_
#
@endwhile
@multidef upr_ d s d s
@whiledef pre_ z c d s
   @addkeys ptyp_=@(pre_)
   @ptyp_ s d
      @multidef rout_
         trsm trmm syr2k syrk symm gemm
      @endmultidef
      @define cdefs @-D@up@(upr_)REAL@
   @ptyp_ c z
      @multidef rout_
         trsm trmm syr2k syrk symm her2k herk hemm gemm
      @endmultidef
      @define cdefs @-D@up@(upr_)CPLX@
   @ptyp_ !
   @whiledef rout_
      @define rpre_ @ATL_F77wrap_@(rout_)@
      @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
      @define robj_ @ATL_F77wrap_@(pre_)@(rout_).o@
@24l@(robj_) : @(rsrc_) $(INCdep)
@(CCcomp) @(cdefs) @(rsrc_)
      @undef rpre_
      @undef rsrc_
      @undef robj_
   @endwhile
   @undef cdefs
   @killkeys ptyp_
   @undef upr_
#
@endwhile
@multidef upr_ d s d s
@whiledef pre_ z c d s
   @addkeys ptyp_=@(pre_)
   @ptyp_ s d
      @multidef rout_
         trsm trmm syr2k syrk symm gemm
      @endmultidef
      @define cdefs @-D@up@(upr_)REAL@
   @ptyp_ c z
      @multidef rout_
         trsm trmm syr2k syrk symm her2k herk hemm gemm
      @endmultidef
      @define cdefs @-D@up@(upr_)CPLX@
   @ptyp_ !
   @whiledef rout_
      @define rpre_ @ATL_F77wrap_@(rout_)@
      @define rsrc_ @$(mySRCdir)/f77wrap/@(rpre_).c@
      @define robj_ @ATL_F77wrap_@(pre_)pt@(rout_).o@
@24l@(robj_) : @(rsrc_) $(INCdep)
@(CCptcomp) @(cdefs) @(rsrc_)
      @undef rpre_
      @undef rsrc_
      @undef robj_
   @endwhile
   @undef cdefs
   @killkeys ptyp_
   @undef upr_
#
@endwhile
@define pd @@
@define pd @ -DATL_USEPTHREADS@
@define pt @@
@whiledef pt pt
   @multidef typ DCPLX SCPLX DREAL SREAL
   @whiledef pre z c d s
      @whiledef rt axpby set
fatlas_@(pre)@(pt)@(rt).o : $(mySRCdir)/f77wrap/fatlas_@(rt).c
	$(ICC) $(ICCFLAGS) -D@(typ)@(pd) -o $@ -c \
           $(mySRCdir)/f77wrap/fatlas_@(rt).c
      @endwhile
   @undef typ
   @endwhile
   @undef pd
@endwhile
########################################################################
#
@whiledef pre_ z c d s
@(pre_)clean           :
	rm -f $(@(pre_)lvl1obj) $(ATL_@(pre_)lvl1obj)
	rm -f $(@(pre_)lvl2obj) $(ATL_@(pre_)lvl2obj)
	rm -f $(@(pre_)lvl3obj) $(ATL_@(pre_)lvl3obj)
	rm -f $(aobj) @(pre_)*.grd
@endwhile
#
@whiledef pre_ z c d s
@(pre_)ptclean         :
	rm -f $(@(pre_)lvl1obj) $(ATL_@(pre_)ptlvl1obj)
	rm -f $(@(pre_)lvl2obj) $(ATL_@(pre_)ptlvl2obj)
	rm -f $(@(pre_)lvl3obj) $(ATL_@(pre_)ptlvl3obj)
	rm -f $(aobj) @(pre_)*.grd
@endwhile
#
ptclean          :
	rm -f *.o *.grd
#
clean            :
	rm -f *.o *.grd
#
########################################################################
@rout !
@skip
@skip ==================================================================
@skip
@undef BLAS_PARAM_SIDE
@undef BLAS_PARAM_UPLO
@undef BLAS_PARAM_DIAG
@undef BLAS_PARAM_TRAN
@skip
@skip ==================================================================
@skip
