@skip
@skip Comments of the ATLAS Level 2 BLAS implementation                AP99
@skip
@skip Last modification : 24/04/00
@skip
@skip      C      V                      D                             V12345678
@skip
@rout ATL_tbmvUN ATL_tbmvUT ATL_tbmvUC ATL_tbmvUH
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-vector operation
 *
@rout ATL_tbmvUN
 *    x := A * x,
@rout ATL_tbmvUT
 *    x := A'* x,
@rout ATL_tbmvUC
 *    x := conjg( A  ) * x,
@rout ATL_tbmvUH
 *    x := conjg( A' ) * x,
@rout ATL_tbmvUN ATL_tbmvUT ATL_tbmvUC ATL_tbmvUH
 *
 * where x is an n-element vector and  A is an n by n unit or  non-unit,
 * upper triangular band matrix.
 *
 * This is a blocked version of the algorithm.  For a more detailed des-
 * cription of  the arguments of this function, see the reference imple-
 * mentation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tpmvUN ATL_tpmvUT ATL_tpmvUC ATL_tpmvUH
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-vector operation
 *
@rout ATL_tpmvUN
 *    x := A * x,
@rout ATL_tpmvUT
 *    x := A'* x,
@rout ATL_tpmvUC
 *    x := conjg( A  ) * x,
@rout ATL_tpmvUH
 *    x := conjg( A' ) * x,
@rout ATL_tpmvUN ATL_tpmvUT ATL_tpmvUC ATL_tpmvUH
 *
 * where x is an n-element vector and  A is an n by n unit or  non-unit,
 * upper triangular matrix supplied in packed form.
 *
 * This is a blocked version of the algorithm.  For a more detailed des-
 * cription of  the arguments of this function, see the reference imple-
 * mentation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_trmvUN ATL_trmvUT ATL_trmvUC ATL_trmvUH
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-vector operation
 *
@rout ATL_trmvUN
 *    x := A * x,
@rout ATL_trmvUT
 *    x := A'* x,
@rout ATL_trmvUC
 *    x := conjg( A  ) * x,
@rout ATL_trmvUH
 *    x := conjg( A' ) * x,
@rout ATL_trmvUN ATL_trmvUT ATL_trmvUC ATL_trmvUH
 *
 * where x is an n-element vector and  A is an n by n unit or  non-unit,
 * upper triangular matrix.
 *
 * This is a blocked version of the algorithm.  For a more detailed des-
 * cription of  the arguments of this function, see the reference imple-
 * mentation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tbmvLN ATL_tbmvLT ATL_tbmvLC ATL_tbmvLH
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-vector operation
 *
@rout ATL_tbmvLN
 *    x := A * x,
@rout ATL_tbmvLT
 *    x := A'* x,
@rout ATL_tbmvLC
 *    x := conjg( A  ) * x,
@rout ATL_tbmvLH
 *    x := conjg( A' ) * x,
@rout ATL_tbmvLN ATL_tbmvLT ATL_tbmvLC ATL_tbmvLH
 *
 * where x is an n-element vector and  A is an n by n unit or  non-unit,
 * lower triangular band matrix.
 *
 * This is a blocked version of the algorithm.  For a more detailed des-
 * cription of  the arguments of this function, see the reference imple-
 * mentation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tpmvLN ATL_tpmvLT ATL_tpmvLC ATL_tpmvLH
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-vector operation
 *
@rout ATL_tpmvLN
 *    x := A * x,
@rout ATL_tpmvLT
 *    x := A'* x,
@rout ATL_tpmvLC
 *    x := conjg( A  ) * x,
@rout ATL_tpmvLH
 *    x := conjg( A' ) * x,
@rout ATL_tpmvLN ATL_tpmvLT ATL_tpmvLC ATL_tpmvLH
 *
 * where x is an n-element vector and  A is an n by n unit or  non-unit,
 * lower triangular matrix supplied in packed form.
 *
 * This is a blocked version of the algorithm.  For a more detailed des-
 * cription of  the arguments of this function, see the reference imple-
 * mentation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_trmvLN ATL_trmvLT ATL_trmvLC ATL_trmvLH
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-vector operation
 *
@rout ATL_trmvLN
 *    x := A * x,
@rout ATL_trmvLT
 *    x := A'* x,
@rout ATL_trmvLC
 *    x := conjg( A  ) * x,
@rout ATL_trmvLH
 *    x := conjg( A' ) * x,
@rout ATL_trmvLN ATL_trmvLT ATL_trmvLC ATL_trmvLH
 *
 * where x is an n-element vector and  A is an n by n unit or  non-unit,
 * lower triangular matrix.
 *
 * This is a blocked version of the algorithm.  For a more detailed des-
 * cription of  the arguments of this function, see the reference imple-
 * mentation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tbsvUN ATL_tbsvUT ATL_tbsvUC ATL_tbsvUH
/*
@extract @(PURPOSE)
 *
 * @(rname) solves the following triangular system of equations
 *
@rout ATL_tbsvUN
 *    A * x = b,
@rout ATL_tbsvUT
 *    A'* x = b,
@rout ATL_tbsvUC
 *    conjg( A  ) * x = b,
@rout ATL_tbsvUH
 *    conjg( A' ) * x = b,
@rout ATL_tbsvUN ATL_tbsvUT ATL_tbsvUC ATL_tbsvUH
 *
 * where b and x are n-element vectors and  A  is an n by n unit or non-
 * unit, upper triangular band matrix.
 *
 * No test for  singularity  or  near-singularity  is included  in  this
 * routine. Such tests must be performed before calling this routine.
 *
 * This is a blocked version of the algorithm.  For a more detailed des-
 * cription of  the arguments of this function, see the reference imple-
 * mentation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tpsvUN ATL_tpsvUT ATL_tpsvUC ATL_tpsvUH
/*
@extract @(PURPOSE)
 *
 * @(rname) solves the following triangular system of equations
 *
@rout ATL_tpsvUN
 *    A * x = b,
@rout ATL_tpsvUT
 *    A'* x = b,
@rout ATL_tpsvUC
 *    conjg( A  ) * x = b,
@rout ATL_tpsvUH
 *    conjg( A' ) * x = b,
@rout ATL_tpsvUN ATL_tpsvUT ATL_tpsvUC ATL_tpsvUH
 *
 * where b and x are n-element vectors and  A  is an n by n unit or non-
 * unit, upper triangular matrix supplied in packed form.
 *
 * No test for  singularity  or  near-singularity  is included  in  this
 * routine. Such tests must be performed before calling this routine.
 *
 * This is a blocked version of the algorithm.  For a more detailed des-
 * cription of  the arguments of this function, see the reference imple-
 * mentation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_trsvUN ATL_trsvUT ATL_trsvUC ATL_trsvUH
/*
@extract @(PURPOSE)
 *
 * @(rname) solves the following triangular system of equations
 *
@rout ATL_trsvUN
 *    A * x = b,
@rout ATL_trsvUT
 *    A'* x = b,
@rout ATL_trsvUC
 *    conjg( A  ) * x = b,
@rout ATL_trsvUH
 *    conjg( A' ) * x = b,
@rout ATL_trsvUN ATL_trsvUT ATL_trsvUC ATL_trsvUH
 *
 * where b and x are n-element vectors and  A  is an n by n unit or non-
 * unit, upper triangular matrix.
 *
 * No test for  singularity  or  near-singularity  is included  in  this
 * routine. Such tests must be performed before calling this routine.
 *
 * This is a blocked version of the algorithm.  For a more detailed des-
 * cription of  the arguments of this function, see the reference imple-
 * mentation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tbsvLN ATL_tbsvLT ATL_tbsvLC ATL_tbsvLH
/*
@extract @(PURPOSE)
 *
 * @(rname) solves the following triangular system of equations
 *
@rout ATL_tbsvLN
 *    A * x = b,
@rout ATL_tbsvLT
 *    A'* x = b,
@rout ATL_tbsvLC
 *    conjg( A  ) * x = b,
@rout ATL_tbsvLH
 *    conjg( A' ) * x = b,
@rout ATL_tbsvLN ATL_tbsvLT ATL_tbsvLC ATL_tbsvLH
 *
 * where b and x are n-element vectors and  A  is an n by n unit or non-
 * unit, lower triangular band matrix.
 *
 * No test for  singularity  or  near-singularity  is included  in  this
 * routine. Such tests must be performed before calling this routine.
 *
 * This is a blocked version of the algorithm.  For a more detailed des-
 * cription of  the arguments of this function, see the reference imple-
 * mentation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tpsvLN ATL_tpsvLT ATL_tpsvLC ATL_tpsvLH
/*
@extract @(PURPOSE)
 *
 * @(rname) solves the following triangular system of equations
 *
@rout ATL_tpsvLN
 *    A * x = b,
@rout ATL_tpsvLT
 *    A'* x = b,
@rout ATL_tpsvLC
 *    conjg( A  ) * x = b,
@rout ATL_tpsvLH
 *    conjg( A' ) * x = b,
@rout ATL_tpsvLN ATL_tpsvLT ATL_tpsvLC ATL_tpsvLH
 *
 * where b and x are n-element vectors and  A  is an n by n unit or non-
 * unit, lower triangular matrix supplied in packed form.
 *
 * No test for  singularity  or  near-singularity  is included  in  this
 * routine. Such tests must be performed before calling this routine.
 *
 * This is a blocked version of the algorithm.  For a more detailed des-
 * cription of  the arguments of this function, see the reference imple-
 * mentation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_trsvLN ATL_trsvLT ATL_trsvLC ATL_trsvLH
/*
@extract @(PURPOSE)
 *
 * @(rname) solves the following triangular system of equations
 *
@rout ATL_trsvLN
 *    A * x = b,
@rout ATL_trsvLT
 *    A'* x = b,
@rout ATL_trsvLC
 *    conjg( A  ) * x = b,
@rout ATL_trsvLH
 *    conjg( A' ) * x = b,
@rout ATL_trsvLN ATL_trsvLT ATL_trsvLC ATL_trsvLH
 *
 * where b and x are n-element vectors and  A  is an n by n unit or non-
 * unit, lower triangular matrix.
 *
 * No test for  singularity  or  near-singularity  is included  in  this
 * routine. Such tests must be performed before calling this routine.
 *
 * This is a blocked version of the algorithm.  For a more detailed des-
 * cription of  the arguments of this function, see the reference imple-
 * mentation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_sbmvL ATL_sbmvU ATL_spmvL ATL_spmvU ATL_symvL ATL_symvU
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the matrix-vector operation
 *
 *    y := alpha * A * x + beta * y,
 *
@rout ATL_sbmvL ATL_sbmvU
 * where alpha and beta are scalars, x and y are n-element vectors and A
 * is an n by n symmetric band matrix, with k super-diagonals.
@rout ATL_spmvL ATL_spmvU
 * where alpha and beta are scalars, x and y are n-element vectors and A
 * is an n by n symmetric matrix, supplied in packed form.
@rout ATL_symvL ATL_symvU
 * where alpha and beta are scalars, x and y are n-element vectors and A
 * is an n by n symmetric matrix.
@rout ATL_sbmvL ATL_sbmvU ATL_spmvL ATL_spmvU ATL_symvL ATL_symvU
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_hbmvL ATL_hbmvU ATL_hpmvL ATL_hpmvU ATL_hemvL ATL_hemvU
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the matrix-vector operation
 *
 *    y := alpha * A * x + beta * y,
 *
@rout ATL_hbmvL ATL_hbmvU
 * where alpha and beta are scalars, x and y are n-element vectors and A
 * is an n by n Hermitian band matrix, with k super-diagonals.
@rout ATL_hpmvL ATL_hpmvU
 * where alpha and beta are scalars, x and y are n-element vectors and A
 * is an n by n Hermitian matrix, supplied in packed form.
@rout ATL_hemvL ATL_hemvU
 * where alpha and beta are scalars, x and y are n-element vectors and A
 * is an n by n Hermitian matrix.
@rout ATL_hbmvL ATL_hbmvU ATL_hpmvL ATL_hpmvU ATL_hemvL ATL_hemvU
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_sprL ATL_sprU ATL_syrL ATL_syrU
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the symmetric rank 1 operation
 *
 *    A := alpha * x * x' + A,
 *
@rout ATL_sprL ATL_sprU
 * where  alpha is a scalar, x is an n-element vector and A is an n by n
 * symmetric matrix, supplied in packed form.
@rout ATL_syrL ATL_syrU
 * where  alpha is a scalar, x is an n-element vector and A is an n by n
 * symmetric matrix.
@rout ATL_sprL ATL_sprU ATL_syrL ATL_syrU
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_hprL ATL_hprU ATL_herL ATL_herU
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the Hermitian rank 1 operation
 *
 *    A := alpha* x * conjg( x' ) + A,
 *
@rout ATL_hprL ATL_hprU
 * where  alpha is a real scalar, x is an n-element vector and A is an n
 * by n Hermitian matrix, supplied in packed form.
@rout ATL_herL ATL_herU
 * where  alpha is a real scalar, x is an n-element vector and A is an n
 * by n Hermitian matrix.
@rout ATL_hprL ATL_hprU ATL_herL ATL_herU
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_spr2L ATL_spr2U ATL_syr2L ATL_syr2U
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the symmetric rank 2 operation
 *
 *    A := alpha * x * y' + alpha * y * x' + A,
 *
@rout ATL_syr2L ATL_syr2U
 * where  alpha is a scalar, x and y are n-element vectors and A is an n
 * by n symmetric matrix.
@rout ATL_spr2L ATL_spr2U
 * where  alpha is a scalar, x and y are n-element vectors and A is an n
 * by n symmetric matrix, supplied in packed form.
@rout ATL_spr2L ATL_spr2U ATL_syr2L ATL_syr2U
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_hpr2L ATL_hpr2U ATL_her2L ATL_her2U
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the Hermitian rank 2 operation
 *
 *    A := alpha * x * conjg( y' ) + y * conjg( alpha * x' ) + A,
 *
@rout ATL_hpr2L ATL_hpr2U
 * where  alpha is a scalar, x and y are n-element vectors and A is an n
 * by n Hermitian matrix, supplied in packed form.
@rout ATL_her2L ATL_her2U
 * where  alpha is a scalar, x and y are n-element vectors and A is an n
 * by n Hermitian matrix.
@rout ATL_hpr2L ATL_hpr2U ATL_her2L ATL_her2U
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tbmvUNN ATL_tbmvUTN ATL_tbmvUCN ATL_tbmvUHN
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-vector operation
 *
@rout ATL_tbmvUNN
 *    x := A * x,
@rout ATL_tbmvUTN
 *    x := A'* x,
@rout ATL_tbmvUCN
 *    x := conjg( A  ) * x,
@rout ATL_tbmvUHN
 *    x := conjg( A' ) * x,
@rout ATL_tbmvUNN ATL_tbmvUTN ATL_tbmvUCN ATL_tbmvUHN
 *
 * where x is an n-element vector and  A  is an n by n  non-unit,  upper
 * triangular band matrix, with ( k + 1 ) diagonals.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tbmvUNU ATL_tbmvUTU ATL_tbmvUCU ATL_tbmvUHU
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-vector operation
 *
@rout ATL_tbmvUNU
 *    x := A * x,
@rout ATL_tbmvUTU
 *    x := A'* x,
@rout ATL_tbmvUCU
 *    x := conjg( A  ) * x,
@rout ATL_tbmvUHU
 *    x := conjg( A' ) * x,
@rout ATL_tbmvUNU ATL_tbmvUTU ATL_tbmvUCU ATL_tbmvUHU
 *
 * where x is an n-element vector and  A  is an n by n  unit, upper tri-
 * angular band matrix, with ( k + 1 ) diagonals.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tbmvLNN ATL_tbmvLTN ATL_tbmvLCN ATL_tbmvLHN
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-vector operation
 *
@rout ATL_tbmvLNN
 *    x := A * x,
@rout ATL_tbmvLTN
 *    x := A'* x,
@rout ATL_tbmvLCN
 *    x := conjg( A  ) * x,
@rout ATL_tbmvLHN
 *    x := conjg( A' ) * x,
@rout ATL_tbmvLNN ATL_tbmvLTN ATL_tbmvLCN ATL_tbmvLHN
 *
 * where x is an n-element vector and  A  is an n by n  non-unit,  lower
 * triangular band matrix, with ( k + 1 ) diagonals.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tbmvLNU ATL_tbmvLTU ATL_tbmvLCU ATL_tbmvLHU
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-vector operation
 *
@rout ATL_tbmvLNU
 *    x := A * x,
@rout ATL_tbmvLTU
 *    x := A'* x,
@rout ATL_tbmvLCU
 *    x := conjg( A  ) * x,
@rout ATL_tbmvLHU
 *    x := conjg( A' ) * x,
@rout ATL_tbmvLNU ATL_tbmvLTU ATL_tbmvLCU ATL_tbmvLHU
 *
 * where x is an n-element vector and  A  is an n by n  unit, lower tri-
 * angular band matrix, with ( k + 1 ) diagonals.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tpmvUNN ATL_tpmvUTN ATL_tpmvUCN ATL_tpmvUHN
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-vector operation
 *
@rout ATL_tpmvUNN
 *    x := A * x,
@rout ATL_tpmvUTN
 *    x := A'* x,
@rout ATL_tpmvUCN
 *    x := conjg( A  ) * x,
@rout ATL_tpmvUHN
 *    x := conjg( A' ) * x,
@rout ATL_tpmvUNN ATL_tpmvUTN ATL_tpmvUCN ATL_tpmvUHN
 *
 * where x is an n-element vector and  A  is an n by n  non-unit,  upper
 * triangular matrix, supplied in packed form.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tpmvUNU ATL_tpmvUTU ATL_tpmvUCU ATL_tpmvUHU
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-vector operation
 *
@rout ATL_tpmvUNU
 *    x := A * x,
@rout ATL_tpmvUTU
 *    x := A'* x,
@rout ATL_tpmvUCU
 *    x := conjg( A  ) * x,
@rout ATL_tpmvUHU
 *    x := conjg( A' ) * x,
@rout ATL_tpmvUNU ATL_tpmvUTU ATL_tpmvUCU ATL_tpmvUHU
 *
 * where x is an n-element vector and  A  is an n by n  unit, upper tri-
 * angular matrix, supplied in packed form.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tpmvLNN ATL_tpmvLTN ATL_tpmvLCN ATL_tpmvLHN
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-vector operation
 *
@rout ATL_tpmvLNN
 *    x := A * x,
@rout ATL_tpmvLTN
 *    x := A'* x,
@rout ATL_tpmvLCN
 *    x := conjg( A  ) * x,
@rout ATL_tpmvLHN
 *    x := conjg( A' ) * x,
@rout ATL_tpmvLNN ATL_tpmvLTN ATL_tpmvLCN ATL_tpmvLHN
 *
 * where x is an n-element vector and  A  is an n by n  non-unit,  lower
 * triangular matrix, supplied in packed form.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tpmvLNU ATL_tpmvLTU ATL_tpmvLCU ATL_tpmvLHU
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-vector operation
 *
@rout ATL_tpmvLNU
 *    x := A * x,
@rout ATL_tpmvLTU
 *    x := A'* x,
@rout ATL_tpmvLCU
 *    x := conjg( A  ) * x,
@rout ATL_tpmvLHU
 *    x := conjg( A' ) * x,
@rout ATL_tpmvLNU ATL_tpmvLTU ATL_tpmvLCU ATL_tpmvLHU
 *
 * where x is an n-element vector and  A  is an n by n  unit, lower tri-
 * angular matrix, supplied in packed form.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_trmvUNN ATL_trmvUTN ATL_trmvUCN ATL_trmvUHN
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-vector operation
 *
@rout ATL_trmvUNN
 *    x := A * x,
@rout ATL_trmvUTN
 *    x := A'* x,
@rout ATL_trmvUCN
 *    x := conjg( A  ) * x,
@rout ATL_trmvUHN
 *    x := conjg( A' ) * x,
@rout ATL_trmvUNN ATL_trmvUTN ATL_trmvUCN ATL_trmvUHN
 *
 * where x is an n-element vector and  A  is an n by n  non-unit,  upper
 * triangular matrix.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_trmvUNU ATL_trmvUTU ATL_trmvUCU ATL_trmvUHU
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-vector operation
 *
@rout ATL_trmvUNU
 *    x := A * x,
@rout ATL_trmvUTU
 *    x := A'* x,
@rout ATL_trmvUCU
 *    x := conjg( A  ) * x,
@rout ATL_trmvUHU
 *    x := conjg( A' ) * x,
@rout ATL_trmvUNU ATL_trmvUTU ATL_trmvUCU ATL_trmvUHU
 *
 * where x is an n-element vector and  A  is an n by n  unit, upper tri-
 * angular matrix.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_trmvLNN ATL_trmvLTN ATL_trmvLCN ATL_trmvLHN
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-vector operation
 *
@rout ATL_trmvLNN
 *    x := A * x,
@rout ATL_trmvLTN
 *    x := A'* x,
@rout ATL_trmvLCN
 *    x := conjg( A  ) * x,
@rout ATL_trmvLHN
 *    x := conjg( A' ) * x,
@rout ATL_trmvLNN ATL_trmvLTN ATL_trmvLCN ATL_trmvLHN
 *
 * where x is an n-element vector and  A  is an n by n  non-unit,  lower
 * triangular matrix.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_trmvLNU ATL_trmvLTU ATL_trmvLCU ATL_trmvLHU
/*
@extract @(PURPOSE)
 *
 * @(rname) performs the following matrix-vector operation
 *
@rout ATL_trmvLNU
 *    x := A * x,
@rout ATL_trmvLTU
 *    x := A'* x,
@rout ATL_trmvLCU
 *    x := conjg( A  ) * x,
@rout ATL_trmvLHU
 *    x := conjg( A' ) * x,
@rout ATL_trmvLNU ATL_trmvLTU ATL_trmvLCU ATL_trmvLHU
 *
 * where x is an n-element vector and  A  is an n by n  unit, lower tri-
 * angular matrix.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tbsvUNN ATL_tbsvUTN ATL_tbsvUCN ATL_tbsvUHN
/*
@extract @(PURPOSE)
 *
 * @(rname) solves the following triangular system of equations
 *
@rout ATL_tbsvUNN
 *    A * x = b,
@rout ATL_tbsvUTN
*    A'* x = b,
@rout ATL_tbsvUCN
 *    conjg( A  ) * x = b,
@rout ATL_tbsvUHN
 *    conjg( A' ) * x = b,
@rout ATL_tbsvUNN ATL_tbsvUTN ATL_tbsvUCN ATL_tbsvUHN
 *
 * where b and x are n-element vectors and  A is an n by n non-unit, up-
 * per triangular band matrix, with ( k + 1 ) diagonals.
 *
 * No test for  singularity  or  near-singularity  is included  in  this
 * routine. Such tests must be performed before calling this routine.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tbsvUNU ATL_tbsvUTU ATL_tbsvUCU ATL_tbsvUHU
/*
@extract @(PURPOSE)
 *
 * @(rname) solves the following triangular system of equations
 *
@rout ATL_tbsvUNU
 *    A * x = b,
@rout ATL_tbsvUTU
 *    A'* x = b,
@rout ATL_tbsvUCU
 *    conjg( A  ) * x = b,
@rout ATL_tbsvUHU
 *    conjg( A' ) * x = b,
@rout ATL_tbsvUNU ATL_tbsvUTU ATL_tbsvUCU ATL_tbsvUHU
 *
 * where b and x are n-element vectors and  A  is an n by n  unit, upper
 * triangular band matrix, with ( k + 1 ) diagonals.
 *
 * No test for  singularity  or  near-singularity  is included  in  this
 * routine. Such tests must be performed before calling this routine.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tbsvLNN ATL_tbsvLTN ATL_tbsvLCN ATL_tbsvLHN
/*
@extract @(PURPOSE)
 *
 * @(rname) solves the following triangular system of equations
 *
@rout ATL_tbsvLNN
 *    A * x = b,
@rout ATL_tbsvLTN
 *    A'* x = b,
@rout ATL_tbsvLCN
 *    conjg( A  ) * x = b,
@rout ATL_tbsvLHN
 *    conjg( A' ) * x = b,
@rout ATL_tbsvLNN ATL_tbsvLTN ATL_tbsvLCN ATL_tbsvLHN
 *
 * where b and x are n-element vectors and  A is an n by n non-unit, lo-
 * wer triangular band matrix, with ( k + 1 ) diagonals.
 *
 * No test for  singularity  or  near-singularity  is included  in  this
 * routine. Such tests must be performed before calling this routine.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tbsvLNU ATL_tbsvLTU ATL_tbsvLCU ATL_tbsvLHU
/*
@extract @(PURPOSE)
 *
 * @(rname) solves the following triangular system of equations
 *
@rout ATL_tbsvLNU
 *    A * x = b,
@rout ATL_tbsvLTU
 *    A'* x = b,
@rout ATL_tbsvLCU
 *    conjg( A  ) * x = b,
@rout ATL_tbsvLHU
 *    conjg( A' ) * x = b,
@rout ATL_tbsvLNU ATL_tbsvLTU ATL_tbsvLCU ATL_tbsvLHU
 *
 * where b and x are n-element vectors and  A  is an n by n  unit, lower
 * triangular band matrix, with ( k + 1 ) diagonals.
 *
 * No test for  singularity  or  near-singularity  is included  in  this
 * routine. Such tests must be performed before calling this routine.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tpsvUNN ATL_tpsvUTN ATL_tpsvUCN ATL_tpsvUHN
/*
@extract @(PURPOSE)
 *
 * @(rname) solves the following triangular system of equations
 *
@rout ATL_tpsvUNN
 *    A * x = b,
@rout ATL_tpsvUTN
 *    A'* x = b,
@rout ATL_tpsvUCN
 *    conjg( A  ) * x = b,
@rout ATL_tpsvUHN
 *    conjg( A' ) * x = b,
@rout ATL_tpsvUNN ATL_tpsvUTN ATL_tpsvUCN ATL_tpsvUHN
 *
 * where b and x are n-element vectors and  A is an n by n non-unit, up-
 * per triangular matrix, supplied in packed form.
 *
 * No test for  singularity  or  near-singularity  is included  in  this
 * routine. Such tests must be performed before calling this routine.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tpsvUNU ATL_tpsvUTU ATL_tpsvUCU ATL_tpsvUHU
/*
@extract @(PURPOSE)
 *
 * @(rname) solves the following triangular system of equations
 *
@rout ATL_tpsvUNU
 *    A * x = b,
@rout ATL_tpsvUTU
 *    A'* x = b,
@rout ATL_tpsvUCU
 *    conjg( A  ) * x = b,
@rout ATL_tpsvUHU
 *    conjg( A' ) * x = b,
@rout ATL_tpsvUNU ATL_tpsvUTU ATL_tpsvUCU ATL_tpsvUHU
 *
 * where b and x are n-element vectors and  A  is an n by n  unit, upper
 * triangular matrix, supplied in packed form.
 *
 * No test for  singularity  or  near-singularity  is included  in  this
 * routine. Such tests must be performed before calling this routine.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tpsvLNN ATL_tpsvLTN ATL_tpsvLCN ATL_tpsvLHN
/*
@extract @(PURPOSE)
 *
 * @(rname) solves the following triangular system of equations
 *
@rout ATL_tpsvLNN
 *    A * x = b,
@rout ATL_tpsvLTN
 *    A'* x = b,
@rout ATL_tpsvLCN
 *    conjg( A  ) * x = b,
@rout ATL_tpsvLHN
 *    conjg( A' ) * x = b,
@rout ATL_tpsvLNN ATL_tpsvLTN ATL_tpsvLCN ATL_tpsvLHN
 *
 * where b and x are n-element vectors and  A is an n by n non-unit, lo-
 * wer triangular matrix, supplied in packed form.
 *
 * No test for  singularity  or  near-singularity  is included  in  this
 * routine. Such tests must be performed before calling this routine.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_tpsvLNU ATL_tpsvLTU ATL_tpsvLCU ATL_tpsvLHU
/*
@extract @(PURPOSE)
 *
 * @(rname) solves the following triangular system of equations
 *
@rout ATL_tpsvLNU
 *    A * x = b,
@rout ATL_tpsvLTU
 *    A'* x = b,
@rout ATL_tpsvLCU
 *    conjg( A  ) * x = b,
@rout ATL_tpsvLHU
 *    conjg( A' ) * x = b,
@rout ATL_tpsvLNU ATL_tpsvLTU ATL_tpsvLCU ATL_tpsvLHU
 *
 * where b and x are n-element vectors and  A  is an n by n  unit, lower
 * triangular matrix, supplied in packed form.
 *
 * No test for  singularity  or  near-singularity  is included  in  this
 * routine. Such tests must be performed before calling this routine.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_trsvUNN ATL_trsvUTN ATL_trsvUCN ATL_trsvUHN
/*
@extract @(PURPOSE)
 *
 * @(rname) solves the following triangular system of equations
 *
@rout ATL_trsvUNN
 *    A * x = b,
@rout ATL_trsvUTN
 *    A'* x = b,
@rout ATL_trsvUCN
 *    conjg( A  ) * x = b,
@rout ATL_trsvUHN
 *    conjg( A' ) * x = b,
@rout ATL_trsvUNN ATL_trsvUTN ATL_trsvUCN ATL_trsvUHN
 *
 * where b and x are n-element vectors and  A is an n by n non-unit, up-
 * per triangular matrix.
 *
 * No test for  singularity  or  near-singularity  is included  in  this
 * routine. Such tests must be performed before calling this routine.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_trsvUNU ATL_trsvUTU ATL_trsvUCU ATL_trsvUHU
/*
@extract @(PURPOSE)
 *
 * @(rname) solves the following triangular system of equations
 *
@rout ATL_trsvUNU
 *    A * x = b,
@rout ATL_trsvUTU
 *    A'* x = b,
@rout ATL_trsvUCU
 *    conjg( A  ) * x = b,
@rout ATL_trsvUHU
 *    conjg( A' ) * x = b,
@rout ATL_trsvUNU ATL_trsvUTU ATL_trsvUCU ATL_trsvUHU
 *
 * where b and x are n-element vectors and  A  is an n by n  unit, upper
 * triangular matrix.
 *
 * No test for  singularity  or  near-singularity  is included  in  this
 * routine. Such tests must be performed before calling this routine.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_trsvLNN ATL_trsvLTN ATL_trsvLCN ATL_trsvLHN
/*
@extract @(PURPOSE)
 *
 * @(rname) solves the following triangular system of equations
 *
@rout ATL_trsvLNN
 *    A * x = b,
@rout ATL_trsvLTN
 *    A'* x = b,
@rout ATL_trsvLCN
 *    conjg( A  ) * x = b,
@rout ATL_trsvLHN
 *    conjg( A' ) * x = b,
@rout ATL_trsvLNN ATL_trsvLTN ATL_trsvLCN ATL_trsvLHN
 *
 * where b and x are n-element vectors and  A is an n by n non-unit, up-
 * per triangular matrix.
 *
 * No test for  singularity  or  near-singularity  is included  in  this
 * routine. Such tests must be performed before calling this routine.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout ATL_trsvLNU ATL_trsvLTU ATL_trsvLCU ATL_trsvLHU
/*
@extract @(PURPOSE)
 *
 * @(rname) solves the following triangular system of equations
 *
@rout ATL_trsvLNU
 *    A * x = b,
@rout ATL_trsvLTU
 *    A'* x = b,
@rout ATL_trsvLCU
 *    conjg( A  ) * x = b,
@rout ATL_trsvLHU
 *    conjg( A' ) * x = b,
@rout ATL_trsvLNU ATL_trsvLTU ATL_trsvLCU ATL_trsvLHU
 *
 * where b and x are n-element vectors and  A  is an n by n  unit, lower
 * triangular matrix.
 *
 * No test for  singularity  or  near-singularity  is included  in  this
 * routine. Such tests must be performed before calling this routine.
 *
 * This is a  recursive  version of the  algorithm.  For a more detailed
 * description of  the arguments of this function, see the reference im-
 * plementation in the  ATLAS/src/blas/reference directory.
 *
@extract @(LINE)
 */
@rout !
